{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bussysteme Quicklinks Google Colabs Sakai Aufgaben 0 Organisatorisches","title":"\u00dcbersicht"},{"location":"#bussysteme","text":"","title":"Bussysteme"},{"location":"#quicklinks","text":"Google Colabs Sakai Aufgaben","title":"Quicklinks"},{"location":"#0-organisatorisches","text":"","title":"0 Organisatorisches"},{"location":"1_1_Geb%C3%A4udeautomation/","text":"1.1 Geb\u00e4udeautomation \ud83c\udfaf Lernziele Nach dieser Einheit sind Sie in der Lage dazu * Die Aufgaben von Geb\u00e4udeautomation-Management, Raumautomation, und Anlagenautomation abgrenzen * Die Aufgaben auf Feld-, Automations-, und Managementebene abgrenzen Aufgaben der Geb\u00e4udeautomation Sicherstellung von Komfort und Sicherheit Energieeffizienz Betriebskostenoptimierung Produktivi\u00e4tssteigerung \ud83e\udde0 Abgrenzung verschiedene Ebenen der Geb\u00e4udeautomation Struktur nach VDI 3814 Lauckner und Krimmling 2020 Anlagenautomation die Regelung, Steuerung, Prozessf\u00fchrung und \u00dcberwachung von Technikzentralen im Geb\u00e4ude, u. a. Heizungsanlagen, Anlagen der L\u00fcftungs-, Klima- und K\u00e4ltetechnik Raumautomation dezentrale Teilprozesse, zur Aufrechterhaltung eines lokalen Raumklimas durch Steuerungen und Bedienung der Ger\u00e4te. Schalenmodell nach VDI 3813 Blatt 1 VDI 3813 Blatt 1 Segment: kleinste Einheit im Schalenmodell ein Raum kann aus mehreren Segmenten bestehen, die f\u00fcr sich selbst funktionsf\u00e4hig sind. Raum: ein Volumen, das von sechs Bauteilen abgeschlossen wird Bereich: Zusammenschluss mehrerer R\u00e4ume z.B. Flur mit Toiletten und einigen B\u00fcros, z.B. eine ganze Etage z.B. ein Foyer Geb\u00e4ude: \"Geb\u00e4ude sind selbst\u00e4ndig benutzbare \u00fcberdeckte bauliche Anlagen, die von Menschen betreten werden k\u00f6nnen.\" 1BayBO Art. 2 Abs. 2 [26] Geb\u00e4udeautomation-Management \u00fcbergeordnete Prozesse, zur \u00dcberwachung und Steuerung (Geb\u00e4udeleittechnik) https://link.springer.com/chapter/10.1007/978-3-319-25876-8_9 Hierarchie der Geb\u00e4udeautomation (Automatisierungspyramide) Anlagen- und Raumautomation m\u00fcssen verkn\u00fcpft sein z. B. die Anpassung der zentralen W\u00e4rmeerzeugung an den dezentralen W\u00e4rmebedarf in den Geb\u00e4udezonen Verkn\u00fcpfung erfolgt in der Automationsebene z. B. Prozess\u00fcberwachung und Optimierung Lauckner und Krimmling 2020 Fazit Geb\u00e4udeautomation ist ein komplexes Thema mit verschiedenen Zielfunktionen und Nutzergruppen Einzelne Anlagen m\u00fcssen gesteuert werden R\u00e4ume m\u00fcssen der Nutzung entsprechend gesteuert werden Geb\u00e4udeautomation-Management ist die \u00fcbergeordnete Instanz, die die Anlagen- und Raumautomation im Besten Fall verkn\u00fcpft","title":"Geb\u00e4udeautomation"},{"location":"1_1_Geb%C3%A4udeautomation/#11-gebaudeautomation","text":"\ud83c\udfaf Lernziele Nach dieser Einheit sind Sie in der Lage dazu * Die Aufgaben von Geb\u00e4udeautomation-Management, Raumautomation, und Anlagenautomation abgrenzen * Die Aufgaben auf Feld-, Automations-, und Managementebene abgrenzen","title":"1.1 Geb\u00e4udeautomation"},{"location":"1_1_Geb%C3%A4udeautomation/#aufgaben-der-gebaudeautomation","text":"Sicherstellung von Komfort und Sicherheit Energieeffizienz Betriebskostenoptimierung Produktivi\u00e4tssteigerung","title":"Aufgaben der Geb\u00e4udeautomation"},{"location":"1_1_Geb%C3%A4udeautomation/#abgrenzung-verschiedene-ebenen-der-gebaudeautomation","text":"Struktur nach VDI 3814","title":"\ud83e\udde0 Abgrenzung verschiedene Ebenen der Geb\u00e4udeautomation"},{"location":"1_1_Geb%C3%A4udeautomation/#lauckner-und-krimmling-2020","text":"","title":"Lauckner und Krimmling 2020"},{"location":"1_1_Geb%C3%A4udeautomation/#anlagenautomation","text":"die Regelung, Steuerung, Prozessf\u00fchrung und \u00dcberwachung von Technikzentralen im Geb\u00e4ude, u. a. Heizungsanlagen, Anlagen der L\u00fcftungs-, Klima- und K\u00e4ltetechnik","title":"Anlagenautomation"},{"location":"1_1_Geb%C3%A4udeautomation/#raumautomation","text":"dezentrale Teilprozesse, zur Aufrechterhaltung eines lokalen Raumklimas durch Steuerungen und Bedienung der Ger\u00e4te.","title":"Raumautomation"},{"location":"1_1_Geb%C3%A4udeautomation/#schalenmodell-nach-vdi-3813-blatt-1","text":"","title":"Schalenmodell nach VDI 3813 Blatt 1"},{"location":"1_1_Geb%C3%A4udeautomation/#vdi-3813-blatt-1","text":"","title":"VDI 3813 Blatt 1"},{"location":"1_1_Geb%C3%A4udeautomation/#segment","text":"kleinste Einheit im Schalenmodell ein Raum kann aus mehreren Segmenten bestehen, die f\u00fcr sich selbst funktionsf\u00e4hig sind.","title":"Segment:"},{"location":"1_1_Geb%C3%A4udeautomation/#raum","text":"ein Volumen, das von sechs Bauteilen abgeschlossen wird","title":"Raum:"},{"location":"1_1_Geb%C3%A4udeautomation/#bereich","text":"Zusammenschluss mehrerer R\u00e4ume z.B. Flur mit Toiletten und einigen B\u00fcros, z.B. eine ganze Etage z.B. ein Foyer","title":"Bereich:"},{"location":"1_1_Geb%C3%A4udeautomation/#gebaude","text":"\"Geb\u00e4ude sind selbst\u00e4ndig benutzbare \u00fcberdeckte bauliche Anlagen, die von Menschen betreten werden k\u00f6nnen.\"","title":"Geb\u00e4ude:"},{"location":"1_1_Geb%C3%A4udeautomation/#1baybo-art-2-abs-2-26","text":"","title":"1BayBO Art. 2 Abs. 2 [26]"},{"location":"1_1_Geb%C3%A4udeautomation/#gebaudeautomation-management","text":"\u00fcbergeordnete Prozesse, zur \u00dcberwachung und Steuerung (Geb\u00e4udeleittechnik)","title":"Geb\u00e4udeautomation-Management"},{"location":"1_1_Geb%C3%A4udeautomation/#httpslinkspringercomchapter101007978-3-319-25876-8_9","text":"","title":"https://link.springer.com/chapter/10.1007/978-3-319-25876-8_9"},{"location":"1_1_Geb%C3%A4udeautomation/#hierarchie-der-gebaudeautomation-automatisierungspyramide","text":"Anlagen- und Raumautomation m\u00fcssen verkn\u00fcpft sein z. B. die Anpassung der zentralen W\u00e4rmeerzeugung an den dezentralen W\u00e4rmebedarf in den Geb\u00e4udezonen Verkn\u00fcpfung erfolgt in der Automationsebene z. B. Prozess\u00fcberwachung und Optimierung","title":"Hierarchie der Geb\u00e4udeautomation (Automatisierungspyramide)"},{"location":"1_1_Geb%C3%A4udeautomation/#lauckner-und-krimmling-2020_1","text":"","title":"Lauckner und Krimmling 2020"},{"location":"1_1_Geb%C3%A4udeautomation/#fazit","text":"Geb\u00e4udeautomation ist ein komplexes Thema mit verschiedenen Zielfunktionen und Nutzergruppen Einzelne Anlagen m\u00fcssen gesteuert werden R\u00e4ume m\u00fcssen der Nutzung entsprechend gesteuert werden Geb\u00e4udeautomation-Management ist die \u00fcbergeordnete Instanz, die die Anlagen- und Raumautomation im Besten Fall verkn\u00fcpft","title":"Fazit"},{"location":"1_2_Planungsabl%C3%A4ufe/","text":"Bussysteme SoSe 2023 Dr. Julian Huber Planungsabl\u00e4ufe Im folgenden wird ein Planungsablauf f\u00fcr die Geb\u00e4udeautomation (vereinfacht stilisiert) vorgestellt Hierbei wird auf das Beispiel einer Raumautomation eingegangen Hochschule Biberach - Nachhaltiges Planen, Bauen und Betreiben durch Einsatz von Geb\u00e4udeautomation Leistungs-phase Bezeichnung Geb\u00e4ude (\u00a7 34) Innenr\u00e4ume (\u00a7 34) Technische Ausr\u00fcstung (\u00a7 55) 1 Grundlagenermittlung 2 % 2 % 2 % 2 Vorplanung 7 % 7 % 9 % 3 Entwurfsplanung 15 % 15 % 17 % 4 Genehmigungsplanung 3 % 2 % 2 % 5 Ausf\u00fchrungsplanung 25 % 30 % 22 % 6 Vorbereitung der Vergabe 10 % 7 % 7 % 7 Mitwirkung bei der Vergabe 4 % 3 % 5 % 8 Objekt\u00fcberwachung \u2013 Bau\u00fcberwachung und Dokumentation 32 % 32 % 35 % 9 Objektbetreuung 2 % 2 % 1 % Summe 100 % 100 % 100 % Leistungsbild gem\u00e4\u00df HOAI 2013 und HOAI 2021 Grundlagenermittlung und Bedarfsplanung Zun\u00e4chst wird z.B. w\u00e4hrend der Ausschreibungsphase ein Lastenheft erstellt, welches beschreibt was erreicht werden soll H\u00e4ufig enth\u00e4lt dieses eine textuelle Beschreibung des gew\u00fcnschten Endzustandes meist formuliert durch die Kund:in / Bauherr:in ggf. unterst\u00fctzt durch einen Planungsb\u00fcro Je nach Projekt kann hier auch auf bestehende Normen verwiesen werden bzw. diese m\u00fcssen ber\u00fccksichtigt werden z.B. Energieeffizienzklasse A nach EN15232 d.h. Heizsystem mit Einzelraumre\u00adgelung mit Kom\u00admunikation und Bedarfsanforde\u00adrung \ud83e\udd13 \u00d6sterreich Leistungsgruppen der standardisierten Bauausschreibung Komponenten-basiert. D.h. es werden Komponenten(typen) beschrieben, die in der Ausschreibung verwendet werden sollen und weniger auf die Erf\u00fcllung von Funktionen eingegangen Leistungsgruppen LG 84 - GA-System Raumautomation LG 85 GA-System Anlagenautomation (AA) LG 86 GA-Management (GA-M) \ud83e\udd13 Schweiz St\u00e4rkerer Fokus auf die Funktionen (z.B. durch Funktionstests) KBOB Empfehlung Geb\u00e4udetechnik dient als Definition der Anforderung an die geb\u00e4ude-technischen Installationen und Anlagen Vor- bis Genehmigungsplanung Fachplaner nehmen eine formale Beschreibung der Funktionen vor Die konzipieren wie die Funktionen umgesetzt werden sollen (Pflichtenheft) Typisch f\u00fcr diese Phase ist die Erstellung von Flie\u00dfbildern und Schemata z.B. Stromlaufpl\u00e4ne, Pneumatikpl\u00e4ne, Hydraulikpl\u00e4ne, etc. Raumautomations-Schema und Raumautomations-Funktionschema (VDI 3813) Analgenautomations-Schema und Anlagenautomations-Funktionschema (VDI 3814) Komponenten-Sicht durch Preplanning https://www.eplan.de/unternehmen/news/automatisiertes-engineering-in-der-gebaudeautomation/ Funktions-Sicht durch Raumautomations-Schema (VDI 3813) Zuordnung von Sensoren, Aktoren und Funktionen zueinander und zu Raum vs. Segment (keine genaue R\u00e4umliche Positionierung) Blockbausteine f\u00fcr Funktionen: Nutzen Attribute der Sensoren, um Attribute der Aktoren zu ver\u00e4ndern Funktionen Eingaben : Werte, die in die Funktion eingehen und sich abh\u00e4ngig vom Systemzustand \u00e4ndern k\u00f6nnen Parameter : unver\u00e4nderliche Werte, die einmalig konfiguriert werden (z.B. in Abh\u00e4ngigkeit der Raumgr\u00f6\u00dfe) Ausgaben : Werte, welche von der Funktion abh\u00e4ngig von Parametern und Eingaben zur\u00fcckgegeben werden Viele Funktionen stehen f\u00fcr viele Systeme standardisiert zur Verf\u00fcgung (z.B. Loxone , Beckhoff , etc.) oder k\u00f6nnen selbst implementiert werden Vorsicht, das stimmt nicht ganze mit der \u00fcblichen Benennung bei Programmiersprachen \u00fcberein Sensorfunktionen Ziel: Erfassen von Zust\u00e4nden Pr\u00e4senzerkennung, Fenster\u00fcberwachung, Taupunkt\u00fcberwachung, Lufttemperaturmessung, Helligkeitsmessung, Luftqualit\u00e4tsmessung, Windgeschwindigkeit, Niederschlag Sensorfuktionen != Sensoren / Datenpunkte \"k\u00fcnstliche\" Trennung erh\u00f6ht Flexibilit\u00e4t Ein Datenpunkt / Sensor Lufttemperaturmessung Luftqualit\u00e4tsmessung ggf. Taupunkt\u00fcberwachung https://www.sensorshop24.de/raumkombifuehler-fuer-temperatur-und-feuchte-0-10v-4-20ma Beispiel Verschattungkorrektur https://infosys.beckhoff.com/index.php?content=../content/1031/tcplclibhvac/11659363083.html&id= Aktorfunktionen Ziel: Steuerung von Komponenten bin\u00e4rer Schaltaktor Lichtaktor, Sonnenschutzaktor, Stellantriebsaktor (z.B: Heizk\u00f6rper) Bedien-, Anzeige und Managementfunktionen Bedien- und Anzeigefunktionen ( lokal ) Stellantriebsaktor, Sonnenschutzstellen, Antriebstellen, Temperatursollwertstellen, Raumnutzungsart w\u00e4hlen, Pr\u00e4senzmelden Managementfunktionen Aufzeichnung, Archivierung und statistische Analyse Anwendungsfunktionen sind Programmabl\u00e4ufe die meist mehrere Aktoren und Sensoren miteinbeziehen Raumklima Energieniveauwahl, Energieniveauwahl mit Startoptimierung,Sollwertermittlung, Funktionswahl, Temperaturregelung, Raum\u2010Zulufttemperatur\u2010Kaskade, Ventilatorsteuerung, Sequenzsteuerung, Stellwertbegrenzung, Luftqualit\u00e4tsregelung, Nachtk\u00fchlung, Volumenstromregelung Anwendungsfunktionen Beleuchtung Lichtschaltung, Treppenlichtschaltung , Automatiklicht, Tageslichtschaltung, Kostantlichtregelung, D\u00e4mmerungsschaltung Sonnenschutz Priorit\u00e4tssteuerung, D\u00e4mmerungsautomatik, Sonnenautomatik, Lamellennachf\u00fchrung, Verschattungskorrektur, Thermoautomatik, Witterungsschutz \u00dcbergreifend Belegungsauswertung, Steuerung \u00fcber Raumnutzung, Zeitprogramm, Trennwandsteuerung, Thermoautomatik Beispiel Treppenlichtschaltung \u00dcber die Funktion Treppenlichtschaltung k\u00f6nnen Beleuchtungseinrichtungen tempor\u00e4r eingeschaltet werden. Nach Ablauf der Treppenlichthaltezeit kann eine Abschaltvorwarnzeit aktiv werden, die den Nutzer z. B. durch kurzzeitige Unterbrechung(\u201eFlackern\u201c) \u00fcber die bevorstehende Abschaltung informiert. Ein erneuter Empfang einer Eingabeinformation zum Einschalten startet die Verz\u00f6gerungszeit neu. Die Funktion ben\u00f6tigt als Eingabeinformation das Ergebnis der Bedienfunktion Licht stellen und liefert ihrerseits die Ausgabeinformation f\u00fcr eine oder mehrere Aktorfunktionen Lichtaktor. Zusammenhang zwischen verschiedenen Funktionen https://assets.new.siemens.com/siemens/assets/api/uuid:c107cd4a-cbd2-4b40-aeaa-a1face4c3dc7/planungshandbuch-gebaudeautomation-de.pdf Schritt Raumautomations-Schema Ableitungen aus Vorplanung und Raumautomations-Schema Raumautomations-Schema zielt insbesondere auf die Implementierung, der gezielten Funktionalit\u00e4t (Funktionsbausteine werden auch in der Programmierung eingesetzt) Grafisches Werkzeug: Intuitive Pr\u00fcfung auf Vollst\u00e4ndigkeit m\u00f6glich Entscheidung f\u00fcr Raum und Segment z.b. ein vs. mehrere Bewegungsmelder pro Segment F\u00fcr die Mengenplanung und Installationsplanung ist eine andere Darstellung hilfreicher :writing_hand: Aufgabe: Raumautomationsschema f\u00fcr ein Treppenhaus Bef\u00fcllen Sie das vorliegende Raumautomations-Schema mit den entsprechenden Funktionen f\u00fcr die Beleuchtung eines Treppenhauses Alle Leuchten werden \u00fcber einen Aktor f\u00fcr das gemachte Treppenhaus zusammengefasst Das Treppenhaus verbindet zwei Stockwerke, auf jedem soll ein bedienelement f\u00fcr die Beleuchtung angebracht werden Die Anwendungsfunktion Treppenlichtschaltung soll hierr\u00fcber gesteuert werden k\u00f6nnen zus\u00e4tzlich soll die Beleuchtung auch direkt aus der Gebeudeleittechnik gesteuert werden k\u00f6nnen :writing_hand: L\u00f6sung Ausf\u00fchrung Entscheidung f\u00fcr Hardware und Software, um die Funktionen umzusetzen Erstellung von Detailpl\u00e4nen und Dokumentationen Installation der Hardware und Verkabelung Implemetierung von Software Funktionstests Beispiel: Parametrisierung eines DALI-Systems Beispiel: Programmierung eine SPS Bussysteme i.d.R. gibt es eine Vielzahl von m\u00f6glichen Bussystemen, die f\u00fcr die Umsetzung der Funktionen in Frage kommen h\u00e4ufig werden mehrere Bussysteme kombiniert und m\u00fcssen orchestriert werden neben den Kosten m\u00fcssen auch Anforderungen an Erweiterbarkeit und Wartbarkeit ber\u00fccksichtigt werden Erweiterbarkeit: Wie einfach ist es, neue Komponenten hinzuzuf\u00fcgen? Wie offen ist das System f\u00fcr Ver\u00e4nderungen? Wartbarkeit: Sind Dienstleister oder Personal verf\u00fcgbar, die das System warten k\u00f6nnen? Ist davon auszugehen, dass das System in 10 Jahren noch verf\u00fcgbar ist? Betriebsphase Softwareupdates: Wie k\u00f6nnen Softwareupdates eingespielt werden? Over-the-Air vs manuell? Wie werden die Updates getestet? Funktionstests: Wie kann die Funktionalit\u00e4t \u00fcberpr\u00fcft werden? Wie k\u00f6nnen Fehler identifiziert werden? Automatisierungspyramide Cloud Zunehmende Bedeutung von Cloud-Systemen Appendix: Ausgew\u00e4hlte Anwendungsfunktionen Funktionen f\u00fcr die Raumklimaregelung II Startoptimierung Wird dem Raumtemperaturregler \u00fcber ein Zeitprogramm zus\u00e4tzlich zum gegenw\u00e4rtigen Energieniveau auch das n\u00e4chste und der zugeh\u00f6rige Zeitpunkt mitgeteilt, ist der Regler in der Lage, den optimalen Aufheizzeitpunkt des Raums anhand zus\u00e4tzlicher Informationen, wie der Raum- und der Au\u00dfentemperatur, so zu bestimmen, dass die gew\u00fcnschte Raumtemperatur genau zu dem gew\u00e4hlten Zeitpunkt zur Verf\u00fcgung steht (Erweiterung der Energieniveauwahl). Fenster\u00fcberwachung Bei ge\u00f6ffneten Fenstern sorgt die Fenster\u00fcberwachung f\u00fcr eine automatische Umschaltung auf das Energieniveau Geb\u00e4udeschutz um Energieverschwendung zu vermeiden. Der Zustand der Fenster wird \u00fcber entsprechende Kontakte eingelesen. Funktionen f\u00fcr die Raumklimaregelung III Sollwertermittlung Abh\u00e4ngig vom Energieniveau muss ein Raumtemperaturregler in der Lage sein, die korrekte Sollwertvorgabe zu ermitteln. Zus\u00e4tzlich kann der Sollwert bei hohen Au\u00dfentemperaturen gleitend angehoben werden ( Sommerkompensation ), um zu gro\u00dfe Unterschiede zur Raumtemperatur zu vermeiden. Temperaturregelung Die eigentliche Regelung der Raumtemperatur durch Ermittlung der korrekten Stellantriebsstellung f\u00fcr Heizen oder K\u00fchlen erfolgt durch die Funktion Temperaturregelung. In den meisten F\u00e4llen kommen PI-Regler zum Einsatz, die in der Lage sind, statische Regelabweichungen zu eliminieren. Funktionen f\u00fcr die Raumklimaregelung IV Ventilatorsteuerung Luftgest\u00fctzte Anlagen, z. B. Gebl\u00e4sekonvektoren, verf\u00fcgen \u00fcber Ventilatoren zum Lufttransport. Die Luftmenge kann dabei meist mehrstufig an die erforderliche Heiz- oder K\u00fchlleistung angepasst werden. Die Wahl der geeigneten Ventilatorstufe erfolgt anhand der Differenz der Ist- zur Soll-Raumlufttemperatur oder analog zu den Stellantrieben der Heiz- oder K\u00fchlregister. Luftqualit\u00e4tsregelung Wird die Versorgung der R\u00e4ume mit Frischluft \u00fcber mechanische Systeme, wie Zentral- oder Fassadenl\u00fcftungsanlagen gew\u00e4hrleistet, wird die Zuluftmenge zur Einsparung elektrischer Energie f\u00fcr die Ventilatoren an die Raumluftqualit\u00e4t angepasst . Funktionen f\u00fcr die Raumklimaregelung IV Nachtk\u00fchlung K\u00fchle Nachtluft l\u00e4sst sich zum Herunterk\u00fchlen der Raumluft nutzen, falls Fenster oder Fassadenklappen motorisch ge\u00f6ffnet werden k\u00f6nnen oder Gebl\u00e4sekonvektoren mit Zuluftklappen vorhanden sind. Diese Funktion sollte mit Hilfe der gemessenen lokalen Raumtemperatur und der Au\u00dfentemperatur raumindividuell ausgef\u00fchrt werden, um eine optimale Absenkung zu erreichen. Thermoautomatik Durch die Fenster eintretendes Sonnenlicht sorgt f\u00fcr einen W\u00e4rmeeintrag in den Raum, der je nach Raumtemperatur willkommen oder unwillkommen ist. Die Thermoautomatik \u00fcbernimmt in unbelegten R\u00e4umen nun die Kontrolle \u00fcber den Sonnenschutz zur Unterst\u00fctzung von Heiz- oder K\u00fchlvorg\u00e4ngen. So kann im Sommer eine \u00dcberhitzung vermieden und im Winter die Heizung durch solare Gewinne entlastet werden. Funktionen f\u00fcr Beleuchtung, Blendschutz und Tageslichtnutzung Konstantlichtregelung Ein Sensor zur Erfassung der Raumhelligkeit, z. B. innerhalb eines Multisensors, sorgt f\u00fcr die exakte Anpassung des Beleuchtungsniveaus an die Arbeitsaufgabe. Hierf\u00fcr erforderlich sind dimmf\u00e4hige Aktoren (analoger Ausgang). Tageslichtschaltung Der \"kleine Bruder\" der Konstantlichtregelung ist \u00fcberall dort einsetzbar, wo die Beleuchtung nur schaltbar ausgef\u00fchrt werden kann. Zur Erfassung der Helligkeit ist ebenfalls ein Sensor im Raum erforderlich. Unterschreitet das Tageslicht die erforderliche Raumhelligkeit, wird Kunstlicht automatisch in ein oder mehreren Stufen zugeschaltet und bei Zunahme des Tageslichtanteils wieder abgeschaltet (digitaler Ausgang). Funktionen f\u00fcr Beleuchtung etc. II Automatiklicht In R\u00e4umen ohne ausreichende Tageslichtversorgung, z. B. in Fluren oder Sanit\u00e4rr\u00e4umen, l\u00e4sst sich Energie sparen, indem die Beleuchtung nur tempor\u00e4r eingeschaltet wird. Die Pr\u00e4senzerkennung liefert die hierf\u00fcr erforderlichen Sensordaten. Eine einstellbare Abschaltverz\u00f6gerung sorgt f\u00fcr Beleuchtungskomfort. Sonnenautomatik Au\u00dfenliegende Jalousien und bedingt auch Markisen sorgen vor allem f\u00fcr einen W\u00e4rmeschutz des Geb\u00e4udes. Innenliegende Jalousien, Vertikallamellen u. \u00e4. sorgen vor allem f\u00fcr Blendfreiheit an Arbeitspl\u00e4tzen. Die Sonnenautomatik sorgt nutzt Wetterdaten, damit der au\u00dfenliegende Sonnenschutz eine einstellbare Position immer dann einnimmt, wenn eine bestimmte Strahlungsintensit\u00e4t \u00fcberschritten wird. Der innenliegende Blendschutz ist i. d. R. nicht automatisiert, da das Blendungsempfinden individuell zu bewerten ist. Funktionen f\u00fcr Beleuchtung etc. III Lamellennachf\u00fchrung Die Lamellennachf\u00fchrung ist eine Weiterentwicklung der Sonnenautomatik . Bei hoher Strahlungsintensit\u00e4t f\u00e4hrt der Sonnenschutz dazu in eine Stellung, die zyklisch dem Sonnenstand angepasst wird. So wird unter Aufrechterhaltung des Blendschutzes die Tageslichtversorgung maximiert. Verschattungskorrektur Umliegende Geb\u00e4ude oder eigene Geb\u00e4udeteile sorgen auf den Fassaden f\u00fcr Schattenwurf, der die Blendschutzfunktion f\u00fcr die im Schatten liegenden Jalousien zeitweise unn\u00f6tig macht. Die Jalousien sollten f\u00fcr eine bessere Tageslichtversorgung in dieser Zeit ge\u00f6ffnet sein. Die Verschattungskorrektur korrigiert dies in Verbindung mit der Sonnenautomatik oder der Lamellennachf\u00fchrung arbeitet. Die Funktion wird gelegentlich auch Jahresverschattungsdiagramm genannt. Funktionen f\u00fcr Beleuchtung etc. IV D\u00e4mmerungsschaltung Au\u00dfenbeleuchtung ist nur dann erforderlich, wenn es dunkel wird. Da der Zeitpunkt jahreszeitlich variiert, sorgt die D\u00e4mmerungsschaltung selbstst\u00e4ndig f\u00fcr den optimalen Einschaltmoment. Witterungsschutz Witterungsschutzfunktionen vermeiden Sch\u00e4den an der Sonnenschutzanlage. Sensoren f\u00fcr Temperatur, Niederschlag, Windgeschwindigkeit und -richtung stellen die erforderlichen Wetterdaten zur Verf\u00fcgung, damit der Sonnenschutz rechtzeitig vor Besch\u00e4digungen eingezogen wird (ggf. auch f\u00fcr Fenster).","title":"Planungsabl\u00e4ufe"},{"location":"1_2_Planungsabl%C3%A4ufe/#bussysteme","text":"SoSe 2023 Dr. Julian Huber","title":"Bussysteme"},{"location":"1_2_Planungsabl%C3%A4ufe/#planungsablaufe","text":"Im folgenden wird ein Planungsablauf f\u00fcr die Geb\u00e4udeautomation (vereinfacht stilisiert) vorgestellt Hierbei wird auf das Beispiel einer Raumautomation eingegangen","title":"Planungsabl\u00e4ufe"},{"location":"1_2_Planungsabl%C3%A4ufe/#hochschule-biberach-nachhaltiges-planen-bauen-und-betreiben-durch-einsatz-von-gebaudeautomation","text":"Leistungs-phase Bezeichnung Geb\u00e4ude (\u00a7 34) Innenr\u00e4ume (\u00a7 34) Technische Ausr\u00fcstung (\u00a7 55) 1 Grundlagenermittlung 2 % 2 % 2 % 2 Vorplanung 7 % 7 % 9 % 3 Entwurfsplanung 15 % 15 % 17 % 4 Genehmigungsplanung 3 % 2 % 2 % 5 Ausf\u00fchrungsplanung 25 % 30 % 22 % 6 Vorbereitung der Vergabe 10 % 7 % 7 % 7 Mitwirkung bei der Vergabe 4 % 3 % 5 % 8 Objekt\u00fcberwachung \u2013 Bau\u00fcberwachung und Dokumentation 32 % 32 % 35 % 9 Objektbetreuung 2 % 2 % 1 % Summe 100 % 100 % 100 %","title":"Hochschule Biberach - Nachhaltiges Planen, Bauen und Betreiben durch Einsatz von Geb\u00e4udeautomation"},{"location":"1_2_Planungsabl%C3%A4ufe/#leistungsbild-gema-hoai-2013-und-hoai-2021","text":"","title":"Leistungsbild gem\u00e4\u00df HOAI 2013 und HOAI 2021"},{"location":"1_2_Planungsabl%C3%A4ufe/#grundlagenermittlung-und-bedarfsplanung","text":"Zun\u00e4chst wird z.B. w\u00e4hrend der Ausschreibungsphase ein Lastenheft erstellt, welches beschreibt was erreicht werden soll H\u00e4ufig enth\u00e4lt dieses eine textuelle Beschreibung des gew\u00fcnschten Endzustandes meist formuliert durch die Kund:in / Bauherr:in ggf. unterst\u00fctzt durch einen Planungsb\u00fcro Je nach Projekt kann hier auch auf bestehende Normen verwiesen werden bzw. diese m\u00fcssen ber\u00fccksichtigt werden z.B. Energieeffizienzklasse A nach EN15232 d.h. Heizsystem mit Einzelraumre\u00adgelung mit Kom\u00admunikation und Bedarfsanforde\u00adrung","title":"Grundlagenermittlung und Bedarfsplanung"},{"location":"1_2_Planungsabl%C3%A4ufe/#osterreich","text":"Leistungsgruppen der standardisierten Bauausschreibung Komponenten-basiert. D.h. es werden Komponenten(typen) beschrieben, die in der Ausschreibung verwendet werden sollen und weniger auf die Erf\u00fcllung von Funktionen eingegangen Leistungsgruppen LG 84 - GA-System Raumautomation LG 85 GA-System Anlagenautomation (AA) LG 86 GA-Management (GA-M)","title":"\ud83e\udd13 \u00d6sterreich"},{"location":"1_2_Planungsabl%C3%A4ufe/#schweiz","text":"St\u00e4rkerer Fokus auf die Funktionen (z.B. durch Funktionstests) KBOB Empfehlung Geb\u00e4udetechnik dient als Definition der Anforderung an die geb\u00e4ude-technischen Installationen und Anlagen","title":"\ud83e\udd13 Schweiz"},{"location":"1_2_Planungsabl%C3%A4ufe/#vor-bis-genehmigungsplanung","text":"Fachplaner nehmen eine formale Beschreibung der Funktionen vor Die konzipieren wie die Funktionen umgesetzt werden sollen (Pflichtenheft) Typisch f\u00fcr diese Phase ist die Erstellung von Flie\u00dfbildern und Schemata z.B. Stromlaufpl\u00e4ne, Pneumatikpl\u00e4ne, Hydraulikpl\u00e4ne, etc. Raumautomations-Schema und Raumautomations-Funktionschema (VDI 3813) Analgenautomations-Schema und Anlagenautomations-Funktionschema (VDI 3814)","title":"Vor- bis Genehmigungsplanung"},{"location":"1_2_Planungsabl%C3%A4ufe/#komponenten-sicht-durch-preplanning","text":"","title":"Komponenten-Sicht durch Preplanning"},{"location":"1_2_Planungsabl%C3%A4ufe/#httpswwweplandeunternehmennewsautomatisiertes-engineering-in-der-gebaudeautomation","text":"","title":"https://www.eplan.de/unternehmen/news/automatisiertes-engineering-in-der-gebaudeautomation/"},{"location":"1_2_Planungsabl%C3%A4ufe/#funktions-sicht-durch-raumautomations-schema-vdi-3813","text":"Zuordnung von Sensoren, Aktoren und Funktionen zueinander und zu Raum vs. Segment (keine genaue R\u00e4umliche Positionierung) Blockbausteine f\u00fcr Funktionen: Nutzen Attribute der Sensoren, um Attribute der Aktoren zu ver\u00e4ndern","title":"Funktions-Sicht durch Raumautomations-Schema (VDI 3813)"},{"location":"1_2_Planungsabl%C3%A4ufe/#funktionen","text":"Eingaben : Werte, die in die Funktion eingehen und sich abh\u00e4ngig vom Systemzustand \u00e4ndern k\u00f6nnen Parameter : unver\u00e4nderliche Werte, die einmalig konfiguriert werden (z.B. in Abh\u00e4ngigkeit der Raumgr\u00f6\u00dfe) Ausgaben : Werte, welche von der Funktion abh\u00e4ngig von Parametern und Eingaben zur\u00fcckgegeben werden Viele Funktionen stehen f\u00fcr viele Systeme standardisiert zur Verf\u00fcgung (z.B. Loxone , Beckhoff , etc.) oder k\u00f6nnen selbst implementiert werden","title":"Funktionen"},{"location":"1_2_Planungsabl%C3%A4ufe/#vorsicht-das-stimmt-nicht-ganze-mit-der-ublichen-benennung-bei-programmiersprachen-uberein","text":"","title":"Vorsicht, das stimmt nicht ganze mit der \u00fcblichen Benennung bei Programmiersprachen \u00fcberein"},{"location":"1_2_Planungsabl%C3%A4ufe/#sensorfunktionen","text":"Ziel: Erfassen von Zust\u00e4nden Pr\u00e4senzerkennung, Fenster\u00fcberwachung, Taupunkt\u00fcberwachung, Lufttemperaturmessung, Helligkeitsmessung, Luftqualit\u00e4tsmessung, Windgeschwindigkeit, Niederschlag","title":"Sensorfunktionen"},{"location":"1_2_Planungsabl%C3%A4ufe/#sensorfuktionen-sensoren-datenpunkte","text":"\"k\u00fcnstliche\" Trennung erh\u00f6ht Flexibilit\u00e4t Ein Datenpunkt / Sensor Lufttemperaturmessung Luftqualit\u00e4tsmessung ggf. Taupunkt\u00fcberwachung","title":"Sensorfuktionen != Sensoren / Datenpunkte"},{"location":"1_2_Planungsabl%C3%A4ufe/#httpswwwsensorshop24deraumkombifuehler-fuer-temperatur-und-feuchte-0-10v-4-20ma","text":"","title":"https://www.sensorshop24.de/raumkombifuehler-fuer-temperatur-und-feuchte-0-10v-4-20ma"},{"location":"1_2_Planungsabl%C3%A4ufe/#beispiel-verschattungkorrektur","text":"","title":"Beispiel Verschattungkorrektur"},{"location":"1_2_Planungsabl%C3%A4ufe/#httpsinfosysbeckhoffcomindexphpcontentcontent1031tcplclibhvac11659363083htmlid","text":"","title":"https://infosys.beckhoff.com/index.php?content=../content/1031/tcplclibhvac/11659363083.html&amp;id="},{"location":"1_2_Planungsabl%C3%A4ufe/#aktorfunktionen","text":"Ziel: Steuerung von Komponenten bin\u00e4rer Schaltaktor Lichtaktor, Sonnenschutzaktor, Stellantriebsaktor (z.B: Heizk\u00f6rper)","title":"Aktorfunktionen"},{"location":"1_2_Planungsabl%C3%A4ufe/#bedien-anzeige-und-managementfunktionen","text":"Bedien- und Anzeigefunktionen ( lokal ) Stellantriebsaktor, Sonnenschutzstellen, Antriebstellen, Temperatursollwertstellen, Raumnutzungsart w\u00e4hlen, Pr\u00e4senzmelden Managementfunktionen Aufzeichnung, Archivierung und statistische Analyse","title":"Bedien-, Anzeige und Managementfunktionen"},{"location":"1_2_Planungsabl%C3%A4ufe/#anwendungsfunktionen","text":"sind Programmabl\u00e4ufe die meist mehrere Aktoren und Sensoren miteinbeziehen Raumklima Energieniveauwahl, Energieniveauwahl mit Startoptimierung,Sollwertermittlung, Funktionswahl, Temperaturregelung, Raum\u2010Zulufttemperatur\u2010Kaskade, Ventilatorsteuerung, Sequenzsteuerung, Stellwertbegrenzung, Luftqualit\u00e4tsregelung, Nachtk\u00fchlung, Volumenstromregelung","title":"Anwendungsfunktionen"},{"location":"1_2_Planungsabl%C3%A4ufe/#anwendungsfunktionen_1","text":"Beleuchtung Lichtschaltung, Treppenlichtschaltung , Automatiklicht, Tageslichtschaltung, Kostantlichtregelung, D\u00e4mmerungsschaltung Sonnenschutz Priorit\u00e4tssteuerung, D\u00e4mmerungsautomatik, Sonnenautomatik, Lamellennachf\u00fchrung, Verschattungskorrektur, Thermoautomatik, Witterungsschutz \u00dcbergreifend Belegungsauswertung, Steuerung \u00fcber Raumnutzung, Zeitprogramm, Trennwandsteuerung, Thermoautomatik","title":"Anwendungsfunktionen"},{"location":"1_2_Planungsabl%C3%A4ufe/#beispiel-treppenlichtschaltung","text":"\u00dcber die Funktion Treppenlichtschaltung k\u00f6nnen Beleuchtungseinrichtungen tempor\u00e4r eingeschaltet werden. Nach Ablauf der Treppenlichthaltezeit kann eine Abschaltvorwarnzeit aktiv werden, die den Nutzer z. B. durch kurzzeitige Unterbrechung(\u201eFlackern\u201c) \u00fcber die bevorstehende Abschaltung informiert. Ein erneuter Empfang einer Eingabeinformation zum Einschalten startet die Verz\u00f6gerungszeit neu. Die Funktion ben\u00f6tigt als Eingabeinformation das Ergebnis der Bedienfunktion Licht stellen und liefert ihrerseits die Ausgabeinformation f\u00fcr eine oder mehrere Aktorfunktionen Lichtaktor.","title":"Beispiel Treppenlichtschaltung"},{"location":"1_2_Planungsabl%C3%A4ufe/#zusammenhang-zwischen-verschiedenen-funktionen","text":"","title":"Zusammenhang zwischen verschiedenen Funktionen"},{"location":"1_2_Planungsabl%C3%A4ufe/#httpsassetsnewsiemenscomsiemensassetsapiuuidc107cd4a-cbd2-4b40-aeaa-a1face4c3dc7planungshandbuch-gebaudeautomation-depdf","text":"","title":"https://assets.new.siemens.com/siemens/assets/api/uuid:c107cd4a-cbd2-4b40-aeaa-a1face4c3dc7/planungshandbuch-gebaudeautomation-de.pdf"},{"location":"1_2_Planungsabl%C3%A4ufe/#schritt-raumautomations-schema","text":"","title":"Schritt Raumautomations-Schema"},{"location":"1_2_Planungsabl%C3%A4ufe/#ableitungen-aus-vorplanung-und-raumautomations-schema","text":"Raumautomations-Schema zielt insbesondere auf die Implementierung, der gezielten Funktionalit\u00e4t (Funktionsbausteine werden auch in der Programmierung eingesetzt) Grafisches Werkzeug: Intuitive Pr\u00fcfung auf Vollst\u00e4ndigkeit m\u00f6glich Entscheidung f\u00fcr Raum und Segment z.b. ein vs. mehrere Bewegungsmelder pro Segment F\u00fcr die Mengenplanung und Installationsplanung ist eine andere Darstellung hilfreicher","title":"Ableitungen aus Vorplanung und Raumautomations-Schema"},{"location":"1_2_Planungsabl%C3%A4ufe/#writing_hand-aufgabe-raumautomationsschema-fur-ein-treppenhaus","text":"Bef\u00fcllen Sie das vorliegende Raumautomations-Schema mit den entsprechenden Funktionen f\u00fcr die Beleuchtung eines Treppenhauses Alle Leuchten werden \u00fcber einen Aktor f\u00fcr das gemachte Treppenhaus zusammengefasst Das Treppenhaus verbindet zwei Stockwerke, auf jedem soll ein bedienelement f\u00fcr die Beleuchtung angebracht werden Die Anwendungsfunktion Treppenlichtschaltung soll hierr\u00fcber gesteuert werden k\u00f6nnen zus\u00e4tzlich soll die Beleuchtung auch direkt aus der Gebeudeleittechnik gesteuert werden k\u00f6nnen","title":":writing_hand: Aufgabe: Raumautomationsschema f\u00fcr ein Treppenhaus"},{"location":"1_2_Planungsabl%C3%A4ufe/#writing_hand-losung","text":"","title":":writing_hand: L\u00f6sung"},{"location":"1_2_Planungsabl%C3%A4ufe/#ausfuhrung","text":"Entscheidung f\u00fcr Hardware und Software, um die Funktionen umzusetzen Erstellung von Detailpl\u00e4nen und Dokumentationen Installation der Hardware und Verkabelung Implemetierung von Software Funktionstests","title":"Ausf\u00fchrung"},{"location":"1_2_Planungsabl%C3%A4ufe/#beispiel-parametrisierung-eines-dali-systems","text":"","title":"Beispiel: Parametrisierung eines DALI-Systems"},{"location":"1_2_Planungsabl%C3%A4ufe/#beispiel-programmierung-eine-sps","text":"","title":"Beispiel: Programmierung eine SPS"},{"location":"1_2_Planungsabl%C3%A4ufe/#bussysteme_1","text":"i.d.R. gibt es eine Vielzahl von m\u00f6glichen Bussystemen, die f\u00fcr die Umsetzung der Funktionen in Frage kommen h\u00e4ufig werden mehrere Bussysteme kombiniert und m\u00fcssen orchestriert werden neben den Kosten m\u00fcssen auch Anforderungen an Erweiterbarkeit und Wartbarkeit ber\u00fccksichtigt werden Erweiterbarkeit: Wie einfach ist es, neue Komponenten hinzuzuf\u00fcgen? Wie offen ist das System f\u00fcr Ver\u00e4nderungen? Wartbarkeit: Sind Dienstleister oder Personal verf\u00fcgbar, die das System warten k\u00f6nnen? Ist davon auszugehen, dass das System in 10 Jahren noch verf\u00fcgbar ist?","title":"Bussysteme"},{"location":"1_2_Planungsabl%C3%A4ufe/#betriebsphase","text":"Softwareupdates: Wie k\u00f6nnen Softwareupdates eingespielt werden? Over-the-Air vs manuell? Wie werden die Updates getestet? Funktionstests: Wie kann die Funktionalit\u00e4t \u00fcberpr\u00fcft werden? Wie k\u00f6nnen Fehler identifiziert werden?","title":"Betriebsphase"},{"location":"1_2_Planungsabl%C3%A4ufe/#automatisierungspyramide","text":"","title":"Automatisierungspyramide"},{"location":"1_2_Planungsabl%C3%A4ufe/#cloud","text":"Zunehmende Bedeutung von Cloud-Systemen","title":"Cloud"},{"location":"1_2_Planungsabl%C3%A4ufe/#appendix-ausgewahlte-anwendungsfunktionen","text":"","title":"Appendix: Ausgew\u00e4hlte Anwendungsfunktionen"},{"location":"1_2_Planungsabl%C3%A4ufe/#funktionen-fur-die-raumklimaregelung-ii","text":"Startoptimierung Wird dem Raumtemperaturregler \u00fcber ein Zeitprogramm zus\u00e4tzlich zum gegenw\u00e4rtigen Energieniveau auch das n\u00e4chste und der zugeh\u00f6rige Zeitpunkt mitgeteilt, ist der Regler in der Lage, den optimalen Aufheizzeitpunkt des Raums anhand zus\u00e4tzlicher Informationen, wie der Raum- und der Au\u00dfentemperatur, so zu bestimmen, dass die gew\u00fcnschte Raumtemperatur genau zu dem gew\u00e4hlten Zeitpunkt zur Verf\u00fcgung steht (Erweiterung der Energieniveauwahl). Fenster\u00fcberwachung Bei ge\u00f6ffneten Fenstern sorgt die Fenster\u00fcberwachung f\u00fcr eine automatische Umschaltung auf das Energieniveau Geb\u00e4udeschutz um Energieverschwendung zu vermeiden. Der Zustand der Fenster wird \u00fcber entsprechende Kontakte eingelesen.","title":"Funktionen f\u00fcr die Raumklimaregelung II"},{"location":"1_2_Planungsabl%C3%A4ufe/#funktionen-fur-die-raumklimaregelung-iii","text":"Sollwertermittlung Abh\u00e4ngig vom Energieniveau muss ein Raumtemperaturregler in der Lage sein, die korrekte Sollwertvorgabe zu ermitteln. Zus\u00e4tzlich kann der Sollwert bei hohen Au\u00dfentemperaturen gleitend angehoben werden ( Sommerkompensation ), um zu gro\u00dfe Unterschiede zur Raumtemperatur zu vermeiden. Temperaturregelung Die eigentliche Regelung der Raumtemperatur durch Ermittlung der korrekten Stellantriebsstellung f\u00fcr Heizen oder K\u00fchlen erfolgt durch die Funktion Temperaturregelung. In den meisten F\u00e4llen kommen PI-Regler zum Einsatz, die in der Lage sind, statische Regelabweichungen zu eliminieren.","title":"Funktionen f\u00fcr die Raumklimaregelung III"},{"location":"1_2_Planungsabl%C3%A4ufe/#funktionen-fur-die-raumklimaregelung-iv","text":"Ventilatorsteuerung Luftgest\u00fctzte Anlagen, z. B. Gebl\u00e4sekonvektoren, verf\u00fcgen \u00fcber Ventilatoren zum Lufttransport. Die Luftmenge kann dabei meist mehrstufig an die erforderliche Heiz- oder K\u00fchlleistung angepasst werden. Die Wahl der geeigneten Ventilatorstufe erfolgt anhand der Differenz der Ist- zur Soll-Raumlufttemperatur oder analog zu den Stellantrieben der Heiz- oder K\u00fchlregister. Luftqualit\u00e4tsregelung Wird die Versorgung der R\u00e4ume mit Frischluft \u00fcber mechanische Systeme, wie Zentral- oder Fassadenl\u00fcftungsanlagen gew\u00e4hrleistet, wird die Zuluftmenge zur Einsparung elektrischer Energie f\u00fcr die Ventilatoren an die Raumluftqualit\u00e4t angepasst .","title":"Funktionen f\u00fcr die Raumklimaregelung IV"},{"location":"1_2_Planungsabl%C3%A4ufe/#funktionen-fur-die-raumklimaregelung-iv_1","text":"Nachtk\u00fchlung K\u00fchle Nachtluft l\u00e4sst sich zum Herunterk\u00fchlen der Raumluft nutzen, falls Fenster oder Fassadenklappen motorisch ge\u00f6ffnet werden k\u00f6nnen oder Gebl\u00e4sekonvektoren mit Zuluftklappen vorhanden sind. Diese Funktion sollte mit Hilfe der gemessenen lokalen Raumtemperatur und der Au\u00dfentemperatur raumindividuell ausgef\u00fchrt werden, um eine optimale Absenkung zu erreichen. Thermoautomatik Durch die Fenster eintretendes Sonnenlicht sorgt f\u00fcr einen W\u00e4rmeeintrag in den Raum, der je nach Raumtemperatur willkommen oder unwillkommen ist. Die Thermoautomatik \u00fcbernimmt in unbelegten R\u00e4umen nun die Kontrolle \u00fcber den Sonnenschutz zur Unterst\u00fctzung von Heiz- oder K\u00fchlvorg\u00e4ngen. So kann im Sommer eine \u00dcberhitzung vermieden und im Winter die Heizung durch solare Gewinne entlastet werden.","title":"Funktionen f\u00fcr die Raumklimaregelung IV"},{"location":"1_2_Planungsabl%C3%A4ufe/#funktionen-fur-beleuchtung-blendschutz-und-tageslichtnutzung","text":"Konstantlichtregelung Ein Sensor zur Erfassung der Raumhelligkeit, z. B. innerhalb eines Multisensors, sorgt f\u00fcr die exakte Anpassung des Beleuchtungsniveaus an die Arbeitsaufgabe. Hierf\u00fcr erforderlich sind dimmf\u00e4hige Aktoren (analoger Ausgang). Tageslichtschaltung Der \"kleine Bruder\" der Konstantlichtregelung ist \u00fcberall dort einsetzbar, wo die Beleuchtung nur schaltbar ausgef\u00fchrt werden kann. Zur Erfassung der Helligkeit ist ebenfalls ein Sensor im Raum erforderlich. Unterschreitet das Tageslicht die erforderliche Raumhelligkeit, wird Kunstlicht automatisch in ein oder mehreren Stufen zugeschaltet und bei Zunahme des Tageslichtanteils wieder abgeschaltet (digitaler Ausgang).","title":"Funktionen f\u00fcr Beleuchtung, Blendschutz und Tageslichtnutzung"},{"location":"1_2_Planungsabl%C3%A4ufe/#funktionen-fur-beleuchtung-etc-ii","text":"Automatiklicht In R\u00e4umen ohne ausreichende Tageslichtversorgung, z. B. in Fluren oder Sanit\u00e4rr\u00e4umen, l\u00e4sst sich Energie sparen, indem die Beleuchtung nur tempor\u00e4r eingeschaltet wird. Die Pr\u00e4senzerkennung liefert die hierf\u00fcr erforderlichen Sensordaten. Eine einstellbare Abschaltverz\u00f6gerung sorgt f\u00fcr Beleuchtungskomfort. Sonnenautomatik Au\u00dfenliegende Jalousien und bedingt auch Markisen sorgen vor allem f\u00fcr einen W\u00e4rmeschutz des Geb\u00e4udes. Innenliegende Jalousien, Vertikallamellen u. \u00e4. sorgen vor allem f\u00fcr Blendfreiheit an Arbeitspl\u00e4tzen. Die Sonnenautomatik sorgt nutzt Wetterdaten, damit der au\u00dfenliegende Sonnenschutz eine einstellbare Position immer dann einnimmt, wenn eine bestimmte Strahlungsintensit\u00e4t \u00fcberschritten wird. Der innenliegende Blendschutz ist i. d. R. nicht automatisiert, da das Blendungsempfinden individuell zu bewerten ist.","title":"Funktionen f\u00fcr Beleuchtung etc. II"},{"location":"1_2_Planungsabl%C3%A4ufe/#funktionen-fur-beleuchtung-etc-iii","text":"Lamellennachf\u00fchrung Die Lamellennachf\u00fchrung ist eine Weiterentwicklung der Sonnenautomatik . Bei hoher Strahlungsintensit\u00e4t f\u00e4hrt der Sonnenschutz dazu in eine Stellung, die zyklisch dem Sonnenstand angepasst wird. So wird unter Aufrechterhaltung des Blendschutzes die Tageslichtversorgung maximiert. Verschattungskorrektur Umliegende Geb\u00e4ude oder eigene Geb\u00e4udeteile sorgen auf den Fassaden f\u00fcr Schattenwurf, der die Blendschutzfunktion f\u00fcr die im Schatten liegenden Jalousien zeitweise unn\u00f6tig macht. Die Jalousien sollten f\u00fcr eine bessere Tageslichtversorgung in dieser Zeit ge\u00f6ffnet sein. Die Verschattungskorrektur korrigiert dies in Verbindung mit der Sonnenautomatik oder der Lamellennachf\u00fchrung arbeitet. Die Funktion wird gelegentlich auch Jahresverschattungsdiagramm genannt.","title":"Funktionen f\u00fcr Beleuchtung etc. III"},{"location":"1_2_Planungsabl%C3%A4ufe/#funktionen-fur-beleuchtung-etc-iv","text":"D\u00e4mmerungsschaltung Au\u00dfenbeleuchtung ist nur dann erforderlich, wenn es dunkel wird. Da der Zeitpunkt jahreszeitlich variiert, sorgt die D\u00e4mmerungsschaltung selbstst\u00e4ndig f\u00fcr den optimalen Einschaltmoment. Witterungsschutz Witterungsschutzfunktionen vermeiden Sch\u00e4den an der Sonnenschutzanlage. Sensoren f\u00fcr Temperatur, Niederschlag, Windgeschwindigkeit und -richtung stellen die erforderlichen Wetterdaten zur Verf\u00fcgung, damit der Sonnenschutz rechtzeitig vor Besch\u00e4digungen eingezogen wird (ggf. auch f\u00fcr Fenster).","title":"Funktionen f\u00fcr Beleuchtung etc. IV"},{"location":"2_1_Messkette/","text":"Bussysteme SoSe 2023 Dr. Julian Huber Messkette EVA-Prinzip Geb\u00e4udeautomation wird durch eine Steuerungseinheit \u00fcberwacht und gesteuert Hierzu werden Eingangssingale gemessen und Ausgangssignale erzeugt In der Steuerungseinheit werden Funktionen implementiert, die die Messsignale in Ausgangssignale umwandeln Steuerungseinheiten sind heute meist frei programmierbar (z.B. Speicherprogrammierbare Steuerung) oder wurden f\u00fcr bestimmte Funktionen vorprogrammiert (z.B. Mikrocontroller in LED-Vorschaltger\u00e4ten) Digitale Eing\u00e4nge Digitale Eing\u00e4nge k\u00f6nnen nur zwei Zust\u00e4nde annehmen (0 / False oder 1 : True ) Die Zust\u00e4nde werden durch Spannungen repr\u00e4sentiert i.d.R. gibt es Spannungsbereiche, die als 0 oder 1 interpretiert werden :writing_hand: Aufgabe 2_1_1: Raspberry Pi Pico als Mikrocontroller Beim Raspberry Pi Pico handelt es sich um einen Mikrocontroller, der mittels Python programmiert werden kann Im folgenden wird folgende Hardware ben\u00f6tigt: Raspberry Pi Pico Breadboard Taster Widerstand ca. \\(470 \\Omega\\) und \\(10 \\,\\text{k}\\Omega\\) Jumperkabel Ziel ist es, dass der Mikrocontroller den Taster ausliest und den Zustand auf der Konsole ausgibt CircuitPython installieren Halte den BOOTSEL Taster auf dem Pico gedr\u00fcckt und verbinde diesen \u00fcber USB mit dem Rechner Passende Firmware UF2-File herunterladen und in den als USB-Laufwerk erkannten Pico kopieren Pico sollte jetzt neue Starten und die Firmware installieren Nach dem erneuten Verbinden sollten nun einige Programme im Pico liegen Programmieren des Pico mittels CircuitPython \u00d6ffenen Sie im Chrome Browser die Seite des Online Editors Verbinden Sie Sich mittels USB W\u00e4hlen Sie die Schnittstelle CircuitPython CDC Control aus \u00d6ffnen Sie das Verzeichnis (USB-Laufwerk) CIRCUITPY und w\u00e4hlen Sie USE / \u00d6ffnen Sie die Datei code.py und f\u00fcgen Sie den folgenden Inhalt ein \u00d6ffnen Sie die Serielle Schnittstellen, um die Ausgabe zu sehen Serial , \u00fcbertragen Sie den Code und starten Sie den Pico neu Save + Run Hauptprogramm code.py Dieses Programm wird automatisch ausgef\u00fchrt und ist der Einsteigspunkt f\u00fcr alle Programme (vgl. MAIN bei TwinCat) Passen Sie das Hauptprogramm so an, dass die LED l\u00e4nger hell als dunkel ist Passen Sie die Ausgabe an indem Sie \"Sleep!\" ersetzen # Externe Bibliotheken laden import time # Bibliothek Zeit-Funktionen import digitalio # Bibliothek zur Steuerung von GPIOs import board # Bibliothek welches die Adressen der Pins kennt: z.B. board.LED # Ein- und Ausg\u00e4nge definieren led = digitalio . DigitalInOut ( board . LED ) # Die Variable LED wird mit dem GPIO der LED auf dem Board verbunden led . direction = digitalio . Direction . OUTPUT # Legt Richtung des PIN fest -> Output # Endlosschleife while True : led . value = True time . sleep ( 0.5 ) led . value = False time . sleep ( 0.5 ) print ( \"Sleep!\" ) Pin-\u00dcbersicht VCC Voltage Common Connector: Spannungs- Versorgung \\(5\\) oder \\(3.3 \\,\\text{V}\\) Alles unter \\(0,8\\,\\text{V}\\) ist low alles \u00fcber \\(1,3\\,\\text{V}\\) ist high Ground: \\(0 \\,\\text{V}\\) Einige GPIOs k\u00f6nnen als Busleitungen genutzt werden: UART, SPI, I2C https://www.elektronik-kompendium.de/sites/raspberry-pi/2002191.htm Breadboards - Steckplatine f\u00fcr Systemtest und Prototyping - vier Reihen f\u00fcr Spannungsversorgung - weitere Raster sind l\u00e4ngs verbunden https://www.elektronik-kompendium.de/sites/praxis/bauteil_steckbrett.htm General Purpose Input/Output GPIO arbeiten von \\(2...16 \\,\\text{mA}\\) GPIOs k\u00f6nnen bin\u00e4r gelesen und geschaltet werden :writing_hand: Aufgabe 2_1_1: Anschluss eines Tasters an einen Raspberry Pi Pico Schlie\u00dfen Sie den Taster wie folgt an \\(R_{pullup} = 10 \\,\\text{k}\\Omega\\) Verbinden Sie den Taster mit dem 3.3V Pin und dem GPIO 0 F\u00fcgen Sie die folgenden Code- Teile an den richtigen Stellen ein und starten Sie das Programm import time import board import digitalio button_pin = board . GP0 # Replace with the GPIO pin connected to your button button = digitalio . DigitalInOut ( button_pin ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP # Use pull-up resistor; change if using pull-down while True : if not button . value : # Button is pressed (LOW) print ( \"Button Pressed!\" ) else : print ( \"Button Released!\" ) time . sleep ( 0.1 ) # Add a small delay to debounce the button GPIO-Eingang mit Taster/Schalter und Pullup-Widerstand Unbeschaltet oszillieren die GPIOs h\u00e4ufig unsauber zwischen den Zust\u00e4nden Grundzustand des Eingangs bei offenem Schalter: high Durch schlie\u00dfen: low \\(4{,}7~k\\Omega\\) als Standardwert (RaspBerry Pis haben eingebaute Widerst\u00e4nde, die aktiviert werden k\u00f6nnen) https://www.elektronik-kompendium.de/sites/raspberry-pi/2110081.htm, https://www.elektronik-kompendium.de/sites/raspberry-pi/2006051.htm GPIO-Eingang mit Taster/Schalter und Pulldown-Widerstand Grundzustand des Eingangs: low Durch schlie\u00dfen: high der Regel \\(10~k\\Omega\\) Zusammenfassung Schalter und Taster In der Praxis tendiert man dazu, GPIO-Eing\u00e4nge mit einem Pullup-Widerstand mit +VCC zu verbinden und gegen Ground (GND) zu schalten Erfordert Negation in der Software Werte von \\(10\\) bis \\(100~k\\Omega\\) GPIO-Eingang mit Taster/Schalter und Querwiderstand Mehr zu Pull-Up vs Pull-Down Digitale Ausg\u00e4nge Ausg\u00e4nge k\u00f6nnen mit einer Spannung beschaltet werden Bei einem Raspberry Pi Pico sind die Ausg\u00e4nge auf \\(3.3 \\,\\text{V}\\) begrenzt Die Ausg\u00e4nge k\u00f6nnen bis zu \\(16 \\,\\text{mA}\\) liefern :writing_hand: Aufgabe 2_1_3: Anschluss einer LED an einen Raspberry Pi Pico Nun wollen wir eine LED anschlie\u00dfen in der Folge \u00fcber den Taster schalten Sie LED soll nach einem Druck auf den Taster f\u00fcr \\(1\\,\\text{s}\\) leuchten passen Sie den Code entsprechend an und nutzen Sie dazu die folgenden Code-Teile import time import board import digitalio led_pin = board . GP1 # Replace with the GPIO pin connected to your LED led = digitalio . DigitalInOut ( led_pin ) led . direction = digitalio . Direction . OUTPUT while True : led . value = not led . value # Toggle the LED state time . sleep ( 0.2 ) # Add a small delay for debouncing time . sleep ( 0.1 ) https://www.elektronik-kompendium.de/sites/raspberry-pi/2612031.htm Leuchtdioden Langes Bein: Anode https://nawi-werft.de/bausteine/led-ansteuern/ Ausgang verschalten links: LED an Masse GPIO auf high > LED an rechts: LED an VCC GPIO auf low > LED an https://www.elektronik-kompendium.de/sites/raspberry-pi/2102181.htm Ausgang verschalten W\u00e4hlen Sie einen geeigneten GPIO Schlie\u00dfen Sie die LED in Reihe an den GPIO und einen Widerstand an und verbinden Sie die andere Seite des Widerstands mit Ground ( \\(0V\\) ) Relais und Sch\u00fctze F\u00fcr viele Anwendungen ist die Leistung der GPIOs nicht ausreichend ( \\(P=UI=3.3V \\cdot 4mA = 13.2 mW\\) ) Eine h\u00f6here Spannung an den Ausg\u00e4ngen ist nicht m\u00f6glich (Sicherheit, Energieeffizienz, Bauform) Relais sind elektromagnetische Schalter, die eine hohe Leistung schalten k\u00f6nnen indem sie einen Schaltkontakt \u00f6ffnen oder schlie\u00dfen heute meist nicht mehr mechanisch sondern elektronisch realisiert Pulsweitenmodulation Digitale Ausg\u00e4nge k\u00f6nnen nur zwei Zust\u00e4nde annehmen (0 / False oder 1 : True ) Einige Verbraucher (z.B. Motoren, LEDs) kann man \u00fcber PWM quasi-analog steuern Hierzu muss man Periodendauer \\(T\\) und Duty Cycle \\(t\\) geeignet setzen https://www.elektronik-kompendium.de/sites/kom/0401111.htm :nerd_face: :writing_hand: Aufgabe 2_1_4: Anschluss einer LED mit PWM an einen Raspberry Pi Pico Sorgen Sie nun daf\u00fcr, dass die LED mit PWM angesteuert wird, so dass diese nach Bet\u00e4tigung des Tasters f\u00fcr \\(1\\,\\text{s}\\) leuchtet und dann langsam \u00fcber \\(5\\,\\text{s}\\) ausgeht import pwmio import board pwm = pwmio . PWMOut ( board . GP1 ) # output on LED pin with default of 500Hz while True : for cycle in range ( 0 , 65535 ): # Cycles through the full PWM range from 0 to 65535 pwm . duty_cycle = cycle # Cycles the LED pin duty cycle through the range of values for cycle in range ( 65534 , 0 , - 1 ): # Cycles through the PWM range backwards from 65534 to 0 pwm . duty_cycle = cycle # Cycles the LED pin duty cycle through the range of values Analoge Eing\u00e4nge Sensoren liefern meist analoge Signale (z.B. Spannung, Strom, Widerstand) z.B. basieren viele Temperatur-Sensoren auf dem Widerstand von Metallen Damit \u00e4nder sich bei gleichbleibender Spannung der Strom, welcher am Eingang gemessen werden kann Analog-Digital-Wandler Der Analog-Digital-Wandler (ADC) wandelt ein analoges Signal in eine digitale Zahl um Dabei gibt es zwei relevante Parameter Aufl\u00f6sung: Anzahl der m\u00f6glichen Werte Referenzspannung: Spannungsbereich, der in die Aufl\u00f6sung abgebildet wird z.B. 16 Bit Aufl\u00f6sung und \\(3.3 \\,\\text{V}\\) Referenzspannung \\(\\Rightarrow\\) \\(2^{16} = 65536\\) Werte zwischen \\(0\\) und \\(3.3 \\,\\text{V}\\) Zudem k\u00f6nnen sich Systeme in ihrer Abtastrate unterscheiden, d.h. wie oft Werte gelesen werden k\u00f6nnen :writing_hand: Aufgabe 2_1_4: Anschluss eines Analogen Helligkeitssensors Schlie\u00dfen Sie einen analogen Helligkeitssensor an den Raspberry Pi Pico an Links (-): GND / Masse / 0 Volt Mitte: +VCC z.B. 3,3 oder 5 Volt Rechts (S): Verbindungspunkt des Spannungsteilers Fixwiderstand \\(10 \\,\\text{k}\\Omega\\) zwischen +VCC und S Verdunkeln Sie und beleuchten Sie den Sensor und beobachten Sie die \u00c4nderung des Eingangswertes Zum Testen k\u00f6nnen Sie den Analog-Eingang mit \\(3.3 \\text{ Volt}\\) und \\(0 \\text{ Volt}\\) verbinden Lesen Sie den Wert des Sensors aus und geben Sie diesen auf der Konsole aus import board import analogio import time # Initialisierung des ADC (Analog-Digital Converter) ldr = analogio . AnalogIn ( board . A2 ) # Wiederholung while True : # ADC als Dezimalzahl lesen read = ldr . value # Ausgabe in der Kommandozeile/Shell print ( \"ADC:\" , read ) # Warten time . sleep ( 1 ) https://www.elektronik-kompendium.de/sites/raspberry-pi/2612221.htm Mapping von Eingangswert zu physikalischer Gr\u00f6\u00dfe Um sinnvoller mit den Werten arbeiten zu k\u00f6nnen, ist es sinnvoller die gelesen Werte read in eine Variable mit einer sinnvollen physikalischen Einheit zu \u00fcberf\u00fchren Im Fall dieses Sensors und Aufbaus lassen sich die Werte gut mit einer Parabel anpassen \\(E= f(x) = (a(x-s))^2\\) $a =0.0015 $ ist die Steigung der Parabel \\(s = 44000\\) ist der Verschiebung der Parabel auf der x-Achse \\(x\\) ist der Eingangswert \u00dcbliche Beleuchtungsst\u00e4rken \\(E\\) Umfeld \\(E \\text{ in lux}\\) Mondlose, klare Nacht 0,0003 Nachts bei Vollmond 0,2 Beleuchtete Strassen, Pl\u00e4tze 10..20 Abstellr\u00e4ume, Lagerr\u00e4ume 50 Lagerr\u00e4ume, Toiletten, Treppen 100 Speiser\u00e4ume, Werkhallen, 200 L\u00e4den, Sitzungszimmer 300 Arbeitspl\u00e4tze, Schulzimmer 500 erh\u00f6hte Anspr\u00fcche 750 Elektronikmontage, Uhrenmacher 1.000 Bedeckter Himmel im Winter 1.000.. 2.000 Bedeckter Himmel im Sommer 5.000..20.000 Sonnenlicht im Winter 10.000 Sonnenlicht im Sommer 100.000 Nachverarbeitung nach ADC Viele (teurere) Peripherie-Ger\u00e4te kommen als Transmitter (Kombination aus dem Sensor selbst und einem Messumformer) Diese linearisieren sie spannungs-(oder Strom) Ausgabe Eine Umrechnung der Spannungswerte an Eingang in die Physikalische Gr\u00f6\u00dfen muss jedoch weiterhin stattfinden Informationen hierzu finden sich meinst im Datenblatt https://shop.bb-sensors.com/Messtechnik-je-Branche/Gebaeudetechnik/Helligkeitssensor-mit-Messumformer-0-10-V.html :writing_hand: Aufgabe 2_1_5: Mapping eines Analogen Helligkeitssensors Oben ist die quadratische Funktion gegeben, die die gemessenen Werte in Beleuchtungsst\u00e4rke in Lux umrechnet Implementieren Sie diese Funktion in Python und geben Sie dann eine Nachricht mit der Beleuchtungsst\u00e4rke in Lux aus Orientieren Sie sich dabei an folgendem Code, der ein Beispiel f\u00fcr ein lineares Mapping zeigt Symbol Description \\(E_{max}\\) maximale Beleuchtungsst\u00e4rke \\(E_{min}\\) minimale Beleuchtungsst\u00e4rke \\(z_{max}\\) maximaler Messwert des ADC \\(z_{min}\\) minimaler Messwert des ADC Annahme: Linearer Zusammenhang \\(E = f(z) = \\beta_0 + \\beta_1 z\\) 1: Wie gro\u00df ist der Y-Achsenabschnitt \\(\\beta_0\\) ? Bei welchen Wert hat \\(E\\) , wenn \\(z=0\\) ? 2: Wie gro\u00df ist die Steigung \\(\\beta_1\\) ? Wie gro\u00df ist die \u00c4nderung von \\(E\\) pro \u00c4nderung von \\(z\\) ? \\(\\beta_1 = \\frac{E_{max} - E_{min}}{z_{max} - z_{min}}\\) Der folgende Code \u00fcbernimmt dein Eingangswert und gibt einen normalisierten Wert zwischen 1 und 0 zur\u00fcck Erstellen Sie in einer Datei mappings.py (im gleichen Ordner, wie die code.py ) eine Funktion map_quat() , die stattdessen die oben angegeben Formel implementiert def map_lin ( z ): E_max = 1 E_min = 0 z_max = 65535 z_min = 0 beta_0 = E_min beta_1 = ( E_max - E_min ) / ( z_max - z_min ) return beta_0 + beta_1 * z :nerd_face: Im besten Fall wird map_ln in einer eigenen Datei mappings.py gespeichert und kann dann mittels import mappings in anderen Programmen genutzt werden import board import analogio import time from mappings import map_lin # Initialisierung des ADC (Analog-Digital Converter) ldr = analogio . AnalogIn ( board . A2 ) # Wiederholung while True : # ADC als Dezimalzahl lesen read = ldr . value # Ausgabe in der Kommandozeile/Shell print ( \"ADC:\" , read ) print ( \"E in Lux\" , map_lin ( read )) # Warten time . sleep ( 1 ) :nerd_face: Verwendung von Globalen Variablen einige Variablen sind so grundlegend, dass wir Sie nicht im Code sondern zentral ver\u00e4ndern wollen Hierzu k\u00f6nnen wird Umgebungsvariablen in der settings.toml ver\u00e4ndern im Verzeichnis CIRCUITPY \u00e4ndern MY_NAME = \"Julian\" - Im Code k\u00f6nnen diese mittels os aufgerufen werden # connect to your SSID import os print ( os . getenv ( 'MY_NAME' )) Passen Sie den Code so an, dass die zur Umwandlung ben\u00f6tigten Werte als Umgebungsvariablen gesetzt werden k\u00f6nnen :nerd_face: :writing_hand: Aufgabe 2_1_6: Nicht bei jedem Sensor wird die gefittete Kurve perfekt passen passen Sie den Code so an, dass die Parameter der Kurve in der settings.toml hinterlegt werden k\u00f6nnen, um diese m\u00f6glichst einfach anzupassen Analoge Ausg\u00e4nge Entsprechend gibt es auch analoge Ausg\u00e4nge Diese k\u00f6nnen z.B. zur Ansteuerung von Motoren genutzt werden Dabei wird einer meist der Wert einer Integer-Variable im Speicher in einen Spannungswert umgewandelt","title":"Messkette"},{"location":"2_1_Messkette/#bussysteme","text":"SoSe 2023 Dr. Julian Huber","title":"Bussysteme"},{"location":"2_1_Messkette/#messkette","text":"","title":"Messkette"},{"location":"2_1_Messkette/#eva-prinzip","text":"Geb\u00e4udeautomation wird durch eine Steuerungseinheit \u00fcberwacht und gesteuert Hierzu werden Eingangssingale gemessen und Ausgangssignale erzeugt In der Steuerungseinheit werden Funktionen implementiert, die die Messsignale in Ausgangssignale umwandeln Steuerungseinheiten sind heute meist frei programmierbar (z.B. Speicherprogrammierbare Steuerung) oder wurden f\u00fcr bestimmte Funktionen vorprogrammiert (z.B. Mikrocontroller in LED-Vorschaltger\u00e4ten)","title":"EVA-Prinzip"},{"location":"2_1_Messkette/#digitale-eingange","text":"Digitale Eing\u00e4nge k\u00f6nnen nur zwei Zust\u00e4nde annehmen (0 / False oder 1 : True ) Die Zust\u00e4nde werden durch Spannungen repr\u00e4sentiert i.d.R. gibt es Spannungsbereiche, die als 0 oder 1 interpretiert werden","title":"Digitale Eing\u00e4nge"},{"location":"2_1_Messkette/#writing_hand-aufgabe-2_1_1-raspberry-pi-pico-als-mikrocontroller","text":"Beim Raspberry Pi Pico handelt es sich um einen Mikrocontroller, der mittels Python programmiert werden kann Im folgenden wird folgende Hardware ben\u00f6tigt: Raspberry Pi Pico Breadboard Taster Widerstand ca. \\(470 \\Omega\\) und \\(10 \\,\\text{k}\\Omega\\) Jumperkabel Ziel ist es, dass der Mikrocontroller den Taster ausliest und den Zustand auf der Konsole ausgibt","title":":writing_hand: Aufgabe 2_1_1: Raspberry Pi Pico als Mikrocontroller"},{"location":"2_1_Messkette/#circuitpython-installieren","text":"Halte den BOOTSEL Taster auf dem Pico gedr\u00fcckt und verbinde diesen \u00fcber USB mit dem Rechner Passende Firmware UF2-File herunterladen und in den als USB-Laufwerk erkannten Pico kopieren Pico sollte jetzt neue Starten und die Firmware installieren Nach dem erneuten Verbinden sollten nun einige Programme im Pico liegen","title":"CircuitPython installieren"},{"location":"2_1_Messkette/#programmieren-des-pico-mittels-circuitpython","text":"\u00d6ffenen Sie im Chrome Browser die Seite des Online Editors Verbinden Sie Sich mittels USB W\u00e4hlen Sie die Schnittstelle CircuitPython CDC Control aus \u00d6ffnen Sie das Verzeichnis (USB-Laufwerk) CIRCUITPY und w\u00e4hlen Sie USE / \u00d6ffnen Sie die Datei code.py und f\u00fcgen Sie den folgenden Inhalt ein \u00d6ffnen Sie die Serielle Schnittstellen, um die Ausgabe zu sehen Serial , \u00fcbertragen Sie den Code und starten Sie den Pico neu Save + Run","title":"Programmieren des Pico mittels CircuitPython"},{"location":"2_1_Messkette/#hauptprogramm-codepy","text":"Dieses Programm wird automatisch ausgef\u00fchrt und ist der Einsteigspunkt f\u00fcr alle Programme (vgl. MAIN bei TwinCat) Passen Sie das Hauptprogramm so an, dass die LED l\u00e4nger hell als dunkel ist Passen Sie die Ausgabe an indem Sie \"Sleep!\" ersetzen # Externe Bibliotheken laden import time # Bibliothek Zeit-Funktionen import digitalio # Bibliothek zur Steuerung von GPIOs import board # Bibliothek welches die Adressen der Pins kennt: z.B. board.LED # Ein- und Ausg\u00e4nge definieren led = digitalio . DigitalInOut ( board . LED ) # Die Variable LED wird mit dem GPIO der LED auf dem Board verbunden led . direction = digitalio . Direction . OUTPUT # Legt Richtung des PIN fest -> Output # Endlosschleife while True : led . value = True time . sleep ( 0.5 ) led . value = False time . sleep ( 0.5 ) print ( \"Sleep!\" )","title":"Hauptprogramm code.py"},{"location":"2_1_Messkette/#pin-ubersicht","text":"VCC Voltage Common Connector: Spannungs- Versorgung \\(5\\) oder \\(3.3 \\,\\text{V}\\) Alles unter \\(0,8\\,\\text{V}\\) ist low alles \u00fcber \\(1,3\\,\\text{V}\\) ist high Ground: \\(0 \\,\\text{V}\\) Einige GPIOs k\u00f6nnen als Busleitungen genutzt werden: UART, SPI, I2C","title":"Pin-\u00dcbersicht"},{"location":"2_1_Messkette/#httpswwwelektronik-kompendiumdesitesraspberry-pi2002191htm","text":"","title":"https://www.elektronik-kompendium.de/sites/raspberry-pi/2002191.htm"},{"location":"2_1_Messkette/#breadboards","text":"- Steckplatine f\u00fcr Systemtest und Prototyping - vier Reihen f\u00fcr Spannungsversorgung - weitere Raster sind l\u00e4ngs verbunden","title":"Breadboards"},{"location":"2_1_Messkette/#httpswwwelektronik-kompendiumdesitespraxisbauteil_steckbretthtm","text":"","title":"https://www.elektronik-kompendium.de/sites/praxis/bauteil_steckbrett.htm"},{"location":"2_1_Messkette/#general-purpose-inputoutput","text":"GPIO arbeiten von \\(2...16 \\,\\text{mA}\\) GPIOs k\u00f6nnen bin\u00e4r gelesen und geschaltet werden","title":"General Purpose Input/Output"},{"location":"2_1_Messkette/#writing_hand-aufgabe-2_1_1-anschluss-eines-tasters-an-einen-raspberry-pi-pico","text":"Schlie\u00dfen Sie den Taster wie folgt an \\(R_{pullup} = 10 \\,\\text{k}\\Omega\\) Verbinden Sie den Taster mit dem 3.3V Pin und dem GPIO 0 F\u00fcgen Sie die folgenden Code- Teile an den richtigen Stellen ein und starten Sie das Programm import time import board import digitalio button_pin = board . GP0 # Replace with the GPIO pin connected to your button button = digitalio . DigitalInOut ( button_pin ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP # Use pull-up resistor; change if using pull-down while True : if not button . value : # Button is pressed (LOW) print ( \"Button Pressed!\" ) else : print ( \"Button Released!\" ) time . sleep ( 0.1 ) # Add a small delay to debounce the button","title":":writing_hand: Aufgabe 2_1_1: Anschluss eines Tasters an einen Raspberry Pi Pico"},{"location":"2_1_Messkette/#gpio-eingang-mit-tasterschalter-und-pullup-widerstand","text":"Unbeschaltet oszillieren die GPIOs h\u00e4ufig unsauber zwischen den Zust\u00e4nden Grundzustand des Eingangs bei offenem Schalter: high Durch schlie\u00dfen: low \\(4{,}7~k\\Omega\\) als Standardwert (RaspBerry Pis haben eingebaute Widerst\u00e4nde, die aktiviert werden k\u00f6nnen)","title":"GPIO-Eingang mit Taster/Schalter und Pullup-Widerstand"},{"location":"2_1_Messkette/#httpswwwelektronik-kompendiumdesitesraspberry-pi2110081htm-httpswwwelektronik-kompendiumdesitesraspberry-pi2006051htm","text":"","title":"https://www.elektronik-kompendium.de/sites/raspberry-pi/2110081.htm, https://www.elektronik-kompendium.de/sites/raspberry-pi/2006051.htm"},{"location":"2_1_Messkette/#gpio-eingang-mit-tasterschalter-und-pulldown-widerstand","text":"Grundzustand des Eingangs: low Durch schlie\u00dfen: high der Regel \\(10~k\\Omega\\)","title":"GPIO-Eingang mit Taster/Schalter und Pulldown-Widerstand"},{"location":"2_1_Messkette/#zusammenfassung-schalter-und-taster","text":"In der Praxis tendiert man dazu, GPIO-Eing\u00e4nge mit einem Pullup-Widerstand mit +VCC zu verbinden und gegen Ground (GND) zu schalten Erfordert Negation in der Software Werte von \\(10\\) bis \\(100~k\\Omega\\) GPIO-Eingang mit Taster/Schalter und Querwiderstand Mehr zu Pull-Up vs Pull-Down","title":"Zusammenfassung Schalter und Taster"},{"location":"2_1_Messkette/#digitale-ausgange","text":"Ausg\u00e4nge k\u00f6nnen mit einer Spannung beschaltet werden Bei einem Raspberry Pi Pico sind die Ausg\u00e4nge auf \\(3.3 \\,\\text{V}\\) begrenzt Die Ausg\u00e4nge k\u00f6nnen bis zu \\(16 \\,\\text{mA}\\) liefern","title":"Digitale Ausg\u00e4nge"},{"location":"2_1_Messkette/#writing_hand-aufgabe-2_1_3-anschluss-einer-led-an-einen-raspberry-pi-pico","text":"Nun wollen wir eine LED anschlie\u00dfen in der Folge \u00fcber den Taster schalten Sie LED soll nach einem Druck auf den Taster f\u00fcr \\(1\\,\\text{s}\\) leuchten passen Sie den Code entsprechend an und nutzen Sie dazu die folgenden Code-Teile import time import board import digitalio led_pin = board . GP1 # Replace with the GPIO pin connected to your LED led = digitalio . DigitalInOut ( led_pin ) led . direction = digitalio . Direction . OUTPUT while True : led . value = not led . value # Toggle the LED state time . sleep ( 0.2 ) # Add a small delay for debouncing time . sleep ( 0.1 )","title":":writing_hand: Aufgabe 2_1_3: Anschluss einer LED an einen Raspberry Pi Pico"},{"location":"2_1_Messkette/#httpswwwelektronik-kompendiumdesitesraspberry-pi2612031htm","text":"","title":"https://www.elektronik-kompendium.de/sites/raspberry-pi/2612031.htm"},{"location":"2_1_Messkette/#leuchtdioden","text":"Langes Bein: Anode","title":"Leuchtdioden"},{"location":"2_1_Messkette/#httpsnawi-werftdebausteineled-ansteuern","text":"","title":"https://nawi-werft.de/bausteine/led-ansteuern/"},{"location":"2_1_Messkette/#ausgang-verschalten","text":"links: LED an Masse GPIO auf high > LED an rechts: LED an VCC GPIO auf low > LED an","title":"Ausgang verschalten"},{"location":"2_1_Messkette/#httpswwwelektronik-kompendiumdesitesraspberry-pi2102181htm","text":"","title":"https://www.elektronik-kompendium.de/sites/raspberry-pi/2102181.htm"},{"location":"2_1_Messkette/#ausgang-verschalten_1","text":"W\u00e4hlen Sie einen geeigneten GPIO Schlie\u00dfen Sie die LED in Reihe an den GPIO und einen Widerstand an und verbinden Sie die andere Seite des Widerstands mit Ground ( \\(0V\\) )","title":"Ausgang verschalten"},{"location":"2_1_Messkette/#relais-und-schutze","text":"F\u00fcr viele Anwendungen ist die Leistung der GPIOs nicht ausreichend ( \\(P=UI=3.3V \\cdot 4mA = 13.2 mW\\) ) Eine h\u00f6here Spannung an den Ausg\u00e4ngen ist nicht m\u00f6glich (Sicherheit, Energieeffizienz, Bauform) Relais sind elektromagnetische Schalter, die eine hohe Leistung schalten k\u00f6nnen indem sie einen Schaltkontakt \u00f6ffnen oder schlie\u00dfen heute meist nicht mehr mechanisch sondern elektronisch realisiert","title":"Relais und Sch\u00fctze"},{"location":"2_1_Messkette/#pulsweitenmodulation","text":"Digitale Ausg\u00e4nge k\u00f6nnen nur zwei Zust\u00e4nde annehmen (0 / False oder 1 : True ) Einige Verbraucher (z.B. Motoren, LEDs) kann man \u00fcber PWM quasi-analog steuern Hierzu muss man Periodendauer \\(T\\) und Duty Cycle \\(t\\) geeignet setzen","title":"Pulsweitenmodulation"},{"location":"2_1_Messkette/#httpswwwelektronik-kompendiumdesiteskom0401111htm","text":"","title":"https://www.elektronik-kompendium.de/sites/kom/0401111.htm"},{"location":"2_1_Messkette/#nerd_face-writing_hand-aufgabe-2_1_4-anschluss-einer-led-mit-pwm-an-einen-raspberry-pi-pico","text":"Sorgen Sie nun daf\u00fcr, dass die LED mit PWM angesteuert wird, so dass diese nach Bet\u00e4tigung des Tasters f\u00fcr \\(1\\,\\text{s}\\) leuchtet und dann langsam \u00fcber \\(5\\,\\text{s}\\) ausgeht import pwmio import board pwm = pwmio . PWMOut ( board . GP1 ) # output on LED pin with default of 500Hz while True : for cycle in range ( 0 , 65535 ): # Cycles through the full PWM range from 0 to 65535 pwm . duty_cycle = cycle # Cycles the LED pin duty cycle through the range of values for cycle in range ( 65534 , 0 , - 1 ): # Cycles through the PWM range backwards from 65534 to 0 pwm . duty_cycle = cycle # Cycles the LED pin duty cycle through the range of values","title":":nerd_face: :writing_hand: Aufgabe 2_1_4: Anschluss einer LED mit PWM an einen Raspberry Pi Pico"},{"location":"2_1_Messkette/#analoge-eingange","text":"Sensoren liefern meist analoge Signale (z.B. Spannung, Strom, Widerstand) z.B. basieren viele Temperatur-Sensoren auf dem Widerstand von Metallen Damit \u00e4nder sich bei gleichbleibender Spannung der Strom, welcher am Eingang gemessen werden kann","title":"Analoge Eing\u00e4nge"},{"location":"2_1_Messkette/#analog-digital-wandler","text":"Der Analog-Digital-Wandler (ADC) wandelt ein analoges Signal in eine digitale Zahl um Dabei gibt es zwei relevante Parameter Aufl\u00f6sung: Anzahl der m\u00f6glichen Werte Referenzspannung: Spannungsbereich, der in die Aufl\u00f6sung abgebildet wird z.B. 16 Bit Aufl\u00f6sung und \\(3.3 \\,\\text{V}\\) Referenzspannung \\(\\Rightarrow\\) \\(2^{16} = 65536\\) Werte zwischen \\(0\\) und \\(3.3 \\,\\text{V}\\) Zudem k\u00f6nnen sich Systeme in ihrer Abtastrate unterscheiden, d.h. wie oft Werte gelesen werden k\u00f6nnen","title":"Analog-Digital-Wandler"},{"location":"2_1_Messkette/#writing_hand-aufgabe-2_1_4-anschluss-eines-analogen-helligkeitssensors","text":"Schlie\u00dfen Sie einen analogen Helligkeitssensor an den Raspberry Pi Pico an Links (-): GND / Masse / 0 Volt Mitte: +VCC z.B. 3,3 oder 5 Volt Rechts (S): Verbindungspunkt des Spannungsteilers Fixwiderstand \\(10 \\,\\text{k}\\Omega\\) zwischen +VCC und S Verdunkeln Sie und beleuchten Sie den Sensor und beobachten Sie die \u00c4nderung des Eingangswertes Zum Testen k\u00f6nnen Sie den Analog-Eingang mit \\(3.3 \\text{ Volt}\\) und \\(0 \\text{ Volt}\\) verbinden Lesen Sie den Wert des Sensors aus und geben Sie diesen auf der Konsole aus import board import analogio import time # Initialisierung des ADC (Analog-Digital Converter) ldr = analogio . AnalogIn ( board . A2 ) # Wiederholung while True : # ADC als Dezimalzahl lesen read = ldr . value # Ausgabe in der Kommandozeile/Shell print ( \"ADC:\" , read ) # Warten time . sleep ( 1 )","title":":writing_hand: Aufgabe 2_1_4: Anschluss eines Analogen Helligkeitssensors"},{"location":"2_1_Messkette/#httpswwwelektronik-kompendiumdesitesraspberry-pi2612221htm","text":"","title":"https://www.elektronik-kompendium.de/sites/raspberry-pi/2612221.htm"},{"location":"2_1_Messkette/#mapping-von-eingangswert-zu-physikalischer-groe","text":"Um sinnvoller mit den Werten arbeiten zu k\u00f6nnen, ist es sinnvoller die gelesen Werte read in eine Variable mit einer sinnvollen physikalischen Einheit zu \u00fcberf\u00fchren Im Fall dieses Sensors und Aufbaus lassen sich die Werte gut mit einer Parabel anpassen \\(E= f(x) = (a(x-s))^2\\) $a =0.0015 $ ist die Steigung der Parabel \\(s = 44000\\) ist der Verschiebung der Parabel auf der x-Achse \\(x\\) ist der Eingangswert","title":"Mapping von Eingangswert zu physikalischer Gr\u00f6\u00dfe"},{"location":"2_1_Messkette/#ubliche-beleuchtungsstarken-e","text":"Umfeld \\(E \\text{ in lux}\\) Mondlose, klare Nacht 0,0003 Nachts bei Vollmond 0,2 Beleuchtete Strassen, Pl\u00e4tze 10..20 Abstellr\u00e4ume, Lagerr\u00e4ume 50 Lagerr\u00e4ume, Toiletten, Treppen 100 Speiser\u00e4ume, Werkhallen, 200 L\u00e4den, Sitzungszimmer 300 Arbeitspl\u00e4tze, Schulzimmer 500 erh\u00f6hte Anspr\u00fcche 750 Elektronikmontage, Uhrenmacher 1.000 Bedeckter Himmel im Winter 1.000.. 2.000 Bedeckter Himmel im Sommer 5.000..20.000 Sonnenlicht im Winter 10.000 Sonnenlicht im Sommer 100.000","title":"\u00dcbliche Beleuchtungsst\u00e4rken \\(E\\)"},{"location":"2_1_Messkette/#nachverarbeitung-nach-adc","text":"Viele (teurere) Peripherie-Ger\u00e4te kommen als Transmitter (Kombination aus dem Sensor selbst und einem Messumformer) Diese linearisieren sie spannungs-(oder Strom) Ausgabe Eine Umrechnung der Spannungswerte an Eingang in die Physikalische Gr\u00f6\u00dfen muss jedoch weiterhin stattfinden Informationen hierzu finden sich meinst im Datenblatt","title":"Nachverarbeitung nach ADC"},{"location":"2_1_Messkette/#httpsshopbb-sensorscommesstechnik-je-branchegebaeudetechnikhelligkeitssensor-mit-messumformer-0-10-vhtml","text":"","title":"https://shop.bb-sensors.com/Messtechnik-je-Branche/Gebaeudetechnik/Helligkeitssensor-mit-Messumformer-0-10-V.html"},{"location":"2_1_Messkette/#writing_hand-aufgabe-2_1_5-mapping-eines-analogen-helligkeitssensors","text":"Oben ist die quadratische Funktion gegeben, die die gemessenen Werte in Beleuchtungsst\u00e4rke in Lux umrechnet Implementieren Sie diese Funktion in Python und geben Sie dann eine Nachricht mit der Beleuchtungsst\u00e4rke in Lux aus Orientieren Sie sich dabei an folgendem Code, der ein Beispiel f\u00fcr ein lineares Mapping zeigt Symbol Description \\(E_{max}\\) maximale Beleuchtungsst\u00e4rke \\(E_{min}\\) minimale Beleuchtungsst\u00e4rke \\(z_{max}\\) maximaler Messwert des ADC \\(z_{min}\\) minimaler Messwert des ADC Annahme: Linearer Zusammenhang \\(E = f(z) = \\beta_0 + \\beta_1 z\\) 1: Wie gro\u00df ist der Y-Achsenabschnitt \\(\\beta_0\\) ? Bei welchen Wert hat \\(E\\) , wenn \\(z=0\\) ? 2: Wie gro\u00df ist die Steigung \\(\\beta_1\\) ? Wie gro\u00df ist die \u00c4nderung von \\(E\\) pro \u00c4nderung von \\(z\\) ? \\(\\beta_1 = \\frac{E_{max} - E_{min}}{z_{max} - z_{min}}\\) Der folgende Code \u00fcbernimmt dein Eingangswert und gibt einen normalisierten Wert zwischen 1 und 0 zur\u00fcck Erstellen Sie in einer Datei mappings.py (im gleichen Ordner, wie die code.py ) eine Funktion map_quat() , die stattdessen die oben angegeben Formel implementiert def map_lin ( z ): E_max = 1 E_min = 0 z_max = 65535 z_min = 0 beta_0 = E_min beta_1 = ( E_max - E_min ) / ( z_max - z_min ) return beta_0 + beta_1 * z :nerd_face: Im besten Fall wird map_ln in einer eigenen Datei mappings.py gespeichert und kann dann mittels import mappings in anderen Programmen genutzt werden import board import analogio import time from mappings import map_lin # Initialisierung des ADC (Analog-Digital Converter) ldr = analogio . AnalogIn ( board . A2 ) # Wiederholung while True : # ADC als Dezimalzahl lesen read = ldr . value # Ausgabe in der Kommandozeile/Shell print ( \"ADC:\" , read ) print ( \"E in Lux\" , map_lin ( read )) # Warten time . sleep ( 1 )","title":":writing_hand: Aufgabe 2_1_5: Mapping eines Analogen Helligkeitssensors"},{"location":"2_1_Messkette/#nerd_face-verwendung-von-globalen-variablen","text":"einige Variablen sind so grundlegend, dass wir Sie nicht im Code sondern zentral ver\u00e4ndern wollen Hierzu k\u00f6nnen wird Umgebungsvariablen in der settings.toml ver\u00e4ndern im Verzeichnis CIRCUITPY \u00e4ndern MY_NAME = \"Julian\" - Im Code k\u00f6nnen diese mittels os aufgerufen werden # connect to your SSID import os print ( os . getenv ( 'MY_NAME' )) Passen Sie den Code so an, dass die zur Umwandlung ben\u00f6tigten Werte als Umgebungsvariablen gesetzt werden k\u00f6nnen","title":":nerd_face: Verwendung von Globalen Variablen"},{"location":"2_1_Messkette/#nerd_face-writing_hand-aufgabe-2_1_6","text":"Nicht bei jedem Sensor wird die gefittete Kurve perfekt passen passen Sie den Code so an, dass die Parameter der Kurve in der settings.toml hinterlegt werden k\u00f6nnen, um diese m\u00f6glichst einfach anzupassen","title":":nerd_face: :writing_hand: Aufgabe 2_1_6:"},{"location":"2_1_Messkette/#analoge-ausgange","text":"Entsprechend gibt es auch analoge Ausg\u00e4nge Diese k\u00f6nnen z.B. zur Ansteuerung von Motoren genutzt werden Dabei wird einer meist der Wert einer Integer-Variable im Speicher in einen Spannungswert umgewandelt","title":"Analoge Ausg\u00e4nge"},{"location":"2_2_Steuerung/","text":"Bussysteme SoSe 2023 Dr. Julian Huber Steuerung Urspr\u00fcnge der Steuerungstechnik und Automatisierung 20\u201362 - Heron von Alexandria Automaten einer Wein und Milch spendenden Bacchus-Figur 1784 Webmaschinen von h\u00f6lzernen Lochkarten 1835 erfindet Joseph Henry das elektromechanische Relais 1969 Odo J. Struger beim US-Unternehmen Allen-Bradley eine SPS (zeitgleich mit Richard E. Morley) \ud83e\udde0 Evolution zu Industrie 4.0 Industrie 1.0 (1784): Einsatz von mechanischen Webst\u00fchlen, die insbesondere durch Lochkarten-Steuerungen und sp\u00e4ter durch umlaufenden B\u00e4nder zu Webmaschinen weiterentwickelt wurden. Industrie 2.0 (1870): erster Einsatz von Flie\u00dfb\u00e4ndern in den USA (Schlachth\u00f6fe) unter Nutzung elektrischer Antriebe, die durch entsprechende Sch\u00fctz- und Relais-Steuerungen geschaltet wurden. Industrie 3.0 (1969) Speicherprogrammierbaren Steuerungen , Durchbruch bei der Industrieelektronik und Informationstechnik zur massenweisen Steuerung und Automatisierung der Produktion Industrie 4.0 (2012) Cyber-Physikalischer Systeme mit globaler Vernetzung zur global optimierten Steuerung der international organisierten Produktion ( Internet der Dinge ). Ablaufsteuerung steuert den Ablauf ereignisdiskreter Prozesse (Schrittkette). Beim Erreichen eines Schwellwertes einer Steuergr\u00f6\u00dfe (Ereignis) wir ein weiterer Prozess angesto\u00dfen. z.B. Ablauf in einer Waschmaschine z.B. Human Centric Lighting z.B. Treppenhauslicht Beispiel Treppenlichtschaltung \u00dcber die Funktion Treppenlichtschaltung k\u00f6nnen Beleuchtungseinrichtungen tempor\u00e4r eingeschaltet werden. Nach Ablauf der Treppenlichthaltezeit kann eine Abschaltvorwarnzeit aktiv werden, die den Nutzer z. B. durch kurzzeitige Unterbrechung(\u201eFlackern\u201c) \u00fcber die bevorstehende Abschaltung informiert. Ein erneuter Empfang einer Eingabeinformation zum Einschalten startet die Verz\u00f6gerungszeit neu. Die Funktion ben\u00f6tigt als Eingabeinformation das Ergebnis der Bedienfunktion Licht stellen und liefert ihrerseits die Ausgabeinformation f\u00fcr eine oder mehrere Aktorfunktionen Lichtaktor. Naive L\u00f6sung import time import board import digitalio PAR_HOLD = 3 PAR_WARN = 1 button_pin = board . GP0 # Replace with the GPIO pin connected to your button button = digitalio . DigitalInOut ( button_pin ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP # Use pull-up resistor; change if using pull-down led_pin = board . GP1 # Replace with the GPIO pin connected to your LED led = digitalio . DigitalInOut ( led_pin ) led . direction = digitalio . Direction . OUTPUT while True : if not ( button . value ): # Button is pressed (LOW) print ( \"Button Pressed!\" ) led . value = True time . sleep ( PAR_HOLD ) # Add a small delay to debounce the button for i in range ( 1 , 5 ): led . value = False time . sleep ( 0.1 ) led . value = True time . sleep ( 0.1 ) time . sleep ( PAR_WARN ) led . value = False Probleme mit der naiven L\u00f6sung Erneutes bet\u00e4tigen des Taster setzt die Wartezeit nicht zur\u00fcck Unser System hat kein Ged\u00e4chtnis (Zustands) Der Ablauf sollte besser nicht nur durch einen Zeitlichen Rahmen, sondern auch durch Zust\u00e4nde gesteuert werden stateDiagram A : LED ein B : LED flackert E : LED aus [*] --> E : Systemstart E --> A : L_MAN B --> A : L_MAN A --> B : PAR_HOLD B --> E : PAR_WARN Finite State Machine (Endlicher Automat) In Abh\u00e4ngigkeit vom Systemzustand erwarten wir unterschiedliches Verhalten z.B. Nach Tastendruck soll die Lampe angeschaltet werden Nach Ablauf einer Wartezeit soll die Lampe ausgeschaltet werden Davor gibt es ein Flackern als Warnung Nach einem weiteren Tastendruck wird die Wartezeit zur\u00fcckgesetzt Einfache Systeme lassen sich meist durch Ihre Zust\u00e4nde und deren \u00dcberg\u00e4nge beschreiben Durch die Beschreibung als State-Machine k\u00f6nnen wir das Verhalten des Systems sauber trennen und die Implementierung vereinfachen Implementierung eines Cola-Automaten Der Automat startet im Zustand Auswahl anfordern Der Automat kann in den Zustand Bezahlung anfordern wechseln Wird die geforderte Summe erreicht, wechselt der Automat in den Zustand Ware ausgeben Ist die Ausgabe abgeschlossen, wechselt der Automat wieder in den Zustand Auswahl anfordern Wird die Bezahlung abgebrochen, wechselt der Automat in den Zustand R\u00fcckgeld herausgeben und dann wieder in den Zustand Auswahl anfordern (Deterministic) Finite State Machine (Endlicher Automat) Dieser Ansatz basiert auf der Theorie der formalen Sprachen Eine DFSM beschreibt ein System mit endlich vielen Zust\u00e4nden beschreibt Eine DFSM ist ein 5-Tupel \\(M = (Q, \\Sigma, q_0, F, \\delta)\\) mit Endlicher Zustandsmenge \\(Q\\) Endliche Eingabealphabet \\(\\Sigma\\) Endlicher Startzustand \\(q_0 \\in Q\\) Endlicher Endzustandsmenge \\(F \\subseteq Q\\) \u00dcbergangsfunktion \\(\\delta: Q \\times \\Sigma \\rightarrow Q\\) In der Theorie der formalen Sprachen :nerd_face: * \\(Q = \\{S_1, S_2\\}\\) * \\(\\Sigma = \\{0,1\\}\\) * \\(q_0 = S_1\\) * \\(F = \\{S_1\\}\\) * \\(\\delta(S_1, 0) = S_2\\) , \\(\\delta(S_1, 1) = S_1\\) * \\(\\delta(S_2, 0) = S_1\\) , \\(\\delta(S_2, 1) = S_2\\) * Akzeptiert (endet in \\(F\\) ) * 1 , 11 , 01101 , 11001 * Akzeptiert nicht (endet nicht in \\(F\\) ) * 0 , 10 , 10100 , 01001 * Anwendung * Parser * Regular Expressions In der Programmierpraxis Die Knoten stellen Systemzust\u00e4nde dar. Innerhalb dieser Zust\u00e4nde muss das Systemen nicht statisch sein (z.B. Zeit muss z.B. mitgez\u00e4hlt werden) Die gerichteten Kanten stellen \u00dcberg\u00e4nge zwischen den Zust\u00e4nden dar, die durch Events und Bedingungen ausgel\u00f6st werden Die Systemzust\u00e4nde k\u00f6nnen nur in festgelegten Reihenfolgen durchlaufen werden Ein Endzustand ist optional :writing_hand: Aufgabe 2_2_2: Implementierung eines Treppenhauslichts In Aufgaben\\2_2_2\\code_state_machine.py ist das auf der rechten Seite dargestellte Programm implementiert Beschreiben Sie verbal, was in jedem der Zust\u00e4nde passiert Ber\u00fccksichtigen Sie dabei im Besonderen, warum es die beiden Zust\u00e4nde LED leuchtet und LED flackert gibt und diese nicht in einem Zusammengefasst wurden stateDiagram A : Start C: LED an D: LED leuchtet E: LED leuchtet2 F: LED flackert G : LED aus [*] --> A : Systemstart A --> C : Taster wird gedr\u00fcckt C --> D : D --> F : PAR_HOLD vergeht E --> G : PAR_WARN vergeht F --> E: D --> C: Taster wird gedr\u00fcckt E --> C: Taster wird gedr\u00fcckt G --> C: Taster wird gedr\u00fcckt :writing_hand: Aufgabe 3_1_2: State Machine f\u00fcr einen Dimmschalter Stellen Sie einen Dimmer vor, der durch halten des Tasters die Helligkeit einer LED \u00fcber die PWM steuert Durch halten des Tasters soll die Helligkeit von 0% auf 100% hoch- bzw. heruntergefahren werden Durch Loslassen wir die Richung umgekehrt Durch ein kurzes dr\u00fccken des Tasters soll die Helligkeit auf 0% bzw. 100% gesetzt werden Zeichen Sie eine State Machine, die dieses Verhalten beschreibt stateDiagram A : 100% B : 0% C : aufw\u00e4rts D : abw\u00e4rts A --> B: kurzer Druck B --> A: kurzer Druck A --> D: langer Druck B --> C: langer Druck C --> D: loslassen D --> C: loslassen :nerd_face: :writing_hand: Aufgabe 3_3_3: Implementierung eines Dimmschalter Implementieren Sie einen Dimmer Verkn\u00fcpfungssteuerungen W\u00e4hrend Ablaufsteuerungen den Ablauf eines Prozesses steuern, verkn\u00fcpfen Verkn\u00fcpfungssteuerungen die Eingangssignale mit den Ausgangssignalen Diese Trennung ist jedoch eher akademisch, da die meisten Systeme sowohl Ablauf- als auch Verkn\u00fcpfungssteuerungen enthalten Beispiel: Wechselschalter Verkn\u00fcpfungssteuerungen k\u00f6nnen z.B. durch Wahreheitstabellen und Boolsche Funktionen beschrieben werden Sp\u00e4ter werden wir hierzu noch grafische Beschreibungen kennenlernen (Funktionsplan, Kontaktplan, ...) Wahrheitstabelle Schalter 1 Schalter 2 Lampe 0 0 0 0 1 1 1 0 1 1 1 0 Boolsche Funktion \\(L = (S_1 \\land \\lnot S_2) \\lor (\\lnot S_1 \\land S_2)\\) :writing_hand: Aufgabe 3_1_2: Implementierung einer vereinfachten Tageslichtschaltung Wir vereinfachen die Tagelichtschaltung, indem wir die Zeitparameter weglassen Zeichen Sie zun\u00e4chst eine Wahrheitstabelle f\u00fcr die Tageslichtschaltung P_ACT H_ROOM < PAR_SETPT L_MAN L_SET 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 1 1 0 1 0 1 0 0 1 1 0 1 0 0 1 1 1 0 1 1 0 0 1 1 1 0 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 \\[L_{\\text{SET}} = (P_{\\text{ACT}} \\land (H_{\\text{ROOM}} < \\text{PAR}_{\\text{SETPT}})) \\lor L_{\\text{MAN}})\\]","title":"Steuerung"},{"location":"2_2_Steuerung/#bussysteme","text":"SoSe 2023 Dr. Julian Huber","title":"Bussysteme"},{"location":"2_2_Steuerung/#steuerung","text":"","title":"Steuerung"},{"location":"2_2_Steuerung/#ursprunge-der-steuerungstechnik-und-automatisierung","text":"20\u201362 - Heron von Alexandria Automaten einer Wein und Milch spendenden Bacchus-Figur 1784 Webmaschinen von h\u00f6lzernen Lochkarten 1835 erfindet Joseph Henry das elektromechanische Relais 1969 Odo J. Struger beim US-Unternehmen Allen-Bradley eine SPS (zeitgleich mit Richard E. Morley)","title":"Urspr\u00fcnge der Steuerungstechnik und Automatisierung"},{"location":"2_2_Steuerung/#evolution-zu-industrie-40","text":"Industrie 1.0 (1784): Einsatz von mechanischen Webst\u00fchlen, die insbesondere durch Lochkarten-Steuerungen und sp\u00e4ter durch umlaufenden B\u00e4nder zu Webmaschinen weiterentwickelt wurden. Industrie 2.0 (1870): erster Einsatz von Flie\u00dfb\u00e4ndern in den USA (Schlachth\u00f6fe) unter Nutzung elektrischer Antriebe, die durch entsprechende Sch\u00fctz- und Relais-Steuerungen geschaltet wurden. Industrie 3.0 (1969) Speicherprogrammierbaren Steuerungen , Durchbruch bei der Industrieelektronik und Informationstechnik zur massenweisen Steuerung und Automatisierung der Produktion Industrie 4.0 (2012) Cyber-Physikalischer Systeme mit globaler Vernetzung zur global optimierten Steuerung der international organisierten Produktion ( Internet der Dinge ).","title":"\ud83e\udde0 Evolution zu Industrie 4.0"},{"location":"2_2_Steuerung/#ablaufsteuerung","text":"steuert den Ablauf ereignisdiskreter Prozesse (Schrittkette). Beim Erreichen eines Schwellwertes einer Steuergr\u00f6\u00dfe (Ereignis) wir ein weiterer Prozess angesto\u00dfen. z.B. Ablauf in einer Waschmaschine z.B. Human Centric Lighting z.B. Treppenhauslicht","title":"Ablaufsteuerung"},{"location":"2_2_Steuerung/#beispiel-treppenlichtschaltung","text":"\u00dcber die Funktion Treppenlichtschaltung k\u00f6nnen Beleuchtungseinrichtungen tempor\u00e4r eingeschaltet werden. Nach Ablauf der Treppenlichthaltezeit kann eine Abschaltvorwarnzeit aktiv werden, die den Nutzer z. B. durch kurzzeitige Unterbrechung(\u201eFlackern\u201c) \u00fcber die bevorstehende Abschaltung informiert. Ein erneuter Empfang einer Eingabeinformation zum Einschalten startet die Verz\u00f6gerungszeit neu. Die Funktion ben\u00f6tigt als Eingabeinformation das Ergebnis der Bedienfunktion Licht stellen und liefert ihrerseits die Ausgabeinformation f\u00fcr eine oder mehrere Aktorfunktionen Lichtaktor.","title":"Beispiel Treppenlichtschaltung"},{"location":"2_2_Steuerung/#naive-losung","text":"import time import board import digitalio PAR_HOLD = 3 PAR_WARN = 1 button_pin = board . GP0 # Replace with the GPIO pin connected to your button button = digitalio . DigitalInOut ( button_pin ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP # Use pull-up resistor; change if using pull-down led_pin = board . GP1 # Replace with the GPIO pin connected to your LED led = digitalio . DigitalInOut ( led_pin ) led . direction = digitalio . Direction . OUTPUT while True : if not ( button . value ): # Button is pressed (LOW) print ( \"Button Pressed!\" ) led . value = True time . sleep ( PAR_HOLD ) # Add a small delay to debounce the button for i in range ( 1 , 5 ): led . value = False time . sleep ( 0.1 ) led . value = True time . sleep ( 0.1 ) time . sleep ( PAR_WARN ) led . value = False","title":"Naive L\u00f6sung"},{"location":"2_2_Steuerung/#probleme-mit-der-naiven-losung","text":"Erneutes bet\u00e4tigen des Taster setzt die Wartezeit nicht zur\u00fcck Unser System hat kein Ged\u00e4chtnis (Zustands) Der Ablauf sollte besser nicht nur durch einen Zeitlichen Rahmen, sondern auch durch Zust\u00e4nde gesteuert werden stateDiagram A : LED ein B : LED flackert E : LED aus [*] --> E : Systemstart E --> A : L_MAN B --> A : L_MAN A --> B : PAR_HOLD B --> E : PAR_WARN","title":"Probleme mit der naiven L\u00f6sung"},{"location":"2_2_Steuerung/#finite-state-machine-endlicher-automat","text":"In Abh\u00e4ngigkeit vom Systemzustand erwarten wir unterschiedliches Verhalten z.B. Nach Tastendruck soll die Lampe angeschaltet werden Nach Ablauf einer Wartezeit soll die Lampe ausgeschaltet werden Davor gibt es ein Flackern als Warnung Nach einem weiteren Tastendruck wird die Wartezeit zur\u00fcckgesetzt Einfache Systeme lassen sich meist durch Ihre Zust\u00e4nde und deren \u00dcberg\u00e4nge beschreiben Durch die Beschreibung als State-Machine k\u00f6nnen wir das Verhalten des Systems sauber trennen und die Implementierung vereinfachen","title":"Finite State Machine (Endlicher Automat)"},{"location":"2_2_Steuerung/#implementierung-eines-cola-automaten","text":"Der Automat startet im Zustand Auswahl anfordern Der Automat kann in den Zustand Bezahlung anfordern wechseln Wird die geforderte Summe erreicht, wechselt der Automat in den Zustand Ware ausgeben Ist die Ausgabe abgeschlossen, wechselt der Automat wieder in den Zustand Auswahl anfordern Wird die Bezahlung abgebrochen, wechselt der Automat in den Zustand R\u00fcckgeld herausgeben und dann wieder in den Zustand Auswahl anfordern","title":"Implementierung eines Cola-Automaten"},{"location":"2_2_Steuerung/#deterministic-finite-state-machine-endlicher-automat","text":"Dieser Ansatz basiert auf der Theorie der formalen Sprachen Eine DFSM beschreibt ein System mit endlich vielen Zust\u00e4nden beschreibt Eine DFSM ist ein 5-Tupel \\(M = (Q, \\Sigma, q_0, F, \\delta)\\) mit Endlicher Zustandsmenge \\(Q\\) Endliche Eingabealphabet \\(\\Sigma\\) Endlicher Startzustand \\(q_0 \\in Q\\) Endlicher Endzustandsmenge \\(F \\subseteq Q\\) \u00dcbergangsfunktion \\(\\delta: Q \\times \\Sigma \\rightarrow Q\\)","title":"(Deterministic) Finite State Machine (Endlicher Automat)"},{"location":"2_2_Steuerung/#in-der-theorie-der-formalen-sprachen-nerd_face","text":"* \\(Q = \\{S_1, S_2\\}\\) * \\(\\Sigma = \\{0,1\\}\\) * \\(q_0 = S_1\\) * \\(F = \\{S_1\\}\\) * \\(\\delta(S_1, 0) = S_2\\) , \\(\\delta(S_1, 1) = S_1\\) * \\(\\delta(S_2, 0) = S_1\\) , \\(\\delta(S_2, 1) = S_2\\) * Akzeptiert (endet in \\(F\\) ) * 1 , 11 , 01101 , 11001 * Akzeptiert nicht (endet nicht in \\(F\\) ) * 0 , 10 , 10100 , 01001 * Anwendung * Parser * Regular Expressions","title":"In der Theorie der formalen Sprachen :nerd_face:"},{"location":"2_2_Steuerung/#in-der-programmierpraxis","text":"Die Knoten stellen Systemzust\u00e4nde dar. Innerhalb dieser Zust\u00e4nde muss das Systemen nicht statisch sein (z.B. Zeit muss z.B. mitgez\u00e4hlt werden) Die gerichteten Kanten stellen \u00dcberg\u00e4nge zwischen den Zust\u00e4nden dar, die durch Events und Bedingungen ausgel\u00f6st werden Die Systemzust\u00e4nde k\u00f6nnen nur in festgelegten Reihenfolgen durchlaufen werden Ein Endzustand ist optional","title":"In der Programmierpraxis"},{"location":"2_2_Steuerung/#writing_hand-aufgabe-2_2_2-implementierung-eines-treppenhauslichts","text":"In Aufgaben\\2_2_2\\code_state_machine.py ist das auf der rechten Seite dargestellte Programm implementiert Beschreiben Sie verbal, was in jedem der Zust\u00e4nde passiert Ber\u00fccksichtigen Sie dabei im Besonderen, warum es die beiden Zust\u00e4nde LED leuchtet und LED flackert gibt und diese nicht in einem Zusammengefasst wurden stateDiagram A : Start C: LED an D: LED leuchtet E: LED leuchtet2 F: LED flackert G : LED aus [*] --> A : Systemstart A --> C : Taster wird gedr\u00fcckt C --> D : D --> F : PAR_HOLD vergeht E --> G : PAR_WARN vergeht F --> E: D --> C: Taster wird gedr\u00fcckt E --> C: Taster wird gedr\u00fcckt G --> C: Taster wird gedr\u00fcckt","title":":writing_hand: Aufgabe 2_2_2: Implementierung eines Treppenhauslichts"},{"location":"2_2_Steuerung/#writing_hand-aufgabe-3_1_2-state-machine-fur-einen-dimmschalter","text":"Stellen Sie einen Dimmer vor, der durch halten des Tasters die Helligkeit einer LED \u00fcber die PWM steuert Durch halten des Tasters soll die Helligkeit von 0% auf 100% hoch- bzw. heruntergefahren werden Durch Loslassen wir die Richung umgekehrt Durch ein kurzes dr\u00fccken des Tasters soll die Helligkeit auf 0% bzw. 100% gesetzt werden Zeichen Sie eine State Machine, die dieses Verhalten beschreibt stateDiagram A : 100% B : 0% C : aufw\u00e4rts D : abw\u00e4rts A --> B: kurzer Druck B --> A: kurzer Druck A --> D: langer Druck B --> C: langer Druck C --> D: loslassen D --> C: loslassen","title":":writing_hand: Aufgabe 3_1_2: State Machine f\u00fcr einen Dimmschalter"},{"location":"2_2_Steuerung/#nerd_face-writing_hand-aufgabe-3_3_3-implementierung-eines-dimmschalter","text":"Implementieren Sie einen Dimmer","title":":nerd_face: :writing_hand: Aufgabe 3_3_3: Implementierung eines Dimmschalter"},{"location":"2_2_Steuerung/#verknupfungssteuerungen","text":"W\u00e4hrend Ablaufsteuerungen den Ablauf eines Prozesses steuern, verkn\u00fcpfen Verkn\u00fcpfungssteuerungen die Eingangssignale mit den Ausgangssignalen Diese Trennung ist jedoch eher akademisch, da die meisten Systeme sowohl Ablauf- als auch Verkn\u00fcpfungssteuerungen enthalten","title":"Verkn\u00fcpfungssteuerungen"},{"location":"2_2_Steuerung/#beispiel-wechselschalter","text":"Verkn\u00fcpfungssteuerungen k\u00f6nnen z.B. durch Wahreheitstabellen und Boolsche Funktionen beschrieben werden Sp\u00e4ter werden wir hierzu noch grafische Beschreibungen kennenlernen (Funktionsplan, Kontaktplan, ...) Wahrheitstabelle Schalter 1 Schalter 2 Lampe 0 0 0 0 1 1 1 0 1 1 1 0 Boolsche Funktion \\(L = (S_1 \\land \\lnot S_2) \\lor (\\lnot S_1 \\land S_2)\\)","title":"Beispiel: Wechselschalter"},{"location":"2_2_Steuerung/#writing_hand-aufgabe-3_1_2-implementierung-einer-vereinfachten-tageslichtschaltung","text":"Wir vereinfachen die Tagelichtschaltung, indem wir die Zeitparameter weglassen Zeichen Sie zun\u00e4chst eine Wahrheitstabelle f\u00fcr die Tageslichtschaltung P_ACT H_ROOM < PAR_SETPT L_MAN L_SET 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 1 1 0 1 0 1 0 0 1 1 0 1 0 0 1 1 1 0 1 1 0 0 1 1 1 0 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 \\[L_{\\text{SET}} = (P_{\\text{ACT}} \\land (H_{\\text{ROOM}} < \\text{PAR}_{\\text{SETPT}})) \\lor L_{\\text{MAN}})\\]","title":":writing_hand: Aufgabe 3_1_2: Implementierung einer vereinfachten Tageslichtschaltung"},{"location":"2_3_Funktionen/","text":"Bussysteme SoSe 2023 Dr. Julian Huber Funktionen Funktionale Programmierung Berechnung von Output aus Input wird in wieder aufrufbaren Funktionen gekapselt Funktion hat nur Input und Output aber keinen Speicher / Zustand def add ( a , b ): return a + b add ( 1 , 2 ) # 3 add ( 3 , 4 ) # 7 Steuerfunktion \\[L_{\\text{SET}} = (P_{\\text{ACT}} \\land (H_{\\text{ROOM}} < \\text{PAR}_{\\text{SETPT}})) \\lor L_{\\text{MAN}})\\] def l_set ( p_act , h_room , PAR_SETPT , l_man ): return ( p_act and h_room < PAR_SETPT ) or l_man from tageslichtschaltung import l_set from mapping import map_quat while True : l_set_value = l_set ( p_act , h_room , PAR_SETPT , l_man ) :writing_hand: Aufgabe 2_3_1: Implementierung einer Tageslichtschaltung Implementieren Sie die Tageslichtschaltung in Python Stellen Sie zun\u00e4chst sicher, dass LED, Button und Analog-Digital-Wandler korrekt angeschlossen sind Setzen Sie die manuelle Einstellung l_man dauerhaft auf False Setzen Sie den Sollwert PAR_SETPT auf einen geigneten Wert Legen Sie die beiden Module tageslichtschaltung.py und mappings.py in den gleichen Ordner wie Ihre Hauptdatei :nerd_face: Recherchieren Sie einen geeigneten Sensor, den Sie f\u00fcr die Anwesenheitserkennung verwenden k\u00f6nnen M\u00f6glicher Startpunkt import board import analogio import time from mappings import map_quat from tageslichtschaltung import l_set import digitalio # Initialisierung des ADC (Analog-Digital Converter) ldr = analogio . AnalogIn ( board . A2 ) # Initialisierung der LED led_pin = board . GP1 # Replace with the GPIO pin connected to your LED led = digitalio . DigitalInOut ( led_pin ) led . direction = digitalio . Direction . OUTPUT # Initialisierung Button button_pin = board . GP0 # Replace with the GPIO pin connected to your button button = digitalio . DigitalInOut ( button_pin ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP # Use pull-up resistor; change if using pull-down # Parameter setzen PAR_SETPT = 100 l_man = False # Wiederholung while True : # ADC als Dezimalzahl lesen read = ldr . value # Ausgabe in der Kommandozeile/Shell print ( \"ADC:\" , read ) print ( \"E in Lux\" , map_quat ( read )) tageslichtschaltung.py def l_set ( p_act , h_room , PAR_SETPT , l_man ): return ( p_act and h_room < PAR_SETPT ) or l_man mappings.py def map_lin ( z ): E_max = 1 E_min = 0 z_max = 65535 z_min = 0 beta_0 = E_min beta_1 = ( E_max - E_min ) / ( z_max - z_min ) return beta_0 + beta_1 * z def map_quat ( x ): s = 44000 a = 0.0015 return (( x - s ) * a ) ** 2 :writing_hand: Aufgabe 2_3_2: Welche Teile des Codes k\u00f6nnte man ebenfalls in Funktionen auslagern? Wie sch\u00e4tzen Sie den Aufwand ein, wenn man nun weitere Tageslicht-Schaltungen mit anderen LEDs und Sensoren auf der gleichen Platine realisieren m\u00f6chte? Sichtbarkeit von Variablen Lokale Variablen Variablen, die innerhalb einer Funktion definiert werden (z.B. s ) sind au\u00dferhalb der Funktion nicht sichtbar ( Kapselung ) Dies gilt f\u00fcr die meisten Programmiersprachen und z.B. auch f\u00fcr Schleifen def map_quat ( x ): s = 44000 a = 0.0015 return (( x - s ) * a ) ** 2 print ( s ) # NameError Traceback (most recent call last) # <ipython-input-11-76c4dd40fb41> in <module> # ----> 1 print(s) # NameError: name 's' is not defined Globale Variablen Variablen, die (bewusst) \u00fcberall im Programmcode aufrufbar sind (z.B. PAR_SETPT ) sind globale Variablen in Python werden globale Variablen in Gro\u00dfbuchstaben geschrieben A_GLOBAL_VAR = 1 def my_function (): a_local_variable = 2 return a_local_variable another_variable = my_function () print ( A_GLOBAL_VAR ) # 1 print ( a_local_variable ) # Error print ( another_variable ) # 2","title":"Funktionen"},{"location":"2_3_Funktionen/#bussysteme","text":"SoSe 2023 Dr. Julian Huber","title":"Bussysteme"},{"location":"2_3_Funktionen/#funktionen","text":"","title":"Funktionen"},{"location":"2_3_Funktionen/#funktionale-programmierung","text":"Berechnung von Output aus Input wird in wieder aufrufbaren Funktionen gekapselt Funktion hat nur Input und Output aber keinen Speicher / Zustand def add ( a , b ): return a + b add ( 1 , 2 ) # 3 add ( 3 , 4 ) # 7","title":"Funktionale Programmierung"},{"location":"2_3_Funktionen/#steuerfunktion","text":"\\[L_{\\text{SET}} = (P_{\\text{ACT}} \\land (H_{\\text{ROOM}} < \\text{PAR}_{\\text{SETPT}})) \\lor L_{\\text{MAN}})\\] def l_set ( p_act , h_room , PAR_SETPT , l_man ): return ( p_act and h_room < PAR_SETPT ) or l_man from tageslichtschaltung import l_set from mapping import map_quat while True : l_set_value = l_set ( p_act , h_room , PAR_SETPT , l_man )","title":"Steuerfunktion"},{"location":"2_3_Funktionen/#writing_hand-aufgabe-2_3_1-implementierung-einer-tageslichtschaltung","text":"Implementieren Sie die Tageslichtschaltung in Python Stellen Sie zun\u00e4chst sicher, dass LED, Button und Analog-Digital-Wandler korrekt angeschlossen sind Setzen Sie die manuelle Einstellung l_man dauerhaft auf False Setzen Sie den Sollwert PAR_SETPT auf einen geigneten Wert Legen Sie die beiden Module tageslichtschaltung.py und mappings.py in den gleichen Ordner wie Ihre Hauptdatei :nerd_face: Recherchieren Sie einen geeigneten Sensor, den Sie f\u00fcr die Anwesenheitserkennung verwenden k\u00f6nnen","title":":writing_hand: Aufgabe 2_3_1: Implementierung einer Tageslichtschaltung"},{"location":"2_3_Funktionen/#moglicher-startpunkt","text":"import board import analogio import time from mappings import map_quat from tageslichtschaltung import l_set import digitalio # Initialisierung des ADC (Analog-Digital Converter) ldr = analogio . AnalogIn ( board . A2 ) # Initialisierung der LED led_pin = board . GP1 # Replace with the GPIO pin connected to your LED led = digitalio . DigitalInOut ( led_pin ) led . direction = digitalio . Direction . OUTPUT # Initialisierung Button button_pin = board . GP0 # Replace with the GPIO pin connected to your button button = digitalio . DigitalInOut ( button_pin ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP # Use pull-up resistor; change if using pull-down # Parameter setzen PAR_SETPT = 100 l_man = False # Wiederholung while True : # ADC als Dezimalzahl lesen read = ldr . value # Ausgabe in der Kommandozeile/Shell print ( \"ADC:\" , read ) print ( \"E in Lux\" , map_quat ( read ))","title":"M\u00f6glicher Startpunkt"},{"location":"2_3_Funktionen/#tageslichtschaltungpy","text":"def l_set ( p_act , h_room , PAR_SETPT , l_man ): return ( p_act and h_room < PAR_SETPT ) or l_man","title":"tageslichtschaltung.py"},{"location":"2_3_Funktionen/#mappingspy","text":"def map_lin ( z ): E_max = 1 E_min = 0 z_max = 65535 z_min = 0 beta_0 = E_min beta_1 = ( E_max - E_min ) / ( z_max - z_min ) return beta_0 + beta_1 * z def map_quat ( x ): s = 44000 a = 0.0015 return (( x - s ) * a ) ** 2","title":"mappings.py"},{"location":"2_3_Funktionen/#writing_hand-aufgabe-2_3_2","text":"Welche Teile des Codes k\u00f6nnte man ebenfalls in Funktionen auslagern? Wie sch\u00e4tzen Sie den Aufwand ein, wenn man nun weitere Tageslicht-Schaltungen mit anderen LEDs und Sensoren auf der gleichen Platine realisieren m\u00f6chte?","title":":writing_hand: Aufgabe 2_3_2:"},{"location":"2_3_Funktionen/#sichtbarkeit-von-variablen","text":"","title":"Sichtbarkeit von Variablen"},{"location":"2_3_Funktionen/#lokale-variablen","text":"Variablen, die innerhalb einer Funktion definiert werden (z.B. s ) sind au\u00dferhalb der Funktion nicht sichtbar ( Kapselung ) Dies gilt f\u00fcr die meisten Programmiersprachen und z.B. auch f\u00fcr Schleifen def map_quat ( x ): s = 44000 a = 0.0015 return (( x - s ) * a ) ** 2 print ( s ) # NameError Traceback (most recent call last) # <ipython-input-11-76c4dd40fb41> in <module> # ----> 1 print(s) # NameError: name 's' is not defined","title":"Lokale Variablen"},{"location":"2_3_Funktionen/#globale-variablen","text":"Variablen, die (bewusst) \u00fcberall im Programmcode aufrufbar sind (z.B. PAR_SETPT ) sind globale Variablen in Python werden globale Variablen in Gro\u00dfbuchstaben geschrieben A_GLOBAL_VAR = 1 def my_function (): a_local_variable = 2 return a_local_variable another_variable = my_function () print ( A_GLOBAL_VAR ) # 1 print ( a_local_variable ) # Error print ( another_variable ) # 2","title":"Globale Variablen"},{"location":"2_4_Objektorientierung/","text":"Bussysteme SoSe 2023 Dr. Julian Huber Objektorientierung Motivation Funktion hat nur Input und Output aber keinen Speicher / Zustand z.B. wenn wir bei einer Messfunktionen das Signal gl\u00e4tten wollen, m\u00fcssen wir den Zustand speichern Grundkonzepte der Objektorientierung Objektorientierte Programmierung: Programmierparadigma mit Fokus auf Objekte, deren Eigenschaften und F\u00e4higkeiten z.B. Objekt der Klasse Sensor Attribute (Eigenschaften mit Datentyp): Z\u00e4hlernummer Aktueller Messerwert Liste bisheriger Messerwerte Einheit Methoden (wie Funktionen): Mittelwert bilden Messen Letzten Messwert \u00fcbermitteln Klassen und Objekte Die Sensor-Klasse beschreibt allgemein das Verhalten jedes Sensors! Jeder einzelne Sensor ist ein Objekt der Klasse Sensor, bei dem die Attribute individuell ausgepr\u00e4gt classDiagram class Sensor{ +string name +string unit +float measurement +[]float measurements +do_measurement() +calc_mean() +print_data() } Attribute # Definition einer Klasse class Sensor : def __init__ ( self , name , unit ): self . name = name self . unit = unit self . measurement = None self . measurements = [] # Instanziierung eines Objekts sensor1 = Sensor ( \"Temperatursensor\" , \"\u00b0C\" ) sensor2 = Sensor ( \"Beleuchtungsst\u00e4rke\" , \"Lux\" ) # Aufruf der Attribute print ( sensor1 . name ) print ( sensor2 . name ) Die Methode __init__ wird aufgerufen, sobald ein Objekt einer Klasse instanziiert wird. Die Methode kann daf\u00fcr benutzt werden, ihr Objekt auf irgendeine Weise zu initialisieren wichtig ist in jeder Methode als erstes Argument self zu \u00fcbergeben, damit die Methode auf das Objekt zugreifen kann Ebenso werden Attribute mit self definiert, damit sie dem Objekt zugeordnet werden Methoden & Funktionen Methoden sind Funktionen, die zu einer Klasse geh\u00f6ren Funktionen sind wieder aufrufbare Code-Einheiten, denen Argumente als Parameter \u00fcbergeben werden k\u00f6nnen Funktionen geben einen R\u00fcckgabewert aus, der weiterverarbeitet werden kann # Definition einer Klasse class Sensor : def __init__ ( self , name , unit ): self . name = name self . unit = unit self . measurement = None self . measurements = [] def print_data ( self ): print ( \"This \" + self . name + \"returns data in \" + self . unit ) # Instanziierung eines Objekts sensor1 = Sensor ( \"Temperatursensor\" , \"\u00b0C\" ) # Aufruf der Attribute sensor1 . print_data () :writing_hand: Aufgabe 2_4_1: Implementierung einer Sensor-Klasse import board import analogio import time import digitalio # Initialisierung des ADC (Analog-Digital Converter) ldr = analogio . AnalogIn ( board . A2 ) class Sensor : def __init__ ( self , name , unit ): self . name = name self . unit = unit self . last_measurement = None self . measurements = [] def do_measurement ( self , ldr ): self . last_measurement = ldr . value self . measurements . append ( self . last_measurement ) def print_data ( self ): print ( \"This \" + self . name + \"returns data in \" + self . unit ) beleuchtungs_sensor = Sensor ( \"Beleuchtungsst\u00e4rke\" , \"ADC\" ) # Wiederholung while True : # ADC als Dezimalzahl lesen beleuchtungs_sensor . do_measurement ( ldr ) print ( beleuchtungs_sensor . last_measurement ) # Warten time . sleep ( 1 ) Passen Sie den gegeben Code so an, dass der Sensor auch \u00fcber eine Methode verf\u00fcgt, welche den Mittelwert der Messwerte zur\u00fcckgibt Sie k\u00f6nnen die folgende Funktion als Ausgangspunkt verwenden Vergessen sie nicht das self -Argument zu \u00fcbergeben Hierdurch k\u00f6nnen sie auch die \u00dcbergabe des Parameters list_of_measurements vermeiden, die Sie sich im Objekt direkt auf self.measurements beziehen k\u00f6nnen def bilde_mittelwert ( list_of_measurements ): \"\"\" Eine Funktion, die eine Liste von Werten \u00fcbernimmt und das arithmetische Mittel zur\u00fcck gibt\"\"\" mittelwert = sum ( list_of_measurements ) / len ( list_of_measurements ) return mittelwert ergebnis = bilde_mittelwert ([ 1 , 2 , 3 ]) :nerd_face: :writing_hand: Aufgabe 2_4_2: Stellen Sie sicher, dass maximal die letzten 10 Messwerte gespeichert werden Erweitern die Methode calc_mean so, dass optional nur die letzten n Messwerte ber\u00fccksichtigt werden und n als Parameter \u00fcbergeben werden kann Integrieren Sie die mappings.py in Ihre Sensor-Klasse, damit diese Lux-Werte zur\u00fcckgibt :nerd_face: :nerd_face: \u00dcberlegen Sie, wie Sie dem Sensor bei der Instanziierung unterschiedliche Mapping-Funktionen \u00fcbergeben k\u00f6nnen Vererbung Durch Vererbung k\u00f6nnen die Attribute und Methoden einer (Parent-)Klasse an andere (Child-) Klassen weitergegeben werden. Neu implementiert werden m\u00fcssen dann nur zus\u00e4tzliche Datenelemente und Methoden. Im UML-Klassendiagramm wird die Vererbung mit meinem im leeren Dreieck endenden Pfeil dargestellt. Dies erm\u00f6glicht eine hierarchische Strukturierung von Klassen z.B. um schnell verschiedene Sensor-Klassen zu erstellen JSON-Darstellung eines Objekts Serialisierung von Objekten Zur \u00dcbertragung zwischen Systemen m\u00fcssen Objekte unabh\u00e4ngig vom der Darstellung im Arbeitsspeicher gemacht werden Serialisierung: Objekt aus dem Arbeitsspeicher wird in eine Folge von Zeichen \u00fcbersetzt (letztlich eine Folge von Bits) Austauschdateiformat (meist in Form einer Auszeichnungssprache) Dictionaries Sind die Implementierung von Hash-Tabellen in Python (ein Datentyp vergleichbar mit einer Liste) Anstelle einer Liste, in der Werte \u00fcber eine Indexposition abgerufen werden, werden Werte \u00fcber einen Schl\u00fcssel abgerufen Schl\u00fcssel-Wert-Paare {<key1>:<value1>, <key2>:<value2>, <key3>:<value3} my_dict = beleuchtungs_sensor . __dict__ print ( my_dict ) { 'last_measurement' : 43114 , 'measurements' : [ 43130 , 43034 , 43066 , 42666 , 43370 , 43114 , 42426 , 43114 ], 'name' : 'Beleuchtungsst\u00e4rke' , 'unit' : 'ADC' } * Das __dict__ -Attribut enth\u00e4lt alle Attribute des Objekts als Dictionary * Auf die Werte im Dictionary kann \u00fcber den Schl\u00fcssel zugegriffen werden print ( my_dict [ \"last_measurement\" ]) JavaScriptObjectNotation (JSON) Dictionary-Objekte k\u00f6nnen in JSON-Objekte umgewandelt werden JSON is eine Auszeichnungssprache, die f\u00fcr den Datenaustausch zwischen Systemen verwendet wird import json with open ( \"sample.json\" , \"w\" ) as outfile : json . dump ( my_dict , outfile ) { \"last_measurement\" : 43114 , \"measurements\" : [ 43130 , 43034 , 43066 , 42666 , 43370 , 43114 , 42426 , 43114 ], \"name\" : \"Beleuchtungsst\\u00e4rke\" , \"unit\" : \"ADC\" } \u00fcber eine eignete Codierung (z.B. ASCII, UTF) k\u00f6nnen auch Bin\u00e4rdaten \u00fcbertragen werden 1111011001001110110110101100101011101000110010101110010010111110110100101100100001001110011101000100000...","title":"Objektorientierung"},{"location":"2_4_Objektorientierung/#bussysteme","text":"SoSe 2023 Dr. Julian Huber","title":"Bussysteme"},{"location":"2_4_Objektorientierung/#objektorientierung","text":"","title":"Objektorientierung"},{"location":"2_4_Objektorientierung/#motivation","text":"Funktion hat nur Input und Output aber keinen Speicher / Zustand z.B. wenn wir bei einer Messfunktionen das Signal gl\u00e4tten wollen, m\u00fcssen wir den Zustand speichern","title":"Motivation"},{"location":"2_4_Objektorientierung/#grundkonzepte-der-objektorientierung","text":"Objektorientierte Programmierung: Programmierparadigma mit Fokus auf Objekte, deren Eigenschaften und F\u00e4higkeiten z.B. Objekt der Klasse Sensor Attribute (Eigenschaften mit Datentyp): Z\u00e4hlernummer Aktueller Messerwert Liste bisheriger Messerwerte Einheit Methoden (wie Funktionen): Mittelwert bilden Messen Letzten Messwert \u00fcbermitteln","title":"Grundkonzepte der Objektorientierung"},{"location":"2_4_Objektorientierung/#klassen-und-objekte","text":"Die Sensor-Klasse beschreibt allgemein das Verhalten jedes Sensors! Jeder einzelne Sensor ist ein Objekt der Klasse Sensor, bei dem die Attribute individuell ausgepr\u00e4gt classDiagram class Sensor{ +string name +string unit +float measurement +[]float measurements +do_measurement() +calc_mean() +print_data() }","title":"Klassen und Objekte"},{"location":"2_4_Objektorientierung/#attribute","text":"# Definition einer Klasse class Sensor : def __init__ ( self , name , unit ): self . name = name self . unit = unit self . measurement = None self . measurements = [] # Instanziierung eines Objekts sensor1 = Sensor ( \"Temperatursensor\" , \"\u00b0C\" ) sensor2 = Sensor ( \"Beleuchtungsst\u00e4rke\" , \"Lux\" ) # Aufruf der Attribute print ( sensor1 . name ) print ( sensor2 . name ) Die Methode __init__ wird aufgerufen, sobald ein Objekt einer Klasse instanziiert wird. Die Methode kann daf\u00fcr benutzt werden, ihr Objekt auf irgendeine Weise zu initialisieren wichtig ist in jeder Methode als erstes Argument self zu \u00fcbergeben, damit die Methode auf das Objekt zugreifen kann Ebenso werden Attribute mit self definiert, damit sie dem Objekt zugeordnet werden","title":"Attribute"},{"location":"2_4_Objektorientierung/#methoden-funktionen","text":"Methoden sind Funktionen, die zu einer Klasse geh\u00f6ren Funktionen sind wieder aufrufbare Code-Einheiten, denen Argumente als Parameter \u00fcbergeben werden k\u00f6nnen Funktionen geben einen R\u00fcckgabewert aus, der weiterverarbeitet werden kann # Definition einer Klasse class Sensor : def __init__ ( self , name , unit ): self . name = name self . unit = unit self . measurement = None self . measurements = [] def print_data ( self ): print ( \"This \" + self . name + \"returns data in \" + self . unit ) # Instanziierung eines Objekts sensor1 = Sensor ( \"Temperatursensor\" , \"\u00b0C\" ) # Aufruf der Attribute sensor1 . print_data ()","title":"Methoden &amp; Funktionen"},{"location":"2_4_Objektorientierung/#writing_hand-aufgabe-2_4_1-implementierung-einer-sensor-klasse","text":"import board import analogio import time import digitalio # Initialisierung des ADC (Analog-Digital Converter) ldr = analogio . AnalogIn ( board . A2 ) class Sensor : def __init__ ( self , name , unit ): self . name = name self . unit = unit self . last_measurement = None self . measurements = [] def do_measurement ( self , ldr ): self . last_measurement = ldr . value self . measurements . append ( self . last_measurement ) def print_data ( self ): print ( \"This \" + self . name + \"returns data in \" + self . unit ) beleuchtungs_sensor = Sensor ( \"Beleuchtungsst\u00e4rke\" , \"ADC\" ) # Wiederholung while True : # ADC als Dezimalzahl lesen beleuchtungs_sensor . do_measurement ( ldr ) print ( beleuchtungs_sensor . last_measurement ) # Warten time . sleep ( 1 ) Passen Sie den gegeben Code so an, dass der Sensor auch \u00fcber eine Methode verf\u00fcgt, welche den Mittelwert der Messwerte zur\u00fcckgibt Sie k\u00f6nnen die folgende Funktion als Ausgangspunkt verwenden Vergessen sie nicht das self -Argument zu \u00fcbergeben Hierdurch k\u00f6nnen sie auch die \u00dcbergabe des Parameters list_of_measurements vermeiden, die Sie sich im Objekt direkt auf self.measurements beziehen k\u00f6nnen def bilde_mittelwert ( list_of_measurements ): \"\"\" Eine Funktion, die eine Liste von Werten \u00fcbernimmt und das arithmetische Mittel zur\u00fcck gibt\"\"\" mittelwert = sum ( list_of_measurements ) / len ( list_of_measurements ) return mittelwert ergebnis = bilde_mittelwert ([ 1 , 2 , 3 ])","title":":writing_hand: Aufgabe 2_4_1: Implementierung einer Sensor-Klasse"},{"location":"2_4_Objektorientierung/#nerd_face-writing_hand-aufgabe-2_4_2","text":"Stellen Sie sicher, dass maximal die letzten 10 Messwerte gespeichert werden Erweitern die Methode calc_mean so, dass optional nur die letzten n Messwerte ber\u00fccksichtigt werden und n als Parameter \u00fcbergeben werden kann Integrieren Sie die mappings.py in Ihre Sensor-Klasse, damit diese Lux-Werte zur\u00fcckgibt :nerd_face: :nerd_face: \u00dcberlegen Sie, wie Sie dem Sensor bei der Instanziierung unterschiedliche Mapping-Funktionen \u00fcbergeben k\u00f6nnen","title":":nerd_face: :writing_hand: Aufgabe 2_4_2:"},{"location":"2_4_Objektorientierung/#vererbung","text":"Durch Vererbung k\u00f6nnen die Attribute und Methoden einer (Parent-)Klasse an andere (Child-) Klassen weitergegeben werden. Neu implementiert werden m\u00fcssen dann nur zus\u00e4tzliche Datenelemente und Methoden. Im UML-Klassendiagramm wird die Vererbung mit meinem im leeren Dreieck endenden Pfeil dargestellt. Dies erm\u00f6glicht eine hierarchische Strukturierung von Klassen z.B. um schnell verschiedene Sensor-Klassen zu erstellen","title":"Vererbung"},{"location":"2_4_Objektorientierung/#json-darstellung-eines-objekts","text":"","title":"JSON-Darstellung eines Objekts"},{"location":"2_4_Objektorientierung/#serialisierung-von-objekten","text":"Zur \u00dcbertragung zwischen Systemen m\u00fcssen Objekte unabh\u00e4ngig vom der Darstellung im Arbeitsspeicher gemacht werden Serialisierung: Objekt aus dem Arbeitsspeicher wird in eine Folge von Zeichen \u00fcbersetzt (letztlich eine Folge von Bits) Austauschdateiformat (meist in Form einer Auszeichnungssprache)","title":"Serialisierung von Objekten"},{"location":"2_4_Objektorientierung/#dictionaries","text":"Sind die Implementierung von Hash-Tabellen in Python (ein Datentyp vergleichbar mit einer Liste) Anstelle einer Liste, in der Werte \u00fcber eine Indexposition abgerufen werden, werden Werte \u00fcber einen Schl\u00fcssel abgerufen Schl\u00fcssel-Wert-Paare {<key1>:<value1>, <key2>:<value2>, <key3>:<value3} my_dict = beleuchtungs_sensor . __dict__ print ( my_dict ) { 'last_measurement' : 43114 , 'measurements' : [ 43130 , 43034 , 43066 , 42666 , 43370 , 43114 , 42426 , 43114 ], 'name' : 'Beleuchtungsst\u00e4rke' , 'unit' : 'ADC' } * Das __dict__ -Attribut enth\u00e4lt alle Attribute des Objekts als Dictionary * Auf die Werte im Dictionary kann \u00fcber den Schl\u00fcssel zugegriffen werden print ( my_dict [ \"last_measurement\" ])","title":"Dictionaries"},{"location":"2_4_Objektorientierung/#javascriptobjectnotation-json","text":"Dictionary-Objekte k\u00f6nnen in JSON-Objekte umgewandelt werden JSON is eine Auszeichnungssprache, die f\u00fcr den Datenaustausch zwischen Systemen verwendet wird import json with open ( \"sample.json\" , \"w\" ) as outfile : json . dump ( my_dict , outfile ) { \"last_measurement\" : 43114 , \"measurements\" : [ 43130 , 43034 , 43066 , 42666 , 43370 , 43114 , 42426 , 43114 ], \"name\" : \"Beleuchtungsst\\u00e4rke\" , \"unit\" : \"ADC\" } \u00fcber eine eignete Codierung (z.B. ASCII, UTF) k\u00f6nnen auch Bin\u00e4rdaten \u00fcbertragen werden 1111011001001110110110101100101011101000110010101110010010111110110100101100100001001110011101000100000...","title":"JavaScriptObjectNotation (JSON)"},{"location":"3_1_Blockschaltbild/","text":"Bussysteme SoSe 2023 Dr. Julian Huber Blockschaltbild Blockschaltbild Grafische Beschreibung von Systemen in der Regelungs- und Steuerungstechnik Systeme werden durch Bl\u00f6cke dargestellt, die durch Pfeile verbunden sind z.B. Steuerungsfunktion (z.B. in Python) z.B. thermodynamisches Modell eines Raums I.d.R. besch\u00e4ftigen wir uns mit dynamischen Systemen Die Ausgangsgr\u00f6\u00dfe h\u00e4ngt nicht nur von den Eingangsgr\u00f6\u00dfen ab (vgl. Funktion) sondern auch vom Systemzustand und damit inneren Zustandsgr\u00f6\u00dfen (vgl. Objekt) Lunze Dynamische Systeme lineare Systeme: Systemfunktion ist eine lineare Funktion nichtlineare Systeme: Systemfunktion ist eine nichtlineare Funktion zeitinvariante Systeme: Systemfunktion ist unabh\u00e4ngig von der Zeit zeitvariante Systeme: Systemfunktion ist abh\u00e4ngig von der Zeit Totzeit: Systemfunktion ist eine Funktion der Zeit, die f\u00fcr \\(t<0\\) verschwindet Elemente eines Blockschaltbildes \u00dcbertragungsglieder beschreiben Systeme mit deren Eigenschaften / Funktionen Pfeile die Ein- und Ausgangsgr\u00f6\u00dfen Komplexe Systeme k\u00f6nnen durch mehrere Systeme zusammengesetzt werden Systeme werden im Zeitbereich durch ihre Funktionsbeziehung zwischen Ausgang \\(y\\) und Eingang \\(u\\) unterschieden \\(f(u)=y\\) Proportionalglied (P-Glied) Linear und zeitinvariant Beschreibt Systeme mit direktem proportionaler Systemfunktion \\(f\\) f\u00fcr den Zusammenhang zwischen Eingang ( \\(u\\) ) und Ausgang ( \\(y\\) ) \\(y = f(u)=K_p \\cdot u\\) \\(K_p\\) ... Proportionalit\u00e4tsfaktor Wirkweise eines P-Glieds \\(y = f(u)=K_p \\cdot u\\) Beispiel: je h\u00f6her die \\(\\text{CO}_2\\) Konzentration in einem Raum, desto schneller dreht sich ein Ventilator in einer L\u00fcftungsanlage \\(y\\) ... Drehfrequenz der Ventilators in \\(Hz\\) \\(u\\) ... \\(\\text{CO}_2\\) Konzentration in \\(ppm\\) \\(K_p\\) ... Proportionalit\u00e4tsfaktor in \\(\\frac{Hz}{ppm}\\) Unabh\u00e4ngig vom Verlauf der Eingangsgr\u00f6\u00dfe \\(u(t)\\) ist der Wert der Ausgangsgr\u00f6\u00dfe \\(y(t)\\) immer proportional \ud83e\udde0 Einheits-Sprungfunktion Eine Funktion, die am Zeitpunkt \\(t=0\\) von \\(u=0\\) auf \\(u=1\\) springt und sonst konstant bleibt beliebtes Werkzeug in die Regelungstechnik: Wie reagiert ein System, wenn wir eine Sprungfunktion an den Eingang legen (auch in der E-Technik!) \ud83e\udde0 Sprungantwort (Reaktion) eines P-Glieds auf eine Sprungfunktion Das Symbol repr\u00e4sentiert die Sprungantwort weitere Beispiele: Entwicklung Spannungsabfall am Ohmschen Widerstand beim Anlegen einer Quellenspannung Antwort eines Helligkeitssensors auf Lichteinfall Lunze Totzeitglied (T-Glied) beschreibt die zeitliche Verz\u00f6gerung, bis ein System auf das Eingangssignal (z.B. der Sprungfunktion) reagiert. Nicht die Tr\u00e4gheit des Systems sondern eine Leerlaufzeit \\(T_t\\) . \ud83e\udde0 Sprungantwort eines T-Glieds auf eine Sprungfunktion :writing_hand: Aufgabe 3_1_0: Proportional mit Totzeitglied \u00d6ffnen Sie Aufgaben\\3_1_0 in scilab xcos Testen Sie verschiedene Werte f\u00fcr den P-Wert beim PID -Block und die Totzeit beim Continuous fix delay -Block Proportionalglied mit Verz\u00f6gerung 1. Ordnung (PT1-Glied) beschreibt Tr\u00e4gheit im System oder eine D\u00e4mpfung n\u00e4hert sich \u00fcber die Zeit einer waagrechten Linie an z.B. Spannung am Kondensator z.B. Temperatur im Raum nach dem Einschalten einer Fu\u00dfbodenheizung Beschr\u00e4nktes Wachstum Es gibt noch viele weitere typische Glieder Mehr dazu beim Thema stetige Regler aus diesen lassen sich komplexe Modelle zusammenstellen lassen (z.B. als Blockschaltbild) Blockschaltbild einer Steuerung Die F\u00fchrungsgr\u00f6\u00dfe ist die Gr\u00f6\u00dfe, welche das Verhalten der Stellglieds bestimmt ( \\(\\rightarrow\\) z.B. die aktuelle Beleuchtungsst\u00e4rke gemessen am Lichtsensor im Freien) Durch das Stellen eines Stellglieds (oder Stelleinrichtung bzw. Aktor) wird die Steuerstrecke beeinflusst ( \\(\\rightarrow\\) Mikrocotroller steuert Spannung an LED an oder aus basierend auf einen Schwellenwert) https://upload.wikimedia.org/wikipedia/commons/6/64/R_S_Block.svg \ud83e\udde0 Steuerung Stellgr\u00f6\u00dfe ist die Ausgangsgr\u00f6\u00dfe des Stellglieds ( \\(\\rightarrow\\) Spannung an der LED) Steuerstrecke ist das System, das durch die Stellgr\u00f6\u00dfe und St\u00f6rgr\u00f6\u00dfen beeinflusst wird ( \\(\\rightarrow\\) Helligkeit im Raum) Auf die Steuerstrecke wirken neben der Stellgr\u00f6\u00dfe aus St\u00f6rgr\u00f6\u00dfen ( \\(\\rightarrow\\) Lichteinfall von Au\u00dfen, weitere nicht gesteuerte Lichtquellen im Raum) https://upload.wikimedia.org/wikipedia/commons/6/64/R_S_Block.svg Stellglied ist nun kein standardisiertes Glied, sondern hat eine spezielle Funktion die sich aus Hard- und Software ergibt diese beinhaltet Steuerungslogik und physikalische Umsetzung zeitliche Reaktion meist nicht unmittelbar, sondern verz\u00f6gert (z.B. Rechenzeit als Totzeit) def l_set ( p_act , h_room , PAR_SETPT , l_man ): return ( p_act and h_room < PAR_SETPT ) or l_man Steuerstrecke beschreibt die echte Welt h\u00e4ufig in vereinfachten Modellen zeitliche Reaktion meist nicht unmittelbar (z.B. PT1-Glied) def beleuchtungsstraerke_raum_lux ( lichtabgabe_led , lichteinfall_aussen , wand_farbe ): # Gr\u00f6\u00dfe des Raumes # Gr\u00f6\u00dfe der Fenster # Reflexion der W\u00e4nde <...> return beleuchtungsstraerke_raum_lux def raumtemperatur ( heizleistung_in_w , aussen_temp_in_c ): # Temperatur im Zeitpunkt zuvor # Tr\u00e4gheit der Temperatur\u00e4nderung # Gr\u00f6\u00dfe des Raumes # Isolation der Raumes <...> return raum_temp_in_c Simulation mit scilab xcos Xcos ist ein grafischer Editor f\u00fcr Blockschaltbilder die Funktionalit\u00e4t entspricht in etwa matlab simulink allerdings ist die Software open source und kostenlos :writing_hand: Aufgabe 3_1_1: Wassertank ohne Steuerung passen Sie den Inflow an in so an, dass der Tank langsamer \u00fcberl\u00e4uft :writing_hand: Aufgabe 3_1_2: Einfache Tageslichtschaltung passen Sie den Threshold in Dynamic in Aufgaben\\3_1_2 so an, dass die LED bei einer Helligkeit von 220 Lux angeht Zwei-Punkt Regelung Vorteile einfach zu verstehen und zu implementieren ```Python regelabweichung = soll_lux- ist_lux zweipunkt_regler(regelabweichung): if regelabweichung > 0: licht = True else: licht = False return licht ``` Probleme Zwei-Punkt Regelung Nachteile bei zeitlich wenig tr\u00e4gen Systemen Regler schaltet st\u00e4ndig zwischen den Ausgangswerten kritisch insbesondere bei mechanische Belastung z.B. Motor wird st\u00e4ndig an und aus geschaltet Hysterese bewirkt eine Schalttoleranz ober- und unterhalb des Sollwerts def zweipunkt_hysterese ( ist_lux , on_level , off_level , letzter_zustand ): if ist_lux > off_level : licht = False elif ist_lux < on_level : licht = True else : licht = letzter_zustand return licht class zweipunkt_hysterese (): def __init__ ( self , on_level , off_level ): self . on_level = on_level self . off_level = off_level self . letzter_zustand = False def calc_output ( self , ist_lux ): if ist_lux > self . off_level : self . letzter_zustand = False elif ist_lux < self . on_level : self . letzter_zustand = True return self . letzter_zustand https://www.wikiwand.com/de/Methode_der_harmonischen_Balance#Media/Datei:Zweipunktkennlinie.png https://www.youtube.com/watch?v=nC5ZPEPtH9w Drei-Punkt Regelung vermeidet st\u00e4ndiges Umschalten sinnvoll bei Neutralstellung z.B. Motoren drei_punk_regler ( abstand ): if abstand > 6 : fahre = \"vorw\u00e4rts\" elif abstand < 4 : fahre = \"r\u00fcckw\u00e4rts\" else : fahre = \"nicht\" return fahre bewegung = drei_punk_regler ( abstand ) :writing_hand: Aufgabe 3_1_3: Einfache Tageslichtschaltung Ersetzen Sie den Schalter Dynamic mit einem Hystereseschalter","title":"Blockschaltbild "},{"location":"3_1_Blockschaltbild/#bussysteme","text":"SoSe 2023 Dr. Julian Huber","title":"Bussysteme"},{"location":"3_1_Blockschaltbild/#blockschaltbild","text":"","title":"Blockschaltbild"},{"location":"3_1_Blockschaltbild/#blockschaltbild_1","text":"Grafische Beschreibung von Systemen in der Regelungs- und Steuerungstechnik Systeme werden durch Bl\u00f6cke dargestellt, die durch Pfeile verbunden sind z.B. Steuerungsfunktion (z.B. in Python) z.B. thermodynamisches Modell eines Raums I.d.R. besch\u00e4ftigen wir uns mit dynamischen Systemen Die Ausgangsgr\u00f6\u00dfe h\u00e4ngt nicht nur von den Eingangsgr\u00f6\u00dfen ab (vgl. Funktion) sondern auch vom Systemzustand und damit inneren Zustandsgr\u00f6\u00dfen (vgl. Objekt)","title":"Blockschaltbild"},{"location":"3_1_Blockschaltbild/#lunze","text":"","title":"Lunze"},{"location":"3_1_Blockschaltbild/#dynamische-systeme","text":"lineare Systeme: Systemfunktion ist eine lineare Funktion nichtlineare Systeme: Systemfunktion ist eine nichtlineare Funktion zeitinvariante Systeme: Systemfunktion ist unabh\u00e4ngig von der Zeit zeitvariante Systeme: Systemfunktion ist abh\u00e4ngig von der Zeit Totzeit: Systemfunktion ist eine Funktion der Zeit, die f\u00fcr \\(t<0\\) verschwindet","title":"Dynamische Systeme"},{"location":"3_1_Blockschaltbild/#elemente-eines-blockschaltbildes","text":"\u00dcbertragungsglieder beschreiben Systeme mit deren Eigenschaften / Funktionen Pfeile die Ein- und Ausgangsgr\u00f6\u00dfen Komplexe Systeme k\u00f6nnen durch mehrere Systeme zusammengesetzt werden Systeme werden im Zeitbereich durch ihre Funktionsbeziehung zwischen Ausgang \\(y\\) und Eingang \\(u\\) unterschieden \\(f(u)=y\\)","title":"Elemente eines Blockschaltbildes"},{"location":"3_1_Blockschaltbild/#proportionalglied-p-glied","text":"Linear und zeitinvariant Beschreibt Systeme mit direktem proportionaler Systemfunktion \\(f\\) f\u00fcr den Zusammenhang zwischen Eingang ( \\(u\\) ) und Ausgang ( \\(y\\) ) \\(y = f(u)=K_p \\cdot u\\) \\(K_p\\) ... Proportionalit\u00e4tsfaktor","title":"Proportionalglied (P-Glied)"},{"location":"3_1_Blockschaltbild/#wirkweise-eines-p-glieds","text":"\\(y = f(u)=K_p \\cdot u\\) Beispiel: je h\u00f6her die \\(\\text{CO}_2\\) Konzentration in einem Raum, desto schneller dreht sich ein Ventilator in einer L\u00fcftungsanlage \\(y\\) ... Drehfrequenz der Ventilators in \\(Hz\\) \\(u\\) ... \\(\\text{CO}_2\\) Konzentration in \\(ppm\\) \\(K_p\\) ... Proportionalit\u00e4tsfaktor in \\(\\frac{Hz}{ppm}\\) Unabh\u00e4ngig vom Verlauf der Eingangsgr\u00f6\u00dfe \\(u(t)\\) ist der Wert der Ausgangsgr\u00f6\u00dfe \\(y(t)\\) immer proportional","title":"Wirkweise eines P-Glieds"},{"location":"3_1_Blockschaltbild/#einheits-sprungfunktion","text":"Eine Funktion, die am Zeitpunkt \\(t=0\\) von \\(u=0\\) auf \\(u=1\\) springt und sonst konstant bleibt beliebtes Werkzeug in die Regelungstechnik: Wie reagiert ein System, wenn wir eine Sprungfunktion an den Eingang legen (auch in der E-Technik!)","title":"\ud83e\udde0 Einheits-Sprungfunktion"},{"location":"3_1_Blockschaltbild/#sprungantwort-reaktion-eines-p-glieds-auf-eine-sprungfunktion","text":"Das Symbol repr\u00e4sentiert die Sprungantwort weitere Beispiele: Entwicklung Spannungsabfall am Ohmschen Widerstand beim Anlegen einer Quellenspannung Antwort eines Helligkeitssensors auf Lichteinfall","title":"\ud83e\udde0 Sprungantwort (Reaktion) eines P-Glieds auf eine Sprungfunktion"},{"location":"3_1_Blockschaltbild/#lunze_1","text":"","title":"Lunze"},{"location":"3_1_Blockschaltbild/#totzeitglied-t-glied","text":"beschreibt die zeitliche Verz\u00f6gerung, bis ein System auf das Eingangssignal (z.B. der Sprungfunktion) reagiert. Nicht die Tr\u00e4gheit des Systems sondern eine Leerlaufzeit \\(T_t\\) .","title":"Totzeitglied (T-Glied)"},{"location":"3_1_Blockschaltbild/#sprungantwort-eines-t-glieds-auf-eine-sprungfunktion","text":"","title":"\ud83e\udde0 Sprungantwort eines T-Glieds auf eine Sprungfunktion"},{"location":"3_1_Blockschaltbild/#writing_hand-aufgabe-3_1_0-proportional-mit-totzeitglied","text":"\u00d6ffnen Sie Aufgaben\\3_1_0 in scilab xcos Testen Sie verschiedene Werte f\u00fcr den P-Wert beim PID -Block und die Totzeit beim Continuous fix delay -Block","title":":writing_hand: Aufgabe 3_1_0: Proportional mit Totzeitglied"},{"location":"3_1_Blockschaltbild/#proportionalglied-mit-verzogerung-1-ordnung-pt1-glied","text":"beschreibt Tr\u00e4gheit im System oder eine D\u00e4mpfung n\u00e4hert sich \u00fcber die Zeit einer waagrechten Linie an z.B. Spannung am Kondensator z.B. Temperatur im Raum nach dem Einschalten einer Fu\u00dfbodenheizung Beschr\u00e4nktes Wachstum Es gibt noch viele weitere typische Glieder Mehr dazu beim Thema stetige Regler aus diesen lassen sich komplexe Modelle zusammenstellen lassen (z.B. als Blockschaltbild)","title":"Proportionalglied mit Verz\u00f6gerung 1. Ordnung (PT1-Glied)"},{"location":"3_1_Blockschaltbild/#blockschaltbild-einer-steuerung","text":"Die F\u00fchrungsgr\u00f6\u00dfe ist die Gr\u00f6\u00dfe, welche das Verhalten der Stellglieds bestimmt ( \\(\\rightarrow\\) z.B. die aktuelle Beleuchtungsst\u00e4rke gemessen am Lichtsensor im Freien) Durch das Stellen eines Stellglieds (oder Stelleinrichtung bzw. Aktor) wird die Steuerstrecke beeinflusst ( \\(\\rightarrow\\) Mikrocotroller steuert Spannung an LED an oder aus basierend auf einen Schwellenwert)","title":"Blockschaltbild einer Steuerung"},{"location":"3_1_Blockschaltbild/#httpsuploadwikimediaorgwikipediacommons664r_s_blocksvg","text":"","title":"https://upload.wikimedia.org/wikipedia/commons/6/64/R_S_Block.svg"},{"location":"3_1_Blockschaltbild/#steuerung","text":"Stellgr\u00f6\u00dfe ist die Ausgangsgr\u00f6\u00dfe des Stellglieds ( \\(\\rightarrow\\) Spannung an der LED) Steuerstrecke ist das System, das durch die Stellgr\u00f6\u00dfe und St\u00f6rgr\u00f6\u00dfen beeinflusst wird ( \\(\\rightarrow\\) Helligkeit im Raum) Auf die Steuerstrecke wirken neben der Stellgr\u00f6\u00dfe aus St\u00f6rgr\u00f6\u00dfen ( \\(\\rightarrow\\) Lichteinfall von Au\u00dfen, weitere nicht gesteuerte Lichtquellen im Raum)","title":"\ud83e\udde0 Steuerung"},{"location":"3_1_Blockschaltbild/#httpsuploadwikimediaorgwikipediacommons664r_s_blocksvg_1","text":"","title":"https://upload.wikimedia.org/wikipedia/commons/6/64/R_S_Block.svg"},{"location":"3_1_Blockschaltbild/#stellglied","text":"ist nun kein standardisiertes Glied, sondern hat eine spezielle Funktion die sich aus Hard- und Software ergibt diese beinhaltet Steuerungslogik und physikalische Umsetzung zeitliche Reaktion meist nicht unmittelbar, sondern verz\u00f6gert (z.B. Rechenzeit als Totzeit) def l_set ( p_act , h_room , PAR_SETPT , l_man ): return ( p_act and h_room < PAR_SETPT ) or l_man","title":"Stellglied"},{"location":"3_1_Blockschaltbild/#steuerstrecke","text":"beschreibt die echte Welt h\u00e4ufig in vereinfachten Modellen zeitliche Reaktion meist nicht unmittelbar (z.B. PT1-Glied) def beleuchtungsstraerke_raum_lux ( lichtabgabe_led , lichteinfall_aussen , wand_farbe ): # Gr\u00f6\u00dfe des Raumes # Gr\u00f6\u00dfe der Fenster # Reflexion der W\u00e4nde <...> return beleuchtungsstraerke_raum_lux def raumtemperatur ( heizleistung_in_w , aussen_temp_in_c ): # Temperatur im Zeitpunkt zuvor # Tr\u00e4gheit der Temperatur\u00e4nderung # Gr\u00f6\u00dfe des Raumes # Isolation der Raumes <...> return raum_temp_in_c","title":"Steuerstrecke"},{"location":"3_1_Blockschaltbild/#simulation-mit-scilab-xcos","text":"Xcos ist ein grafischer Editor f\u00fcr Blockschaltbilder die Funktionalit\u00e4t entspricht in etwa matlab simulink allerdings ist die Software open source und kostenlos","title":"Simulation mit scilab xcos"},{"location":"3_1_Blockschaltbild/#writing_hand-aufgabe-3_1_1-wassertank-ohne-steuerung","text":"passen Sie den Inflow an in so an, dass der Tank langsamer \u00fcberl\u00e4uft","title":":writing_hand: Aufgabe 3_1_1: Wassertank ohne Steuerung"},{"location":"3_1_Blockschaltbild/#writing_hand-aufgabe-3_1_2-einfache-tageslichtschaltung","text":"passen Sie den Threshold in Dynamic in Aufgaben\\3_1_2 so an, dass die LED bei einer Helligkeit von 220 Lux angeht","title":":writing_hand: Aufgabe 3_1_2: Einfache Tageslichtschaltung"},{"location":"3_1_Blockschaltbild/#zwei-punkt-regelung","text":"Vorteile einfach zu verstehen und zu implementieren ```Python regelabweichung = soll_lux- ist_lux zweipunkt_regler(regelabweichung): if regelabweichung > 0: licht = True else: licht = False return licht ```","title":"Zwei-Punkt Regelung"},{"location":"3_1_Blockschaltbild/#probleme-zwei-punkt-regelung","text":"Nachteile bei zeitlich wenig tr\u00e4gen Systemen Regler schaltet st\u00e4ndig zwischen den Ausgangswerten kritisch insbesondere bei mechanische Belastung z.B. Motor wird st\u00e4ndig an und aus geschaltet","title":"Probleme Zwei-Punkt Regelung"},{"location":"3_1_Blockschaltbild/#hysterese","text":"bewirkt eine Schalttoleranz ober- und unterhalb des Sollwerts def zweipunkt_hysterese ( ist_lux , on_level , off_level , letzter_zustand ): if ist_lux > off_level : licht = False elif ist_lux < on_level : licht = True else : licht = letzter_zustand return licht class zweipunkt_hysterese (): def __init__ ( self , on_level , off_level ): self . on_level = on_level self . off_level = off_level self . letzter_zustand = False def calc_output ( self , ist_lux ): if ist_lux > self . off_level : self . letzter_zustand = False elif ist_lux < self . on_level : self . letzter_zustand = True return self . letzter_zustand","title":"Hysterese"},{"location":"3_1_Blockschaltbild/#httpswwwwikiwandcomdemethode_der_harmonischen_balancemediadateizweipunktkennliniepng","text":"","title":"https://www.wikiwand.com/de/Methode_der_harmonischen_Balance#Media/Datei:Zweipunktkennlinie.png"},{"location":"3_1_Blockschaltbild/#httpswwwyoutubecomwatchvnc5zpepth9w","text":"","title":"https://www.youtube.com/watch?v=nC5ZPEPtH9w"},{"location":"3_1_Blockschaltbild/#drei-punkt-regelung","text":"vermeidet st\u00e4ndiges Umschalten sinnvoll bei Neutralstellung z.B. Motoren drei_punk_regler ( abstand ): if abstand > 6 : fahre = \"vorw\u00e4rts\" elif abstand < 4 : fahre = \"r\u00fcckw\u00e4rts\" else : fahre = \"nicht\" return fahre bewegung = drei_punk_regler ( abstand )","title":"Drei-Punkt Regelung"},{"location":"3_1_Blockschaltbild/#writing_hand-aufgabe-3_1_3-einfache-tageslichtschaltung","text":"Ersetzen Sie den Schalter Dynamic mit einem Hystereseschalter","title":":writing_hand: Aufgabe 3_1_3: Einfache Tageslichtschaltung"},{"location":"3_2_Regelkreis/","text":"Bussysteme SoSe 2023 Dr. Julian Huber Regelkreis regelt die Raumbeleuchtung oder Teile davon bei Belegung automatisch so, dass eine eingestellte Mindestbeleuchtungsst\u00e4rke nicht unterschritten wird Im Gegensatz zur Tageslichtschaltung, soll es aber auch nicht unn\u00f6tig hell sein, wenn es drau\u00dfen schon hell ist Konstantlichtregelung Lichtst\u00e4rke kann (quasi) stetig gesteuert werden \u270d\ufe0f Aufgabe 3_1_2: Einfache Tageslichtschaltung Laden Sie die Datei Konstantlicht_nur_p.zcos und passen Sie den P-Parameter in PID -Baustein an und beobachten Sie die Reaktion des Systems Welche Komponenten werden durch welche Bausteine dargestellt? \ud83e\udde0 Proportional-Regler Reaktion der Stellgr\u00f6\u00dfe bzw. Steuerungsgr\u00f6\u00dfe \\(u(t)=K_P \\cdot e(t)\\) multipliziert die Regelabweichung \\(e_t\\) mit dem Verst\u00e4rkungsfaktor \\(K_P\\) und gibt das Ergebnis aus je dunkler \\(y_m\\) im Verh\u00e4ltnis zur F\u00fchrungsgr\u00f6\u00dfe ( \\(w\\) ), desto heller die Beleuchtung ( \\(u\\) ) Reaktion der Stellgr\u00f6\u00dfe: $ u(t)=K_P \\cdot e(t)$ def p - regler ( e , k_p ): ausgang = e * k_p return ausgang \ud83e\udde0 Aufgabe Ziel ist der Entwurf eines Reglers zur Steuerung einer Bel\u00fcftungsanlage auf Basis der Schadstoffkonzentration im Raum in ppm Zeichnen Sie den Verlauf der Stellgr\u00f6\u00dfen (Drehzahl der Anlage) f\u00fcr folgende zwei Regler: stetiger Proportionalregler: \\(u(t) = \\frac{2}{min \\cdot ppm} e(t)\\) Regelung nach Logik n\u00e4chste Seite. \ud83e\udde0 Aufgabe \ud83e\udde0 Aufgabe def regler ( e , letzte_drehzahl ): if e == 1000 : drehzahl = letzte_drehzahl else : if e > 1000 : drehzahl = e else : drehzahl = 0 return drehzahl Zusammenfassung P-Regler P-Glied, welches als Regler eingesetzt wird Zeitverhalten: reagiert unverz\u00f6gert bleibende Regelabweichung bei Systemen mit Ausgleich (Regelstrecken die bei konstantem Eingang einen konstanten Wert anstreben) \u270d\ufe0f Aufgabe 3_2_2: Wassertank mit PID-Regler Entfernen Sie den I und D-Anteil des PID-Reglers und beobachten Sie die Reaktion des Systems \ud83e\udde0 Integral-Regler Antwort \\(u(t)\\) auf Sprung unmittelbar, jedoch nicht sofort mit voller St\u00e4rke Je l\u00e4nger ( \\(t\\) ) die Regelabweichung besteht und umso gr\u00f6\u00dfer sie ist, desto st\u00e4rker die Antwort \\(u(t)=\\frac{1}{T_n}\\int_0^te(\\tau)d\\tau\\) Abbildung rechts ist Reaktion auf Sprungfunktion \\(u(t)=\\frac{1}{T_n}\\int_0^te(\\tau)d\\tau\\) \\(u(t)=K_I \\cdot \\int_0^te(\\tau)d\\tau\\) \\(T_n\\) ... Nachstellzeit bestimmt den Gradienten des Anstieges von \\(u\\) summiert die Regelabweichung \u00fcber die Zeit auf Regelabweichungen werden auch bei Strecken mit Ausgleich vollst\u00e4ndig eliminiert , daf\u00fcr langsamer \ud83e\udde0 \ud83e\udde0 Proportional-Integral-Regler Sprungantwort: \\(u(t)=K_Pe(t) + K_I \\cdot \\int_0^te(\\tau)d\\tau\\) PI-Regler Kombination aus P- und I-Regler schnelle Reaktion (wie P-Regler) exakte Ausregelung ohne eine bleibende Regelabweichung (wie I-Regler) \ud83e\udde0 Proportional-Differenzial-Regler Sprungantwort: \\(u(t)=K_Pe(t)+K_d \\frac{de(t)}{dt}=K_Pe(t)+T_v \\frac{de(t)}{dt}\\) kombiniert P-Regler mit Differenzial-Anteil der D-Anteil bewertet die \u00c4nderung einer Regelabweichung (differenziert) und berechnet so deren \u00c4nderungsgeschwindigkeit reagiert schon auf \"Ank\u00fcndigungen\" von Ver\u00e4nderungen sehr schnell , doch bleibende Regelabweichung Unruhe im Regelkreis wird verst\u00e4rkt, wenn Sensorsignal verrauscht \ud83e\udde0 \u270d\ufe0f Wie sieht die Reaktion aus?","title":"Regelkreis"},{"location":"3_2_Regelkreis/#bussysteme","text":"SoSe 2023 Dr. Julian Huber","title":"Bussysteme"},{"location":"3_2_Regelkreis/#regelkreis","text":"regelt die Raumbeleuchtung oder Teile davon bei Belegung automatisch so, dass eine eingestellte Mindestbeleuchtungsst\u00e4rke nicht unterschritten wird Im Gegensatz zur Tageslichtschaltung, soll es aber auch nicht unn\u00f6tig hell sein, wenn es drau\u00dfen schon hell ist","title":"Regelkreis"},{"location":"3_2_Regelkreis/#konstantlichtregelung","text":"Lichtst\u00e4rke kann (quasi) stetig gesteuert werden","title":"Konstantlichtregelung"},{"location":"3_2_Regelkreis/#aufgabe-3_1_2-einfache-tageslichtschaltung","text":"Laden Sie die Datei Konstantlicht_nur_p.zcos und passen Sie den P-Parameter in PID -Baustein an und beobachten Sie die Reaktion des Systems Welche Komponenten werden durch welche Bausteine dargestellt?","title":"\u270d\ufe0f Aufgabe 3_1_2: Einfache Tageslichtschaltung"},{"location":"3_2_Regelkreis/#proportional-regler","text":"Reaktion der Stellgr\u00f6\u00dfe bzw. Steuerungsgr\u00f6\u00dfe \\(u(t)=K_P \\cdot e(t)\\) multipliziert die Regelabweichung \\(e_t\\) mit dem Verst\u00e4rkungsfaktor \\(K_P\\) und gibt das Ergebnis aus je dunkler \\(y_m\\) im Verh\u00e4ltnis zur F\u00fchrungsgr\u00f6\u00dfe ( \\(w\\) ), desto heller die Beleuchtung ( \\(u\\) ) Reaktion der Stellgr\u00f6\u00dfe: $ u(t)=K_P \\cdot e(t)$ def p - regler ( e , k_p ): ausgang = e * k_p return ausgang","title":"\ud83e\udde0 Proportional-Regler"},{"location":"3_2_Regelkreis/#aufgabe","text":"Ziel ist der Entwurf eines Reglers zur Steuerung einer Bel\u00fcftungsanlage auf Basis der Schadstoffkonzentration im Raum in ppm Zeichnen Sie den Verlauf der Stellgr\u00f6\u00dfen (Drehzahl der Anlage) f\u00fcr folgende zwei Regler: stetiger Proportionalregler: \\(u(t) = \\frac{2}{min \\cdot ppm} e(t)\\) Regelung nach Logik n\u00e4chste Seite.","title":"\ud83e\udde0 Aufgabe"},{"location":"3_2_Regelkreis/#aufgabe_1","text":"","title":"\ud83e\udde0 Aufgabe"},{"location":"3_2_Regelkreis/#aufgabe_2","text":"def regler ( e , letzte_drehzahl ): if e == 1000 : drehzahl = letzte_drehzahl else : if e > 1000 : drehzahl = e else : drehzahl = 0 return drehzahl","title":"\ud83e\udde0 Aufgabe"},{"location":"3_2_Regelkreis/#zusammenfassung-p-regler","text":"P-Glied, welches als Regler eingesetzt wird Zeitverhalten: reagiert unverz\u00f6gert bleibende Regelabweichung bei Systemen mit Ausgleich (Regelstrecken die bei konstantem Eingang einen konstanten Wert anstreben)","title":"Zusammenfassung P-Regler"},{"location":"3_2_Regelkreis/#aufgabe-3_2_2-wassertank-mit-pid-regler","text":"Entfernen Sie den I und D-Anteil des PID-Reglers und beobachten Sie die Reaktion des Systems","title":"\u270d\ufe0f Aufgabe 3_2_2: Wassertank mit PID-Regler"},{"location":"3_2_Regelkreis/#integral-regler","text":"Antwort \\(u(t)\\) auf Sprung unmittelbar, jedoch nicht sofort mit voller St\u00e4rke Je l\u00e4nger ( \\(t\\) ) die Regelabweichung besteht und umso gr\u00f6\u00dfer sie ist, desto st\u00e4rker die Antwort \\(u(t)=\\frac{1}{T_n}\\int_0^te(\\tau)d\\tau\\)","title":"\ud83e\udde0 Integral-Regler"},{"location":"3_2_Regelkreis/#abbildung-rechts-ist-reaktion-auf-sprungfunktion","text":"\\(u(t)=\\frac{1}{T_n}\\int_0^te(\\tau)d\\tau\\) \\(u(t)=K_I \\cdot \\int_0^te(\\tau)d\\tau\\) \\(T_n\\) ... Nachstellzeit bestimmt den Gradienten des Anstieges von \\(u\\) summiert die Regelabweichung \u00fcber die Zeit auf Regelabweichungen werden auch bei Strecken mit Ausgleich vollst\u00e4ndig eliminiert , daf\u00fcr langsamer \ud83e\udde0","title":"Abbildung rechts ist Reaktion auf Sprungfunktion"},{"location":"3_2_Regelkreis/#proportional-integral-regler","text":"Sprungantwort: \\(u(t)=K_Pe(t) + K_I \\cdot \\int_0^te(\\tau)d\\tau\\) PI-Regler Kombination aus P- und I-Regler schnelle Reaktion (wie P-Regler) exakte Ausregelung ohne eine bleibende Regelabweichung (wie I-Regler)","title":"\ud83e\udde0 Proportional-Integral-Regler"},{"location":"3_2_Regelkreis/#proportional-differenzial-regler","text":"Sprungantwort: \\(u(t)=K_Pe(t)+K_d \\frac{de(t)}{dt}=K_Pe(t)+T_v \\frac{de(t)}{dt}\\) kombiniert P-Regler mit Differenzial-Anteil der D-Anteil bewertet die \u00c4nderung einer Regelabweichung (differenziert) und berechnet so deren \u00c4nderungsgeschwindigkeit reagiert schon auf \"Ank\u00fcndigungen\" von Ver\u00e4nderungen sehr schnell , doch bleibende Regelabweichung Unruhe im Regelkreis wird verst\u00e4rkt, wenn Sensorsignal verrauscht \ud83e\udde0 \u270d\ufe0f Wie sieht die Reaktion aus?","title":"\ud83e\udde0 Proportional-Differenzial-Regler"},{"location":"3_3_Regelverhalten/","text":"Bussysteme SoSe 2023 Dr. Julian Huber Regelverhalten \ud83e\udde0 PID-Regler universellste der klassischen Regler Der PID-geregelte Kreis ist genau und sehr schnell, deshalb wird er bevorzugt in den meisten Anwendungen eingesetzt \\(u(t)=K_P \\cdot e(t) + \\frac{1}{T_N}\\int_0^te(\\tau)d\\tau + T_v \\frac{de(t)}{dt}\\) Systeme ohne zeitliche Verz\u00f6gerung alle Systeme reagieren unmittelbar auf Ver\u00e4nderungen der Eing\u00e4nge z.B. wird die Lichtst\u00e4rke der Lampe ( \\(u_r\\) ) erh\u00f6ht, erh\u00f6ht sich die Helligkeit im Raum ( \\(y\\) ) Systeme mit zeitlicher Verz\u00f6gerung z.B. mit Erh\u00f6hung des Durchfluss durch die Heizung ( \\(u_r\\) ) erw\u00e4rmt sich der Raum nur langsam ( \\(y\\) ). Das Thermometer gibt die gemessene Temperatur ( \\(y_m\\) ) nur mit Verz\u00f6gerung weiter Bestimmung des dynamischen Verhaltens Ziel der Regelungstechnik ist es ein erw\u00fcnschtes Verhalten der Regelgr\u00f6\u00dfe \\(y\\) zu erhalten Mathematische Beschreibung und Analyse Simulationsprogramme: z.B. Matlab Simulink oder Scilab Xcos https://www.samsongroup.com/document/l102de.pdf Fazit Zeitverhalten von Regelkreisen wird durch alle Komponenten (Zeitverhalten) und die Einstellung des Reglers (gew\u00e4hlte Parameter) beeinflusst komplexere Regelkreise m\u00fcssen als Gesamtheit betrachtet werden Beobachtung am echten System Modellierung durch Vereinfachung (Regelungstechnik) Kalibrierung am realen System Regelverlauf der verschiedenen Reglertypen im Zeitverlauf Reaktion auf Sprungfunktion im einfachen Regelkreis Deutlich wird die bleibende Regelabweichung des P-Reglers Das schnelle Verhalten der Regler mit D-Anteil https://rn-wissen.de/wiki/index.php/Regelungstechnik \ud83e\udde0 Kriterien zur Beurteilung eines Regelkreises F\u00fchrungsverhalten bei Anregung mit Sprungfunktion: Ausregelzeit \\(t_\\epsilon\\) : gibt den Zeitpunkt an, ab dem die Regelabweichung kleiner als eine vorgegebene Schranke \\(\u00b1\\epsilon\\) ist. Maximale \u00dcberschwingweite \\(e_{max}\\) : gibt den Betrag der maximalen Regelabweichung an, die nach dem erstmaligen Erreichen des Sollwertes auftritt https://srv.ifr.ing.tu-bs.de/static/files/lehre/vorlesungen/gdr/Skript_GdR.pdf \ud83e\udde0 Kriterien zur Beurteilung eines Regelkreises Regelfl\u00e4che : Die Fl\u00e4che zwischen F\u00fchrungsgr\u00f6\u00dfe und Ist-Wert kann als Ma\u00df definiert werden. Besonders sinnvoll ist die Beurteilung mittels der Regelfl\u00e4che allerdings nur, wenn kein \u00dcberschwingen auftritt Alternativ z.B. Absolutwert des Integrals der Regelfl\u00e4che https://srv.ifr.ing.tu-bs.de/static/files/lehre/vorlesungen/gdr/Skript_GdR.pdf Praktische \u00dcberlegungen Um eine gew\u00fcnschtes Regelverhalten zu erreichen, muss ein geeigneter Regler mit den passenden Faktoren (z.B. Verst\u00e4rkungsfaktor \\(K_P\\) ) ausgew\u00e4hlt oder kalibriert werden. Hier l\u00e4sst sich entweder ein Modell der Regelstrecke bilden. In der Praxis werden Regelkreise h\u00e4ufig durch Ausprobieren von Reglereinstellungen eines PID-Regler kalibriert. \ud83e\udd13 Praktische \u00dcberlegungen PID-Regler https://de.wikipedia.org/wiki/Faustformelverfahren_(Automatisierungstechnik) \ud83e\udde0 Aufgabe Welchen Reglerverlauf w\u00fcnschen Sie sich f\u00fcr folgende Anwendungen - Startoptimierung der Raumtemperatur (unter Energieffizienzgesichtspunkten) - Konstantlichtregelung (Beleuchtung aus Komfortgesichtspunkten) - Bewegungssteuerung eines Laufroboters https://de.wikipedia.org/wiki/Faustformelverfahren_(Automatisierungstechnik) Aufgabe Welchen Reglerverlauf w\u00fcnschen Sie sich f\u00fcr folgende Anwendungen - Startoptimierung der Raumtemperatur (unter Energieffizinzgesichtspunkten) * Langsam kein \u00dcberschwingen - Konstantlichtregelung (Beleuchtung aus Komfortgesichtspunkten) * Langsam kein \u00dcberschwingen - Bewegungssteuerung eines Laufroboters * Schnell, minimales \u00dcberschwingen https://de.wikipedia.org/wiki/Faustformelverfahren_(Automatisierungstechnik) Hardware PID-Regler https://www.reichelt.at/at/de/pid-regler-quantrol-lc100-5--55-c-quan-lc100-d-24-p147710.html?PROVID=2807 Software Baustein PID-Regler Eing\u00e4nge rW : Sollwert rX : Istwert Eingangsparameter rKp : Proportionalfaktor Verst\u00e4rkung tTi : Integrierzeit [s] tTv : Vorhaltezeit [s] Ausg\u00e4nge rY : Stellgr\u00f6\u00dfe rXW : Regelabweichung https://infosys.beckhoff.com/index.php?content=../content/1031/tf8000_tc3_hvac/4685059723.html&id= Methode von Ziegler und Nichols heuristisches Verfahren zur Bestimmung von Reglerparametern nur f\u00fcr existierenden stabile Anlagen geeignet oder bei denen instabiles Verhalten keine Sch\u00e4den verursachen kann Eigenschaft Regelstrecke und P-Regler dynamischen Eigenschaften h\u00e4ngen stark vom Verst\u00e4rkungsfaktor ( \\(K_P\\) ) des Gesamtsystems ab. Ab bestimmtem \\(K_P^{krit}\\) beginnt die Regelgr\u00f6\u00dfe zu schwingen (Stabilit\u00e4tsgrenze) http://www.chemgapedia.de/vsengine/vlu/vsc/de/ch/7/tc/regelung/grundlagen/regelung_grundlagen.vlu/Page/vsc/de/ch/7/tc/regelung/grundlagen/regparam/regparam.vscml.html Umformung mit Vorhalt- und Nachstellzeit f\u00fcr PID-Regler: Neben der Darstellung mit Vorhalte- und Nachhaltezeit findet sich auch h\u00e4ufig eine Darstellung mit Faktoren ( \\(K\\) ): \\(u(t)=K_P \\cdot e(t) + \\frac{1}{T_N}\\int_0^te(\\tau)d\\tau + T_v \\frac{de(t)}{dt}\\) \\(u(t)=K_P e(t) + K_I\\int_0^te(\\tau)d\\tau + K_d \\frac{de(t)}{dt}\\) \\(u(t)=K_P \\cdot [e(t) + \\frac{K_I}{K_P}\\int_0^te(\\tau)d\\tau + \\frac{K_D}{K_P} \\frac{de(t)}{dt}]\\) Vorgehen Methode von Ziegler und Nichols (I) Voreinstellung des Reglers als reiner P-Regler: \\(K_I=0\\) , \\(K_D=0\\) bzw. \\(T_v=0\\) , \\(T_n=\u221e\\) \\(u(t)=K_P e(t) + K_I\\int_0^te(\\tau)d\\tau + K_D \\frac{de(t)}{dt}\\) \\(u(t)=K_P \\cdot [e(t) + \\frac{1}{T_N}\\int_0^te(\\tau)d\\tau + T_v \\frac{de(t)}{dt}]\\) Methode von Ziegler und Nichols (II) * Erh\u00f6hung von \\(K_P\\) (beginnend mit kleinen Werten von \\(K_P\\) ) bis zur Stabilit\u00e4tsgrenze (die Regelgr\u00f6\u00dfe \\(x\\) beginnt gleichma\u00dfig mit konstanter Amplitude zu schwingen) * Ablesen von \\(K_P^{krit}\\) Messung der beobachtbaren Periodendauer \\(T^{krit}\\) * Berechnung der Reglerparameter ( \\(K_P\\) , \\(T_n\\) , \\(T_v\\) ) entsprechend den folgenden Regeln: Ziegler, John G., and Nathaniel B. Nichols. \"Optimum settings for automatic controllers.\" trans. ASME 64.11 (1942) Einstellregeln nach Ziegler und Nichols (III) \\(K_P\\) \\(T_n\\) \\(T_v\\) P-Regler \\(K_P = K_P^{krit} \\cdot 0,5\\) PI-Regler \\(K_P\\) = \\(K_P^{krit} \\cdot 0,45\\) \\(T_n=0,85 \\cdot T^{krit}\\) PID-Regler \\(K_P\\) = \\(K_P^{krit} \\cdot 0,6\\) \\(T_n=0,5 \\cdot T^{krit}\\) \\(T_v=0,12 \\cdot T^{krit}\\) \u270d\ufe0f Aufgabe 3_2_1: Colab","title":"Regelverhalten"},{"location":"3_3_Regelverhalten/#bussysteme","text":"SoSe 2023 Dr. Julian Huber","title":"Bussysteme"},{"location":"3_3_Regelverhalten/#regelverhalten","text":"","title":"Regelverhalten"},{"location":"3_3_Regelverhalten/#pid-regler","text":"universellste der klassischen Regler Der PID-geregelte Kreis ist genau und sehr schnell, deshalb wird er bevorzugt in den meisten Anwendungen eingesetzt \\(u(t)=K_P \\cdot e(t) + \\frac{1}{T_N}\\int_0^te(\\tau)d\\tau + T_v \\frac{de(t)}{dt}\\)","title":"\ud83e\udde0 PID-Regler"},{"location":"3_3_Regelverhalten/#systeme-ohne-zeitliche-verzogerung","text":"alle Systeme reagieren unmittelbar auf Ver\u00e4nderungen der Eing\u00e4nge z.B. wird die Lichtst\u00e4rke der Lampe ( \\(u_r\\) ) erh\u00f6ht, erh\u00f6ht sich die Helligkeit im Raum ( \\(y\\) )","title":"Systeme ohne zeitliche Verz\u00f6gerung"},{"location":"3_3_Regelverhalten/#systeme-mit-zeitlicher-verzogerung","text":"z.B. mit Erh\u00f6hung des Durchfluss durch die Heizung ( \\(u_r\\) ) erw\u00e4rmt sich der Raum nur langsam ( \\(y\\) ). Das Thermometer gibt die gemessene Temperatur ( \\(y_m\\) ) nur mit Verz\u00f6gerung weiter","title":"Systeme mit zeitlicher Verz\u00f6gerung"},{"location":"3_3_Regelverhalten/#bestimmung-des-dynamischen-verhaltens","text":"Ziel der Regelungstechnik ist es ein erw\u00fcnschtes Verhalten der Regelgr\u00f6\u00dfe \\(y\\) zu erhalten Mathematische Beschreibung und Analyse Simulationsprogramme: z.B. Matlab Simulink oder Scilab Xcos","title":"Bestimmung des dynamischen Verhaltens"},{"location":"3_3_Regelverhalten/#httpswwwsamsongroupcomdocumentl102depdf","text":"","title":"https://www.samsongroup.com/document/l102de.pdf"},{"location":"3_3_Regelverhalten/#fazit","text":"Zeitverhalten von Regelkreisen wird durch alle Komponenten (Zeitverhalten) und die Einstellung des Reglers (gew\u00e4hlte Parameter) beeinflusst komplexere Regelkreise m\u00fcssen als Gesamtheit betrachtet werden Beobachtung am echten System Modellierung durch Vereinfachung (Regelungstechnik) Kalibrierung am realen System","title":"Fazit"},{"location":"3_3_Regelverhalten/#regelverlauf-der-verschiedenen-reglertypen-im-zeitverlauf","text":"Reaktion auf Sprungfunktion im einfachen Regelkreis Deutlich wird die bleibende Regelabweichung des P-Reglers Das schnelle Verhalten der Regler mit D-Anteil","title":"Regelverlauf der verschiedenen Reglertypen im Zeitverlauf"},{"location":"3_3_Regelverhalten/#httpsrn-wissendewikiindexphpregelungstechnik","text":"","title":"https://rn-wissen.de/wiki/index.php/Regelungstechnik"},{"location":"3_3_Regelverhalten/#kriterien-zur-beurteilung-eines-regelkreises","text":"F\u00fchrungsverhalten bei Anregung mit Sprungfunktion: Ausregelzeit \\(t_\\epsilon\\) : gibt den Zeitpunkt an, ab dem die Regelabweichung kleiner als eine vorgegebene Schranke \\(\u00b1\\epsilon\\) ist. Maximale \u00dcberschwingweite \\(e_{max}\\) : gibt den Betrag der maximalen Regelabweichung an, die nach dem erstmaligen Erreichen des Sollwertes auftritt","title":"\ud83e\udde0 Kriterien zur Beurteilung eines Regelkreises"},{"location":"3_3_Regelverhalten/#httpssrvifringtu-bsdestaticfileslehrevorlesungengdrskript_gdrpdf","text":"","title":"https://srv.ifr.ing.tu-bs.de/static/files/lehre/vorlesungen/gdr/Skript_GdR.pdf"},{"location":"3_3_Regelverhalten/#kriterien-zur-beurteilung-eines-regelkreises_1","text":"Regelfl\u00e4che : Die Fl\u00e4che zwischen F\u00fchrungsgr\u00f6\u00dfe und Ist-Wert kann als Ma\u00df definiert werden. Besonders sinnvoll ist die Beurteilung mittels der Regelfl\u00e4che allerdings nur, wenn kein \u00dcberschwingen auftritt Alternativ z.B. Absolutwert des Integrals der Regelfl\u00e4che","title":"\ud83e\udde0 Kriterien zur Beurteilung eines Regelkreises"},{"location":"3_3_Regelverhalten/#httpssrvifringtu-bsdestaticfileslehrevorlesungengdrskript_gdrpdf_1","text":"","title":"https://srv.ifr.ing.tu-bs.de/static/files/lehre/vorlesungen/gdr/Skript_GdR.pdf"},{"location":"3_3_Regelverhalten/#praktische-uberlegungen","text":"Um eine gew\u00fcnschtes Regelverhalten zu erreichen, muss ein geeigneter Regler mit den passenden Faktoren (z.B. Verst\u00e4rkungsfaktor \\(K_P\\) ) ausgew\u00e4hlt oder kalibriert werden. Hier l\u00e4sst sich entweder ein Modell der Regelstrecke bilden. In der Praxis werden Regelkreise h\u00e4ufig durch Ausprobieren von Reglereinstellungen eines PID-Regler kalibriert.","title":"Praktische \u00dcberlegungen"},{"location":"3_3_Regelverhalten/#praktische-uberlegungen-pid-regler","text":"","title":"\ud83e\udd13 Praktische \u00dcberlegungen PID-Regler"},{"location":"3_3_Regelverhalten/#httpsdewikipediaorgwikifaustformelverfahren_automatisierungstechnik","text":"","title":"https://de.wikipedia.org/wiki/Faustformelverfahren_(Automatisierungstechnik)"},{"location":"3_3_Regelverhalten/#aufgabe","text":"Welchen Reglerverlauf w\u00fcnschen Sie sich f\u00fcr folgende Anwendungen - Startoptimierung der Raumtemperatur (unter Energieffizienzgesichtspunkten) - Konstantlichtregelung (Beleuchtung aus Komfortgesichtspunkten) - Bewegungssteuerung eines Laufroboters","title":"\ud83e\udde0 Aufgabe"},{"location":"3_3_Regelverhalten/#httpsdewikipediaorgwikifaustformelverfahren_automatisierungstechnik_1","text":"","title":"https://de.wikipedia.org/wiki/Faustformelverfahren_(Automatisierungstechnik)"},{"location":"3_3_Regelverhalten/#aufgabe_1","text":"Welchen Reglerverlauf w\u00fcnschen Sie sich f\u00fcr folgende Anwendungen - Startoptimierung der Raumtemperatur (unter Energieffizinzgesichtspunkten) * Langsam kein \u00dcberschwingen - Konstantlichtregelung (Beleuchtung aus Komfortgesichtspunkten) * Langsam kein \u00dcberschwingen - Bewegungssteuerung eines Laufroboters * Schnell, minimales \u00dcberschwingen","title":"Aufgabe"},{"location":"3_3_Regelverhalten/#httpsdewikipediaorgwikifaustformelverfahren_automatisierungstechnik_2","text":"","title":"https://de.wikipedia.org/wiki/Faustformelverfahren_(Automatisierungstechnik)"},{"location":"3_3_Regelverhalten/#hardware-pid-regler","text":"","title":"Hardware PID-Regler"},{"location":"3_3_Regelverhalten/#httpswwwreicheltatatdepid-regler-quantrol-lc100-5-55-c-quan-lc100-d-24-p147710htmlprovid2807","text":"","title":"https://www.reichelt.at/at/de/pid-regler-quantrol-lc100-5--55-c-quan-lc100-d-24-p147710.html?PROVID=2807"},{"location":"3_3_Regelverhalten/#software-baustein-pid-regler","text":"Eing\u00e4nge rW : Sollwert rX : Istwert Eingangsparameter rKp : Proportionalfaktor Verst\u00e4rkung tTi : Integrierzeit [s] tTv : Vorhaltezeit [s] Ausg\u00e4nge rY : Stellgr\u00f6\u00dfe rXW : Regelabweichung","title":"Software Baustein PID-Regler"},{"location":"3_3_Regelverhalten/#httpsinfosysbeckhoffcomindexphpcontentcontent1031tf8000_tc3_hvac4685059723htmlid","text":"","title":"https://infosys.beckhoff.com/index.php?content=../content/1031/tf8000_tc3_hvac/4685059723.html&amp;id="},{"location":"3_3_Regelverhalten/#methode-von-ziegler-und-nichols","text":"heuristisches Verfahren zur Bestimmung von Reglerparametern nur f\u00fcr existierenden stabile Anlagen geeignet oder bei denen instabiles Verhalten keine Sch\u00e4den verursachen kann Eigenschaft Regelstrecke und P-Regler dynamischen Eigenschaften h\u00e4ngen stark vom Verst\u00e4rkungsfaktor ( \\(K_P\\) ) des Gesamtsystems ab. Ab bestimmtem \\(K_P^{krit}\\) beginnt die Regelgr\u00f6\u00dfe zu schwingen (Stabilit\u00e4tsgrenze)","title":"Methode von Ziegler und Nichols"},{"location":"3_3_Regelverhalten/#httpwwwchemgapediadevsenginevluvscdech7tcregelunggrundlagenregelung_grundlagenvlupagevscdech7tcregelunggrundlagenregparamregparamvscmlhtml","text":"","title":"http://www.chemgapedia.de/vsengine/vlu/vsc/de/ch/7/tc/regelung/grundlagen/regelung_grundlagen.vlu/Page/vsc/de/ch/7/tc/regelung/grundlagen/regparam/regparam.vscml.html"},{"location":"3_3_Regelverhalten/#umformung-mit-vorhalt-und-nachstellzeit-fur-pid-regler","text":"Neben der Darstellung mit Vorhalte- und Nachhaltezeit findet sich auch h\u00e4ufig eine Darstellung mit Faktoren ( \\(K\\) ): \\(u(t)=K_P \\cdot e(t) + \\frac{1}{T_N}\\int_0^te(\\tau)d\\tau + T_v \\frac{de(t)}{dt}\\) \\(u(t)=K_P e(t) + K_I\\int_0^te(\\tau)d\\tau + K_d \\frac{de(t)}{dt}\\) \\(u(t)=K_P \\cdot [e(t) + \\frac{K_I}{K_P}\\int_0^te(\\tau)d\\tau + \\frac{K_D}{K_P} \\frac{de(t)}{dt}]\\)","title":"Umformung mit Vorhalt- und Nachstellzeit f\u00fcr PID-Regler:"},{"location":"3_3_Regelverhalten/#vorgehen-methode-von-ziegler-und-nichols-i","text":"Voreinstellung des Reglers als reiner P-Regler: \\(K_I=0\\) , \\(K_D=0\\) bzw. \\(T_v=0\\) , \\(T_n=\u221e\\) \\(u(t)=K_P e(t) + K_I\\int_0^te(\\tau)d\\tau + K_D \\frac{de(t)}{dt}\\) \\(u(t)=K_P \\cdot [e(t) + \\frac{1}{T_N}\\int_0^te(\\tau)d\\tau + T_v \\frac{de(t)}{dt}]\\)","title":"Vorgehen Methode von Ziegler und Nichols (I)"},{"location":"3_3_Regelverhalten/#methode-von-ziegler-und-nichols-ii","text":"* Erh\u00f6hung von \\(K_P\\) (beginnend mit kleinen Werten von \\(K_P\\) ) bis zur Stabilit\u00e4tsgrenze (die Regelgr\u00f6\u00dfe \\(x\\) beginnt gleichma\u00dfig mit konstanter Amplitude zu schwingen) * Ablesen von \\(K_P^{krit}\\) Messung der beobachtbaren Periodendauer \\(T^{krit}\\) * Berechnung der Reglerparameter ( \\(K_P\\) , \\(T_n\\) , \\(T_v\\) ) entsprechend den folgenden Regeln:","title":"Methode von Ziegler und Nichols (II)"},{"location":"3_3_Regelverhalten/#ziegler-john-g-and-nathaniel-b-nichols-optimum-settings-for-automatic-controllers-trans-asme-6411-1942","text":"","title":"Ziegler, John G., and Nathaniel B. Nichols. \"Optimum settings for automatic controllers.\" trans. ASME 64.11 (1942)"},{"location":"3_3_Regelverhalten/#einstellregeln-nach-ziegler-und-nichols-iii","text":"\\(K_P\\) \\(T_n\\) \\(T_v\\) P-Regler \\(K_P = K_P^{krit} \\cdot 0,5\\) PI-Regler \\(K_P\\) = \\(K_P^{krit} \\cdot 0,45\\) \\(T_n=0,85 \\cdot T^{krit}\\) PID-Regler \\(K_P\\) = \\(K_P^{krit} \\cdot 0,6\\) \\(T_n=0,5 \\cdot T^{krit}\\) \\(T_v=0,12 \\cdot T^{krit}\\)","title":"Einstellregeln nach Ziegler und Nichols (III)"},{"location":"3_3_Regelverhalten/#aufgabe-3_2_1","text":"Colab","title":"\u270d\ufe0f Aufgabe 3_2_1:"},{"location":"4_1_Speicherprogrammierbare_Steuerung/","text":"Bussysteme SoSe 2023 Dr. Julian Huber Schalter vs. Taster Ein Schalter beh\u00e4lt seine Stellung nach dem Bet\u00e4tigen bei. Ein Taster springt in die Ausgangslage Wahrheitstabelle Annahme: Schalter mit zwei Zust\u00e4nden S1 S2 H1 0 0 1 0 1 0 1 0 0 1 1 1 \\(H1 = \\lnot (S1 \\oplus S2)\\) State Diagram stateDiagram-v2 s1: Licht aus - Schalter 1 = off, Schalter = 2 off s2: Licht an - Schalter 1 = on, Schalter 2 = off s3: Licht an - Schalter 1 = off, Schalter 2 = on s4: Licht aus - Schalter 1 = on, Schalter 2 = on s1--> s2: Schalter 1 = on s2--> s1: Schalter 1 = off s1--> s3: Schalter 2 = on s3--> s1: Schalter 2 = off s4--> s3: Schalter 1 = off s3--> s4: Schalter 1 = on s2 --> s4: Schalter 2 = on s4 --> s2: Schalter 2 = off https://mermaid.live/ L\u00f6sung \"Industrie 2.0\" S1, S2: Schalter mit zwei Zust\u00e4nden H1: Gl\u00fchlampe Wechselschaltung https://cdn-reichelt.de/documents/datenblatt/TIPP/Elektroinstallation(Kopp).pdf Direkte verbindungsprogrammierte Steuerung Steuerung auf Basis des Stomkreises (z.B. Wechselschaltung bei Lichtschalter) \u00dcberall liegt die hohe (ggf. gef\u00e4hrliche ) Spannung an Verdrahtungsaufwand (z.B. Kreuzschaltung f\u00fcr mehr als 2 Schalter) die Fehlersuche sehr m\u00fchselig Bestimmte sicherheitsrelevante Funktionen (z. B. Not-Aus) L\u00f6sung \"Industrie 2.1\" Entkopplung von Steuerstrom und Laststromkreis durch Relais oder Sch\u00fctz Steuerstromkreis hat i.d.R. niedrigere Spannung Verbindungsprogrammierte Steuerung mit logischen Komponenten In diesem Fall wird ein Stromsto\u00dfschalter verbaut: Bei jeder Bet\u00e4tigung eines der Taster (S) wird der Zustand von K1 gewechselt Zwei oder mehrere Schalter S k\u00f6nnen parallel geschaltet werden Verringertet Verdrahtungsaufwand, erh\u00f6hte Wartbarkeit A1 - A2 : Schlie\u00dfen des Steuerkreises l\u00f6st eine Sprungfunktion in der Spannung und Strom aus (Flanke) 1 - 2 wird geschlossen https://de.wikipedia.org/wiki/Liste_der_Schaltzeichen_(Elektrik/Elektronik), https://www.eltako.com/fileadmin/downloads/de/Gesamtkatalog/Eltako_Gesamtkatalog_Kap11_low_res.pdf A1 - A2 : Schlie\u00dfen des Steuerkreises l\u00f6st eine Sprungfunktion in der Spannung und Strom aus (Flanke) *- 1 - 2 wird geschlossen https://de.wikipedia.org/wiki/Liste_der_Schaltzeichen_(Elektrik/Elektronik), https://www.eltako.com/fileadmin/downloads/de/Gesamtkatalog/Eltako_Gesamtkatalog_Kap11_low_res.pdf Stromsto\u00dfschalter https://cdn-reichelt.de/documents/datenblatt/TIPP/Elektroinstallation(Kopp).pdf L\u00f6sung Industrie 3.0 Logikbausteine werden durch Computer mit Ein- ( bIn1 ) und Ausg\u00e4ngen ( bOut1 ) ersetzt Computer erfasst, ob an Eing\u00e4ngen eine Spannung anliegt Computer setzt Spannung auf Ausg\u00e4nge def taster ( s1 , s2 , status_lampe ): if ( s1 or s1 ): return not ( status_lampe ) else : return status_lampe bOut1 = stromstossschalter ( s1 , s2 , status_lampe ) \ud83e\udde0 Aufbau SPS - Loxone Mini Server https://www.loxone.com/dede/produkte/gebaeude-und-hausautomation-miniserver/ \ud83e\udde0 Aufbau SPS - Siemens Logo \ud83e\udde0 Aufbau SPS - Beckhoff \ud83e\udde0 Aufbau SPS Eingang / Ausgang: Schaltende Verbindungen zwischen 0 und 24V Stromversorgung Powerkontakt 24V (L+): SPS arbeitet wegen Bauraum und Sicherheit mit 24V Gleichstrom Powerkontakt 0V (L-): Masse als 0 Potential f\u00fcr die Schaltung definiert Powerkontakt PE: Schutzleiter mit Potential-Erde, 0V sollte auf PE gelegt werden Ausg\u00e4nge + und - zur weiterverteilung \ud83e\udde0 Industrie 3.0 Zentrale SPS -Speicherprogrammierbare Steuerung die Steuerungsfunktionen sind als Programme in einem Speicher enthalten Flexibilit\u00e4t : Einfacher Austausch von Programmen Mehrere Funktionen auf einem Ger\u00e4t Geringer Platzbedarf , H\u00f6here Zuverl\u00e4ssigkeit, Geringere Kosten Vernetzung mit anderen Systemen, Fernwartung Fehlerdiagnose https://www.xplore-dna.net/mod/page/view.php?id=294 \ud83e\udde0 Aufbau einer SPS https://www.xplore-dna.net/mod/page/view.php?id=294 Anbringung meist an Hutschiene ( modular ) Rechen- und Speichereinheit oft Anbindung an Bus-System Ein oder mehrere Signalmodule Empfang Sensordaten ( Eing\u00e4nge ) Versand Steuerbefehle ( Ausg\u00e4nge ) \ud83e\udde0 Zentrales System Single Point of Failure h\u00e4ufig sternf\u00f6rmige Verkalbelung https://de.wikipedia.org/wiki/Nervensystem \ud83e\udde0 Dezentrales System kein Single Point of Failure andere Topologien m\u00f6glich https://quizizz.com/admin/quiz/605a064f172bf7001b1ea35d/tintenfische Steuerung mit Bus-System Zentrale SPS wird durch mehrere dezentrale Contoller ersetzt Diese kommunizieren \u00fcber Telegramme in einem standardtisierten Protokoll miteinander Anstelle von bin\u00e4ren Schaltinformationen werden Bitfolgen \u00fcbertragen Mischformen sind m\u00f6glich! 1 Speicherprogrammierbare Steuerung (SPS) \ud83c\udfaf Lernziele Nach dieser Einheit sind Sie in der Lage dazu - zwischen digitalen und analogen Ein- und Ausg\u00e4ngen zu unterscheiden - geeignete Ein- und Ausg\u00e4nge zu Sensoren auszuw\u00e4hlen - und anzuschlie\u00dfen Messkette: Elektronische Sicht der Steuerung Sensoren wandeln den Zustand eines Prozesses in ein elektrisches Signal um Die Steuerung und Regelung erfolgt elektronisch oder digital oder in einem rechnergest\u00fctzten Ger\u00e4t ( Steuerungseinheit ) Aktoren werden zur Beeinflussung von Systemen eingesetzt https://mermaid.live/edit#pako:eNp1UMtqw0AM_BWj0wZsQpo-wIeAwZdCQqGGFtrtQXhle4m9a2QtpYT8Tf-kP9ZNg6GlRCdpNBpJc4DaG4Icmt6_1x2yJNtH7ZIY1qxeK3KT57ckyzaxvlJPxJN8ffKeeBExa9aqWJbZMzrTz9C1qoQCcXDtRNZ1ZOXcuFHlsvjLvf2veKeKvXhezEesV6q0rRWMQ8m9G4NcXjPPXD7ht9hDkJMapDAQD2hNtOFwktAgHQ2kIY-poQZDLxq0O0YqBvHVh6shFw6UQhgNCpUWW8YB8gb7KaJkbPxhd7b2x-EURnQv3s-c4zdLjX9a Steuerungseinheit: Aufbau einer SPS https://www.xplore-dna.net/mod/page/view.php?id=294 Anbringung meist an Hutschiene ( modular ) Rechen- und Speichereinheit oft Anbindung an Bus-System Ein oder mehrere Signalmodule Empfang Sensordaten ( Eing\u00e4nge ) Versand Steuerbefehle ( Ausg\u00e4nge ) Aufbau SPS Digitale Ein- und Ausg\u00e4nge kennt nur zwei Zust\u00e4nde ( True / False ) Abgebildet \u00fcber Spannungslevel oder Stromst\u00e4rke https://mermaid.live/edit#pako:eNp1UMtqw0AM_BWj0wZsQpo-wIeAwZdCQqGGFtrtQXhle4m9a2QtpYT8Tf-kP9ZNg6GlRCdpNBpJc4DaG4Icmt6_1x2yJNtH7ZIY1qxeK3KT57ckyzaxvlJPxJN8ffKeeBExa9aqWJbZMzrTz9C1qoQCcXDtRNZ1ZOXcuFHlsvjLvf2veKeKvXhezEesV6q0rRWMQ8m9G4NcXjPPXD7ht9hDkJMapDAQD2hNtOFwktAgHQ2kIY-poQZDLxq0O0YqBvHVh6shFw6UQhgNCpUWW8YB8gb7KaJkbPxhd7b2x-EURnQv3s-c4zdLjX9a Adressierung https://www.xplore-dna.net/mod/page/view.php?id=294 Digitale Ein- und Ausg\u00e4nge schalten und erfassen Spannungen bis 24V (i.d.R.) Jeder digitale Ein- und Ausgang wird durch ein Bit repr\u00e4sentiert ( True : 24V, False : 0V) Eing\u00e4nge werden mit E bzw. I (Input) bezeichnet ( E0.1 ) Ausg\u00e4nge mit A bzw. O/Q (Output) A0.2 Symbolische Adressierung Zur besseren Verst\u00e4ndlichkeit sollten bei der Programmierung sinnvolle Variablennamen eingef\u00fchrt werden, da diese leichter zu interpretieren sind als z.B. Q0.1 . z.B. f\u00fcr ein Automatiklicht bInAnwesenheit F\u00fcr Wert des digitalen Sensors f\u00fcr Anwesenheit an E0.0 bInDunkelheit F\u00fcr Wert des digitalen Sensors f\u00fcr Dunkelheit an E0.1 bOutLicht F\u00fcr digitalen Schalter f\u00fcr Licht an A0.1 Das b steht f\u00fcr einen bin\u00e4ren (digitalen) Ein- oder Ausgang Das In / Out f\u00fcr Ein- oder Ausg\u00e4nge Digitale Ein- und Ausg\u00e4nge https://mermaid.live/edit#pako:eNp1UMtqw0AM_BWj0wZsQpo-wIeAwZdCQqGGFtrtQXhle4m9a2QtpYT8Tf-kP9ZNg6GlRCdpNBpJc4DaG4Icmt6_1x2yJNtH7ZIY1qxeK3KT57ckyzaxvlJPxJN8ffKeeBExa9aqWJbZMzrTz9C1qoQCcXDtRNZ1ZOXcuFHlsvjLvf2veKeKvXhezEesV6q0rRWMQ8m9G4NcXjPPXD7ht9hDkJMapDAQD2hNtOFwktAgHQ2kIY-poQZDLxq0O0YqBvHVh6shFw6UQhgNCpUWW8YB8gb7KaJkbPxhd7b2x-EURnQv3s-c4zdLjX9a Digitaler Eingang Kennt nur Signal oder kein Signal ( Boolean ) z.B. Taster z.B. Fensterkontakt EVA-Prinzip https://upload.wikimedia.org/wikipedia/commons/f/f2/EVA-Prinzip.svg Zyklische Verarbeitung Das EVA-Prinzip wird in regelm\u00e4\u00dfigen Zyklen durchlaufen Einlesen der Eing\u00e4nge Durchf\u00fchren der Verarbeitung Ausgabe der Ausg\u00e4nge Typische Zykluszeiten liegen zwischen einer und zehn Millisekunden Verarbeitungseinheit - CPU Beckhoff Automation Analoge Ein- und Ausg\u00e4nge https://mermaid.live/edit#pako:eNp1UMtqw0AM_BWj0wZsQpo-wIeAwZdCQqGGFtrtQXhle4m9a2QtpYT8Tf-kP9ZNg6GlRCdpNBpJc4DaG4Icmt6_1x2yJNtH7ZIY1qxeK3KT57ckyzaxvlJPxJN8ffKeeBExa9aqWJbZMzrTz9C1qoQCcXDtRNZ1ZOXcuFHlsvjLvf2veKeKvXhezEesV6q0rRWMQ8m9G4NcXjPPXD7ht9hDkJMapDAQD2hNtOFwktAgHQ2kIY-poQZDLxq0O0YqBvHVh6shFw6UQhgNCpUWW8YB8gb7KaJkbPxhd7b2x-EURnQv3s-c4zdLjX9a Analog-Digital Wandler Vorsicht : Auch analoge Signale werden beim Eingang in die Verarbeitungseinheit digitalisiert Die Aufl\u00f6sung analoger Ein- und Ausg\u00e4nge wird in Bit angegeben Analoger Eingang bei vielen Anwendungsf\u00e4llen sind stetige Werte von Interesse: z.B. Temperatur, Helligkeit, etc. Passive Analoge Signale Nutzen Temperaturabh\u00e4ngigkeit eines Widerstands und Ohmsches Gesetz: \\(U=RI\\) Bei gleicher angelegter Spannung, wird temperaturabh\u00e4ngig ein anderer Strom gemessen https://blog.wika.de/know-how/pt100-in-2-3-oder-4-leiter-schaltung/ PT-Widerst\u00e4nde Platin hat ein relativ lineares Verhalten \\(U = 24 V\\) \\(I_m=0.16 A\\) \\(R=\\frac{U}{I_m}=150 \\Omega\\) \\(T \\approx 100\u00b0C\\) Sollten wir den PT-Widerstand direkt mit \\(24 V\\) beaufschlagen? Kennlinie eines Pt100 (100 \\(\\Omega\\) bei 0 \u00b0C) Einsatzgebiete von Verst\u00e4rkern https://mermaid.live/edit#pako:eNp1UMtqw0AM_BWj0wZsQpo-wIeAwZdCQqGGFtrtQXhle4m9a2QtpYT8Tf-kP9ZNg6GlRCdpNBpJc4DaG4Icmt6_1x2yJNtH7ZIY1qxeK3KT57ckyzaxvlJPxJN8ffKeeBExa9aqWJbZMzrTz9C1qoQCcXDtRNZ1ZOXcuFHlsvjLvf2veKeKvXhezEesV6q0rRWMQ8m9G4NcXjPPXD7ht9hDkJMapDAQD2hNtOFwktAgHQ2kIY-poQZDLxq0O0YqBvHVh6shFw6UQhgNCpUWW8YB8gb7KaJkbPxhd7b2x-EURnQv3s-c4zdLjX9a Linearisierung des Signals Anpassung des Signals auf definierten Ausgangsbereich (z.B. 0 .. 20mA, 0 .. 10V) Extra Kosten Sensorspezifisch Aktive Sensoren Integriert Sensor und Verst\u00e4rker Sensor wird mit Spannung versorgt (i.d.R. 24V/DC) Sensor \u00fcbersetzt physikalische Gr\u00f6\u00dfe in ein Ausgangssignal \\(E\\) Skalierung h\u00e4ufig linear oder sogar proportional \\(U(E_v)=E_0 + K_p \\cdot E_v\\) \\(U(E_v)=\\frac{10 V}{100.000 Lux} \\cdot E_v\\) Anschluss aktiver Sensoren Spannungsversorgung \u00fcber GND und 24 V Ausgang LUX wird mit analogem Eingang der SPS verbunden Auswahl Analoge Eing\u00e4nge Spannungssignal: z.B. \\(0...10\\) bzw. \\(-10...10\\) V g\u00fcnstig leicht zu messen (z.B. mit Multimeter) Stromschnittstelle: z.B. 4...20 mA auch bei langen Leitungen unanf\u00e4lliger gegen St\u00f6rungen Erkennen von Drahtbruch (0 A) PT-Eing\u00e4nge: Spezielle Eing\u00e4nge zum Anschluss von PT-Widerst\u00e4nden https://www.beckhoff.com/de-at/produkte/i-o/ethercat-klemmen/el3xxx-analog-eingang/ \ud83e\udd13 Anzahl der Leiter Es gibt Sensoren mit 2, 3, 4 Leitern Zunehmende Messgenauigkeit (Einfluss des Leiterwiderstands kann herausgerechnet werden) Signalformen live zero l\u00e4sst Kabelbruch erkennen https://download.beckhoff.com/download/document/Application_Notes/DK9221-1111-0059.pdf \ud83e\udd13 Single-Ended vs. Differential Single-Ended: alle Sensoren liegen auf dem gleichen V- Potential (nur ein Kabel zur\u00fcck) Differential: jeder Sensor hat sein eigenes V- Potential (weniger St\u00f6ranf\u00e4llig) https://infosys.beckhoff.com/index.php?content=../content/1031/ep3356/1668832651.html&id= Analog-Digital-Wandlung Analog-Digital-Wandlung Signalform: Spannung bipolar SPS kann nur diskrete Werte darstellen Wie hoch ist die Zykluszeit der SPS? Wie viel Bit stehen zur Speicherung eines Wertes zu Verf\u00fcgung? https://chrishoermann.at/analog-digital-wandlung-digital-analog-wandlung/ Abtastung (Sample rate) i.d.R. Zykluszeit der SPS ein Wert pro Zyklus z.B. 10 ms T in ms Beleuchtungsst\u00e4rke in Lux 0 0 10 50000 https://chrishoermann.at/analog-digital-wandlung-digital-analog-wandlung/ Digitalisierung (resolution) https://chrishoermann.at/analog-digital-wandlung-digital-analog-wandlung/ Wie viele Spannungswerte kann der Eingang unterscheiden (resolution) Angabe auf der Klemme: 12 Bit verteilt auf \\(-0-..10\\) V \\(2^{12} = 4096\\) Zust\u00e4nde T in ms Beleuchtungsst\u00e4rke in Lux am Sensor Spannung in V nach Verst\u00e4rker Eingangswert als Integer am A/D-Wandler Beleuchtungsst\u00e4rke in Lux in der Steuerungseinheit 0 0 0 0 0 10 50000 5 2047 50000 https://mermaid.live/edit#pako:eNp1UMtqw0AM_BWj0wZsQpo-wIeAwZdCQqGGFtrtQXhle4m9a2QtpYT8Tf-kP9ZNg6GlRCdpNBpJc4DaG4Icmt6_1x2yJNtH7ZIY1qxeK3KT57ckyzaxvlJPxJN8ffKeeBExa9aqWJbZMzrTz9C1qoQCcXDtRNZ1ZOXcuFHlsvjLvf2veKeKvXhezEesV6q0rRWMQ8m9G4NcXjPPXD7ht9hDkJMapDAQD2hNtOFwktAgHQ2kIY-poQZDLxq0O0YqBvHVh6shFw6UQhgNCpUWW8YB8gb7KaJkbPxhd7b2x-EURnQv3s-c4zdLjX9a Digitalsignal Nach der Umwandlung im Speicher der SPS https://chrishoermann.at/analog-digital-wandlung-digital-analog-wandlung/ T in ms Beleuchtungsst\u00e4rke in Lux 0 0 10 50000 \u270d\ufe0f Aufgabe Ein Helligkeitssensor bildet die gemessenen Helligkeitswerte \u00fcber ein analoges Signal 0...10V ab Die Eingangsschnittstelle verf\u00fcgt \u00fcber eine Aufl\u00f6sung von 12 Bit Wie viele diskrete Helligkeitsstufen gibt es? Was ist der kleinste Spannungsunterschied, der unterschieden werden kann? Analoger Eingang Signal ist eine Stromst\u00e4rke ( 4...20mA ) Signal wird in 12 Bit digitalisiert z.B. Lichtsensor Beispiele f\u00fcr analoge und digitale Signale Eingang Ausgang Digital Taster, ... Kontrollleuchte, ... Analog Temperaturf\u00fchler, ... Elektromotor, ... \u270d\ufe0f Aufgabe In einer L\u00fcftungsanlage soll ein Drucksensor (Druckbereich 0-10 bar) mit einem verbaut werden Wichtig ist hierbei, dass ein Drahtbruch sofort erkannt wird Welches Sensorsignal w\u00e4hlen Sie? Welche Klemme w\u00e4hlen Sie? Was ist die kleinste Druckdifferenz, die Sie an der SPS erfassen k\u00f6nnen? Zeichen Sie, wie sie den Sensor anschlie\u00dfen w\u00fcrden https://www.sensorshop24.de/productpdf/download/file/id/1009/name/Drucktransmitter_G14%2522_oder_G12%2522_f%25C3%25BCr_%25C3%259Cber- und_Unterdruck_mit_Normstecker %25280%25E2%2580%259110V4%25E2%2580%259120mA%2529.pdf/ \u00dcbersicht Klemmen Link L\u00f6sung mit einem Stromsignal (4...20mA) kann ein Drahtbruch sicher erkannt werden Entsprechende Klemme z.B. EL3021 | EtherCAT-Klemme, 1-Kanal-Analog-Eingang, Strom, 4\u202620 mA, 12 Bit, differentiell Single-Ended w\u00e4re ebenfalls m\u00f6glich mehre Eing\u00e4nge w\u00e4re ebenfalls m\u00f6glich L\u00f6sung kleinster m\u00f6glicher Druckunterschied 12 Bit sind \\(2^{12}=4096\\) m\u00f6gliche Zust\u00e4nde Der Messbereich liegt zwischen 0-10 bar \\(\\Delta P_{min}=\\frac{P_{max}-P_{min}}{n}=\\frac{10-0 bar}{4096}=2.44 m bar\\) EL3051 L\u00f6sung EL3051 - single-ended https://download.beckhoff.com/download/Document/io/ethercat-terminals/el30xxde.pdf L\u00f6sung EL3021 - differentiell https://download.beckhoff.com/download/Document/io/ethercat-terminals/el30xxde.pdf Ausg\u00e4nge F\u00fcr Digitale und Analoge Ausg\u00e4nge gelten sie selben Prinzipien \ud83c\udfaf Lernfortschritt Nach dieser Einheit sind Sie in der Lage dazu - zwischen digitalen und analogen Ein- und Ausg\u00e4ngen zu unterscheiden - geeignete Ein- und Ausg\u00e4nge zu Sensoren auszuw\u00e4hlen - und anzuschlie\u00dfen","title":"Speicherprogrammierbare Steuerung"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#bussysteme","text":"SoSe 2023 Dr. Julian Huber","title":"Bussysteme"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#schalter-vs-taster","text":"Ein Schalter beh\u00e4lt seine Stellung nach dem Bet\u00e4tigen bei. Ein Taster springt in die Ausgangslage","title":"Schalter vs. Taster"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#wahrheitstabelle","text":"Annahme: Schalter mit zwei Zust\u00e4nden S1 S2 H1 0 0 1 0 1 0 1 0 0 1 1 1 \\(H1 = \\lnot (S1 \\oplus S2)\\)","title":"Wahrheitstabelle"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#state-diagram","text":"stateDiagram-v2 s1: Licht aus - Schalter 1 = off, Schalter = 2 off s2: Licht an - Schalter 1 = on, Schalter 2 = off s3: Licht an - Schalter 1 = off, Schalter 2 = on s4: Licht aus - Schalter 1 = on, Schalter 2 = on s1--> s2: Schalter 1 = on s2--> s1: Schalter 1 = off s1--> s3: Schalter 2 = on s3--> s1: Schalter 2 = off s4--> s3: Schalter 1 = off s3--> s4: Schalter 1 = on s2 --> s4: Schalter 2 = on s4 --> s2: Schalter 2 = off","title":"State Diagram"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#httpsmermaidlive","text":"","title":"https://mermaid.live/"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#losung-industrie-20","text":"S1, S2: Schalter mit zwei Zust\u00e4nden H1: Gl\u00fchlampe","title":"L\u00f6sung \"Industrie 2.0\""},{"location":"4_1_Speicherprogrammierbare_Steuerung/#wechselschaltung","text":"","title":"Wechselschaltung"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#httpscdn-reicheltdedocumentsdatenblatttippelektroinstallationkopppdf","text":"","title":"https://cdn-reichelt.de/documents/datenblatt/TIPP/Elektroinstallation(Kopp).pdf"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#direkte-verbindungsprogrammierte-steuerung","text":"Steuerung auf Basis des Stomkreises (z.B. Wechselschaltung bei Lichtschalter) \u00dcberall liegt die hohe (ggf. gef\u00e4hrliche ) Spannung an Verdrahtungsaufwand (z.B. Kreuzschaltung f\u00fcr mehr als 2 Schalter) die Fehlersuche sehr m\u00fchselig Bestimmte sicherheitsrelevante Funktionen (z. B. Not-Aus)","title":"Direkte verbindungsprogrammierte Steuerung"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#losung-industrie-21","text":"Entkopplung von Steuerstrom und Laststromkreis durch Relais oder Sch\u00fctz Steuerstromkreis hat i.d.R. niedrigere Spannung","title":"L\u00f6sung \"Industrie 2.1\""},{"location":"4_1_Speicherprogrammierbare_Steuerung/#verbindungsprogrammierte-steuerung-mit-logischen-komponenten","text":"In diesem Fall wird ein Stromsto\u00dfschalter verbaut: Bei jeder Bet\u00e4tigung eines der Taster (S) wird der Zustand von K1 gewechselt Zwei oder mehrere Schalter S k\u00f6nnen parallel geschaltet werden Verringertet Verdrahtungsaufwand, erh\u00f6hte Wartbarkeit A1 - A2 : Schlie\u00dfen des Steuerkreises l\u00f6st eine Sprungfunktion in der Spannung und Strom aus (Flanke) 1 - 2 wird geschlossen","title":"Verbindungsprogrammierte Steuerung mit logischen Komponenten"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#httpsdewikipediaorgwikiliste_der_schaltzeichen_elektrikelektronik-httpswwweltakocomfileadmindownloadsdegesamtkatalogeltako_gesamtkatalog_kap11_low_respdf","text":"A1 - A2 : Schlie\u00dfen des Steuerkreises l\u00f6st eine Sprungfunktion in der Spannung und Strom aus (Flanke) *- 1 - 2 wird geschlossen","title":"https://de.wikipedia.org/wiki/Liste_der_Schaltzeichen_(Elektrik/Elektronik), https://www.eltako.com/fileadmin/downloads/de/Gesamtkatalog/Eltako_Gesamtkatalog_Kap11_low_res.pdf"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#httpsdewikipediaorgwikiliste_der_schaltzeichen_elektrikelektronik-httpswwweltakocomfileadmindownloadsdegesamtkatalogeltako_gesamtkatalog_kap11_low_respdf_1","text":"","title":"https://de.wikipedia.org/wiki/Liste_der_Schaltzeichen_(Elektrik/Elektronik), https://www.eltako.com/fileadmin/downloads/de/Gesamtkatalog/Eltako_Gesamtkatalog_Kap11_low_res.pdf"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#stromstoschalter","text":"","title":"Stromsto\u00dfschalter"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#httpscdn-reicheltdedocumentsdatenblatttippelektroinstallationkopppdf_1","text":"","title":"https://cdn-reichelt.de/documents/datenblatt/TIPP/Elektroinstallation(Kopp).pdf"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#losung-industrie-30","text":"Logikbausteine werden durch Computer mit Ein- ( bIn1 ) und Ausg\u00e4ngen ( bOut1 ) ersetzt Computer erfasst, ob an Eing\u00e4ngen eine Spannung anliegt Computer setzt Spannung auf Ausg\u00e4nge def taster ( s1 , s2 , status_lampe ): if ( s1 or s1 ): return not ( status_lampe ) else : return status_lampe bOut1 = stromstossschalter ( s1 , s2 , status_lampe )","title":"L\u00f6sung Industrie 3.0"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#aufbau-sps-loxone-mini-server","text":"","title":"\ud83e\udde0 Aufbau SPS - Loxone Mini Server"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#httpswwwloxonecomdedeproduktegebaeude-und-hausautomation-miniserver","text":"","title":"https://www.loxone.com/dede/produkte/gebaeude-und-hausautomation-miniserver/"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#aufbau-sps-siemens-logo","text":"","title":"\ud83e\udde0 Aufbau SPS - Siemens Logo"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#aufbau-sps-beckhoff","text":"","title":"\ud83e\udde0 Aufbau SPS - Beckhoff"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#aufbau-sps","text":"Eingang / Ausgang: Schaltende Verbindungen zwischen 0 und 24V Stromversorgung Powerkontakt 24V (L+): SPS arbeitet wegen Bauraum und Sicherheit mit 24V Gleichstrom Powerkontakt 0V (L-): Masse als 0 Potential f\u00fcr die Schaltung definiert Powerkontakt PE: Schutzleiter mit Potential-Erde, 0V sollte auf PE gelegt werden Ausg\u00e4nge + und - zur weiterverteilung","title":"\ud83e\udde0 Aufbau SPS"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#industrie-30-zentrale-sps-speicherprogrammierbare-steuerung","text":"die Steuerungsfunktionen sind als Programme in einem Speicher enthalten Flexibilit\u00e4t : Einfacher Austausch von Programmen Mehrere Funktionen auf einem Ger\u00e4t Geringer Platzbedarf , H\u00f6here Zuverl\u00e4ssigkeit, Geringere Kosten Vernetzung mit anderen Systemen, Fernwartung Fehlerdiagnose","title":"\ud83e\udde0 Industrie 3.0 Zentrale SPS -Speicherprogrammierbare Steuerung"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#httpswwwxplore-dnanetmodpageviewphpid294","text":"","title":"https://www.xplore-dna.net/mod/page/view.php?id=294"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#aufbau-einer-sps","text":"","title":"\ud83e\udde0 Aufbau einer SPS"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#httpswwwxplore-dnanetmodpageviewphpid294_1","text":"Anbringung meist an Hutschiene ( modular ) Rechen- und Speichereinheit oft Anbindung an Bus-System Ein oder mehrere Signalmodule Empfang Sensordaten ( Eing\u00e4nge ) Versand Steuerbefehle ( Ausg\u00e4nge )","title":"https://www.xplore-dna.net/mod/page/view.php?id=294"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#zentrales-system","text":"Single Point of Failure h\u00e4ufig sternf\u00f6rmige Verkalbelung","title":"\ud83e\udde0 Zentrales System"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#httpsdewikipediaorgwikinervensystem","text":"","title":"https://de.wikipedia.org/wiki/Nervensystem"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#dezentrales-system","text":"kein Single Point of Failure andere Topologien m\u00f6glich","title":"\ud83e\udde0 Dezentrales System"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#httpsquizizzcomadminquiz605a064f172bf7001b1ea35dtintenfische","text":"","title":"https://quizizz.com/admin/quiz/605a064f172bf7001b1ea35d/tintenfische"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#steuerung-mit-bus-system","text":"Zentrale SPS wird durch mehrere dezentrale Contoller ersetzt Diese kommunizieren \u00fcber Telegramme in einem standardtisierten Protokoll miteinander Anstelle von bin\u00e4ren Schaltinformationen werden Bitfolgen \u00fcbertragen Mischformen sind m\u00f6glich!","title":"Steuerung mit Bus-System"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#1-speicherprogrammierbare-steuerung-sps","text":"","title":"1 Speicherprogrammierbare Steuerung (SPS)"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#lernziele","text":"Nach dieser Einheit sind Sie in der Lage dazu - zwischen digitalen und analogen Ein- und Ausg\u00e4ngen zu unterscheiden - geeignete Ein- und Ausg\u00e4nge zu Sensoren auszuw\u00e4hlen - und anzuschlie\u00dfen","title":"\ud83c\udfaf Lernziele"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#messkette-elektronische-sicht-der-steuerung","text":"Sensoren wandeln den Zustand eines Prozesses in ein elektrisches Signal um Die Steuerung und Regelung erfolgt elektronisch oder digital oder in einem rechnergest\u00fctzten Ger\u00e4t ( Steuerungseinheit ) Aktoren werden zur Beeinflussung von Systemen eingesetzt","title":"Messkette: Elektronische Sicht der Steuerung"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#httpsmermaidliveeditpakoenp1umtqw0am_bwj0wzsqpo-wieawzdcqqggftrtqxhle4m9a2qtpyt8tf-kp9zng6glrcdpnbpjc4dag4icmt6_1x2yjnth7ziy1qxek3kt57ckyzaxvljpxjn8ffkeebexa9aqwjbzmzrtz9c1qoqccxdtrnz1zoxcufhlsvjlvf2vekekvxhezeesv6q0rrwmq8m9g4ncxjppxd7ht9hdkjmapdaqd2hntofwktaghq2kiy-poqzdlxq0o0yqbvhvh6shfw6uqhgncpuww8yb8gb7kajkbpxhd7b2x-eurnqv3s-c4zdljx9a","text":"","title":"https://mermaid.live/edit#pako:eNp1UMtqw0AM_BWj0wZsQpo-wIeAwZdCQqGGFtrtQXhle4m9a2QtpYT8Tf-kP9ZNg6GlRCdpNBpJc4DaG4Icmt6_1x2yJNtH7ZIY1qxeK3KT57ckyzaxvlJPxJN8ffKeeBExa9aqWJbZMzrTz9C1qoQCcXDtRNZ1ZOXcuFHlsvjLvf2veKeKvXhezEesV6q0rRWMQ8m9G4NcXjPPXD7ht9hDkJMapDAQD2hNtOFwktAgHQ2kIY-poQZDLxq0O0YqBvHVh6shFw6UQhgNCpUWW8YB8gb7KaJkbPxhd7b2x-EURnQv3s-c4zdLjX9a"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#steuerungseinheit-aufbau-einer-sps","text":"","title":"Steuerungseinheit: Aufbau einer SPS"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#httpswwwxplore-dnanetmodpageviewphpid294_2","text":"Anbringung meist an Hutschiene ( modular ) Rechen- und Speichereinheit oft Anbindung an Bus-System Ein oder mehrere Signalmodule Empfang Sensordaten ( Eing\u00e4nge ) Versand Steuerbefehle ( Ausg\u00e4nge )","title":"https://www.xplore-dna.net/mod/page/view.php?id=294"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#aufbau-sps_1","text":"","title":"Aufbau SPS"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#digitale-ein-und-ausgange","text":"kennt nur zwei Zust\u00e4nde ( True / False ) Abgebildet \u00fcber Spannungslevel oder Stromst\u00e4rke","title":"Digitale Ein- und Ausg\u00e4nge"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#httpsmermaidliveeditpakoenp1umtqw0am_bwj0wzsqpo-wieawzdcqqggftrtqxhle4m9a2qtpyt8tf-kp9zng6glrcdpnbpjc4dag4icmt6_1x2yjnth7ziy1qxek3kt57ckyzaxvljpxjn8ffkeebexa9aqwjbzmzrtz9c1qoqccxdtrnz1zoxcufhlsvjlvf2vekekvxhezeesv6q0rrwmq8m9g4ncxjppxd7ht9hdkjmapdaqd2hntofwktaghq2kiy-poqzdlxq0o0yqbvhvh6shfw6uqhgncpuww8yb8gb7kajkbpxhd7b2x-eurnqv3s-c4zdljx9a_1","text":"","title":"https://mermaid.live/edit#pako:eNp1UMtqw0AM_BWj0wZsQpo-wIeAwZdCQqGGFtrtQXhle4m9a2QtpYT8Tf-kP9ZNg6GlRCdpNBpJc4DaG4Icmt6_1x2yJNtH7ZIY1qxeK3KT57ckyzaxvlJPxJN8ffKeeBExa9aqWJbZMzrTz9C1qoQCcXDtRNZ1ZOXcuFHlsvjLvf2veKeKvXhezEesV6q0rRWMQ8m9G4NcXjPPXD7ht9hDkJMapDAQD2hNtOFwktAgHQ2kIY-poQZDLxq0O0YqBvHVh6shFw6UQhgNCpUWW8YB8gb7KaJkbPxhd7b2x-EURnQv3s-c4zdLjX9a"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#adressierung","text":"","title":"Adressierung"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#httpswwwxplore-dnanetmodpageviewphpid294_3","text":"Digitale Ein- und Ausg\u00e4nge schalten und erfassen Spannungen bis 24V (i.d.R.) Jeder digitale Ein- und Ausgang wird durch ein Bit repr\u00e4sentiert ( True : 24V, False : 0V) Eing\u00e4nge werden mit E bzw. I (Input) bezeichnet ( E0.1 ) Ausg\u00e4nge mit A bzw. O/Q (Output) A0.2","title":"https://www.xplore-dna.net/mod/page/view.php?id=294"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#symbolische-adressierung","text":"Zur besseren Verst\u00e4ndlichkeit sollten bei der Programmierung sinnvolle Variablennamen eingef\u00fchrt werden, da diese leichter zu interpretieren sind als z.B. Q0.1 . z.B. f\u00fcr ein Automatiklicht bInAnwesenheit F\u00fcr Wert des digitalen Sensors f\u00fcr Anwesenheit an E0.0 bInDunkelheit F\u00fcr Wert des digitalen Sensors f\u00fcr Dunkelheit an E0.1 bOutLicht F\u00fcr digitalen Schalter f\u00fcr Licht an A0.1 Das b steht f\u00fcr einen bin\u00e4ren (digitalen) Ein- oder Ausgang Das In / Out f\u00fcr Ein- oder Ausg\u00e4nge","title":"Symbolische Adressierung"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#digitale-ein-und-ausgange_1","text":"","title":"Digitale Ein- und Ausg\u00e4nge"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#httpsmermaidliveeditpakoenp1umtqw0am_bwj0wzsqpo-wieawzdcqqggftrtqxhle4m9a2qtpyt8tf-kp9zng6glrcdpnbpjc4dag4icmt6_1x2yjnth7ziy1qxek3kt57ckyzaxvljpxjn8ffkeebexa9aqwjbzmzrtz9c1qoqccxdtrnz1zoxcufhlsvjlvf2vekekvxhezeesv6q0rrwmq8m9g4ncxjppxd7ht9hdkjmapdaqd2hntofwktaghq2kiy-poqzdlxq0o0yqbvhvh6shfw6uqhgncpuww8yb8gb7kajkbpxhd7b2x-eurnqv3s-c4zdljx9a_2","text":"","title":"https://mermaid.live/edit#pako:eNp1UMtqw0AM_BWj0wZsQpo-wIeAwZdCQqGGFtrtQXhle4m9a2QtpYT8Tf-kP9ZNg6GlRCdpNBpJc4DaG4Icmt6_1x2yJNtH7ZIY1qxeK3KT57ckyzaxvlJPxJN8ffKeeBExa9aqWJbZMzrTz9C1qoQCcXDtRNZ1ZOXcuFHlsvjLvf2veKeKvXhezEesV6q0rRWMQ8m9G4NcXjPPXD7ht9hDkJMapDAQD2hNtOFwktAgHQ2kIY-poQZDLxq0O0YqBvHVh6shFw6UQhgNCpUWW8YB8gb7KaJkbPxhd7b2x-EURnQv3s-c4zdLjX9a"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#digitaler-eingang","text":"Kennt nur Signal oder kein Signal ( Boolean ) z.B. Taster z.B. Fensterkontakt","title":"Digitaler Eingang"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#eva-prinzip","text":"","title":"EVA-Prinzip"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#httpsuploadwikimediaorgwikipediacommonsff2eva-prinzipsvg","text":"","title":"https://upload.wikimedia.org/wikipedia/commons/f/f2/EVA-Prinzip.svg"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#zyklische-verarbeitung","text":"Das EVA-Prinzip wird in regelm\u00e4\u00dfigen Zyklen durchlaufen Einlesen der Eing\u00e4nge Durchf\u00fchren der Verarbeitung Ausgabe der Ausg\u00e4nge Typische Zykluszeiten liegen zwischen einer und zehn Millisekunden","title":"Zyklische Verarbeitung"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#verarbeitungseinheit-cpu","text":"","title":"Verarbeitungseinheit - CPU"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#beckhoff-automation","text":"","title":"Beckhoff Automation"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#analoge-ein-und-ausgange","text":"","title":"Analoge Ein- und Ausg\u00e4nge"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#httpsmermaidliveeditpakoenp1umtqw0am_bwj0wzsqpo-wieawzdcqqggftrtqxhle4m9a2qtpyt8tf-kp9zng6glrcdpnbpjc4dag4icmt6_1x2yjnth7ziy1qxek3kt57ckyzaxvljpxjn8ffkeebexa9aqwjbzmzrtz9c1qoqccxdtrnz1zoxcufhlsvjlvf2vekekvxhezeesv6q0rrwmq8m9g4ncxjppxd7ht9hdkjmapdaqd2hntofwktaghq2kiy-poqzdlxq0o0yqbvhvh6shfw6uqhgncpuww8yb8gb7kajkbpxhd7b2x-eurnqv3s-c4zdljx9a_3","text":"","title":"https://mermaid.live/edit#pako:eNp1UMtqw0AM_BWj0wZsQpo-wIeAwZdCQqGGFtrtQXhle4m9a2QtpYT8Tf-kP9ZNg6GlRCdpNBpJc4DaG4Icmt6_1x2yJNtH7ZIY1qxeK3KT57ckyzaxvlJPxJN8ffKeeBExa9aqWJbZMzrTz9C1qoQCcXDtRNZ1ZOXcuFHlsvjLvf2veKeKvXhezEesV6q0rRWMQ8m9G4NcXjPPXD7ht9hDkJMapDAQD2hNtOFwktAgHQ2kIY-poQZDLxq0O0YqBvHVh6shFw6UQhgNCpUWW8YB8gb7KaJkbPxhd7b2x-EURnQv3s-c4zdLjX9a"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#analog-digital-wandler","text":"Vorsicht : Auch analoge Signale werden beim Eingang in die Verarbeitungseinheit digitalisiert Die Aufl\u00f6sung analoger Ein- und Ausg\u00e4nge wird in Bit angegeben","title":"Analog-Digital Wandler"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#analoger-eingang","text":"bei vielen Anwendungsf\u00e4llen sind stetige Werte von Interesse: z.B. Temperatur, Helligkeit, etc.","title":"Analoger Eingang"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#passive-analoge-signale","text":"Nutzen Temperaturabh\u00e4ngigkeit eines Widerstands und Ohmsches Gesetz: \\(U=RI\\) Bei gleicher angelegter Spannung, wird temperaturabh\u00e4ngig ein anderer Strom gemessen","title":"Passive Analoge Signale"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#httpsblogwikadeknow-howpt100-in-2-3-oder-4-leiter-schaltung","text":"","title":"https://blog.wika.de/know-how/pt100-in-2-3-oder-4-leiter-schaltung/"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#pt-widerstande","text":"Platin hat ein relativ lineares Verhalten \\(U = 24 V\\) \\(I_m=0.16 A\\) \\(R=\\frac{U}{I_m}=150 \\Omega\\) \\(T \\approx 100\u00b0C\\) Sollten wir den PT-Widerstand direkt mit \\(24 V\\) beaufschlagen?","title":"PT-Widerst\u00e4nde"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#kennlinie-eines-pt100-100-omega-bei-0-c","text":"","title":"Kennlinie eines Pt100 (100 \\(\\Omega\\) bei 0 \u00b0C)"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#einsatzgebiete-von-verstarkern","text":"","title":"Einsatzgebiete von Verst\u00e4rkern"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#httpsmermaidliveeditpakoenp1umtqw0am_bwj0wzsqpo-wieawzdcqqggftrtqxhle4m9a2qtpyt8tf-kp9zng6glrcdpnbpjc4dag4icmt6_1x2yjnth7ziy1qxek3kt57ckyzaxvljpxjn8ffkeebexa9aqwjbzmzrtz9c1qoqccxdtrnz1zoxcufhlsvjlvf2vekekvxhezeesv6q0rrwmq8m9g4ncxjppxd7ht9hdkjmapdaqd2hntofwktaghq2kiy-poqzdlxq0o0yqbvhvh6shfw6uqhgncpuww8yb8gb7kajkbpxhd7b2x-eurnqv3s-c4zdljx9a_4","text":"Linearisierung des Signals Anpassung des Signals auf definierten Ausgangsbereich (z.B. 0 .. 20mA, 0 .. 10V) Extra Kosten Sensorspezifisch","title":"https://mermaid.live/edit#pako:eNp1UMtqw0AM_BWj0wZsQpo-wIeAwZdCQqGGFtrtQXhle4m9a2QtpYT8Tf-kP9ZNg6GlRCdpNBpJc4DaG4Icmt6_1x2yJNtH7ZIY1qxeK3KT57ckyzaxvlJPxJN8ffKeeBExa9aqWJbZMzrTz9C1qoQCcXDtRNZ1ZOXcuFHlsvjLvf2veKeKvXhezEesV6q0rRWMQ8m9G4NcXjPPXD7ht9hDkJMapDAQD2hNtOFwktAgHQ2kIY-poQZDLxq0O0YqBvHVh6shFw6UQhgNCpUWW8YB8gb7KaJkbPxhd7b2x-EURnQv3s-c4zdLjX9a"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#aktive-sensoren","text":"Integriert Sensor und Verst\u00e4rker Sensor wird mit Spannung versorgt (i.d.R. 24V/DC) Sensor \u00fcbersetzt physikalische Gr\u00f6\u00dfe in ein Ausgangssignal \\(E\\) Skalierung h\u00e4ufig linear oder sogar proportional \\(U(E_v)=E_0 + K_p \\cdot E_v\\) \\(U(E_v)=\\frac{10 V}{100.000 Lux} \\cdot E_v\\)","title":"Aktive Sensoren"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#anschluss-aktiver-sensoren","text":"Spannungsversorgung \u00fcber GND und 24 V Ausgang LUX wird mit analogem Eingang der SPS verbunden","title":"Anschluss aktiver Sensoren"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#auswahl-analoge-eingange","text":"Spannungssignal: z.B. \\(0...10\\) bzw. \\(-10...10\\) V g\u00fcnstig leicht zu messen (z.B. mit Multimeter) Stromschnittstelle: z.B. 4...20 mA auch bei langen Leitungen unanf\u00e4lliger gegen St\u00f6rungen Erkennen von Drahtbruch (0 A) PT-Eing\u00e4nge: Spezielle Eing\u00e4nge zum Anschluss von PT-Widerst\u00e4nden","title":"Auswahl Analoge Eing\u00e4nge"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#httpswwwbeckhoffcomde-atproduktei-oethercat-klemmenel3xxx-analog-eingang","text":"","title":"https://www.beckhoff.com/de-at/produkte/i-o/ethercat-klemmen/el3xxx-analog-eingang/"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#anzahl-der-leiter","text":"Es gibt Sensoren mit 2, 3, 4 Leitern Zunehmende Messgenauigkeit (Einfluss des Leiterwiderstands kann herausgerechnet werden)","title":"\ud83e\udd13 Anzahl der Leiter"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#signalformen","text":"live zero l\u00e4sst Kabelbruch erkennen","title":"Signalformen"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#httpsdownloadbeckhoffcomdownloaddocumentapplication_notesdk9221-1111-0059pdf","text":"","title":"https://download.beckhoff.com/download/document/Application_Notes/DK9221-1111-0059.pdf"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#single-ended-vs-differential","text":"Single-Ended: alle Sensoren liegen auf dem gleichen V- Potential (nur ein Kabel zur\u00fcck) Differential: jeder Sensor hat sein eigenes V- Potential (weniger St\u00f6ranf\u00e4llig)","title":"\ud83e\udd13 Single-Ended vs. Differential"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#httpsinfosysbeckhoffcomindexphpcontentcontent1031ep33561668832651htmlid","text":"","title":"https://infosys.beckhoff.com/index.php?content=../content/1031/ep3356/1668832651.html&amp;id="},{"location":"4_1_Speicherprogrammierbare_Steuerung/#analog-digital-wandlung","text":"","title":"Analog-Digital-Wandlung"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#analog-digital-wandlung_1","text":"Signalform: Spannung bipolar SPS kann nur diskrete Werte darstellen Wie hoch ist die Zykluszeit der SPS? Wie viel Bit stehen zur Speicherung eines Wertes zu Verf\u00fcgung?","title":"Analog-Digital-Wandlung"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#httpschrishoermannatanalog-digital-wandlung-digital-analog-wandlung","text":"","title":"https://chrishoermann.at/analog-digital-wandlung-digital-analog-wandlung/"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#abtastung-sample-rate","text":"i.d.R. Zykluszeit der SPS ein Wert pro Zyklus z.B. 10 ms T in ms Beleuchtungsst\u00e4rke in Lux 0 0 10 50000","title":"Abtastung (Sample rate)"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#httpschrishoermannatanalog-digital-wandlung-digital-analog-wandlung_1","text":"","title":"https://chrishoermann.at/analog-digital-wandlung-digital-analog-wandlung/"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#digitalisierung-resolution","text":"","title":"Digitalisierung (resolution)"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#httpschrishoermannatanalog-digital-wandlung-digital-analog-wandlung_2","text":"Wie viele Spannungswerte kann der Eingang unterscheiden (resolution) Angabe auf der Klemme: 12 Bit verteilt auf \\(-0-..10\\) V \\(2^{12} = 4096\\) Zust\u00e4nde T in ms Beleuchtungsst\u00e4rke in Lux am Sensor Spannung in V nach Verst\u00e4rker Eingangswert als Integer am A/D-Wandler Beleuchtungsst\u00e4rke in Lux in der Steuerungseinheit 0 0 0 0 0 10 50000 5 2047 50000","title":"https://chrishoermann.at/analog-digital-wandlung-digital-analog-wandlung/"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#httpsmermaidliveeditpakoenp1umtqw0am_bwj0wzsqpo-wieawzdcqqggftrtqxhle4m9a2qtpyt8tf-kp9zng6glrcdpnbpjc4dag4icmt6_1x2yjnth7ziy1qxek3kt57ckyzaxvljpxjn8ffkeebexa9aqwjbzmzrtz9c1qoqccxdtrnz1zoxcufhlsvjlvf2vekekvxhezeesv6q0rrwmq8m9g4ncxjppxd7ht9hdkjmapdaqd2hntofwktaghq2kiy-poqzdlxq0o0yqbvhvh6shfw6uqhgncpuww8yb8gb7kajkbpxhd7b2x-eurnqv3s-c4zdljx9a_5","text":"","title":"https://mermaid.live/edit#pako:eNp1UMtqw0AM_BWj0wZsQpo-wIeAwZdCQqGGFtrtQXhle4m9a2QtpYT8Tf-kP9ZNg6GlRCdpNBpJc4DaG4Icmt6_1x2yJNtH7ZIY1qxeK3KT57ckyzaxvlJPxJN8ffKeeBExa9aqWJbZMzrTz9C1qoQCcXDtRNZ1ZOXcuFHlsvjLvf2veKeKvXhezEesV6q0rRWMQ8m9G4NcXjPPXD7ht9hDkJMapDAQD2hNtOFwktAgHQ2kIY-poQZDLxq0O0YqBvHVh6shFw6UQhgNCpUWW8YB8gb7KaJkbPxhd7b2x-EURnQv3s-c4zdLjX9a"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#digitalsignal","text":"Nach der Umwandlung im Speicher der SPS","title":"Digitalsignal"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#httpschrishoermannatanalog-digital-wandlung-digital-analog-wandlung_3","text":"T in ms Beleuchtungsst\u00e4rke in Lux 0 0 10 50000","title":"https://chrishoermann.at/analog-digital-wandlung-digital-analog-wandlung/"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#aufgabe","text":"Ein Helligkeitssensor bildet die gemessenen Helligkeitswerte \u00fcber ein analoges Signal 0...10V ab Die Eingangsschnittstelle verf\u00fcgt \u00fcber eine Aufl\u00f6sung von 12 Bit Wie viele diskrete Helligkeitsstufen gibt es? Was ist der kleinste Spannungsunterschied, der unterschieden werden kann?","title":"\u270d\ufe0f Aufgabe"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#analoger-eingang_1","text":"Signal ist eine Stromst\u00e4rke ( 4...20mA ) Signal wird in 12 Bit digitalisiert z.B. Lichtsensor","title":"Analoger Eingang"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#beispiele-fur-analoge-und-digitale-signale","text":"Eingang Ausgang Digital Taster, ... Kontrollleuchte, ... Analog Temperaturf\u00fchler, ... Elektromotor, ...","title":"Beispiele f\u00fcr analoge und digitale Signale"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#aufgabe_1","text":"In einer L\u00fcftungsanlage soll ein Drucksensor (Druckbereich 0-10 bar) mit einem verbaut werden Wichtig ist hierbei, dass ein Drahtbruch sofort erkannt wird Welches Sensorsignal w\u00e4hlen Sie? Welche Klemme w\u00e4hlen Sie? Was ist die kleinste Druckdifferenz, die Sie an der SPS erfassen k\u00f6nnen? Zeichen Sie, wie sie den Sensor anschlie\u00dfen w\u00fcrden","title":"\u270d\ufe0f Aufgabe"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#httpswwwsensorshop24deproductpdfdownloadfileid1009namedrucktransmitter_g142522_oder_g122522_f25c325bcr_25c3259cber-und_unterdruck_mit_normstecker2528025e22580259110v425e22580259120ma2529pdf","text":"","title":"https://www.sensorshop24.de/productpdf/download/file/id/1009/name/Drucktransmitter_G14%2522_oder_G12%2522_f%25C3%25BCr_%25C3%259Cber-und_Unterdruck_mit_Normstecker%25280%25E2%2580%259110V4%25E2%2580%259120mA%2529.pdf/"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#ubersicht-klemmen","text":"Link","title":"\u00dcbersicht Klemmen"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#losung","text":"mit einem Stromsignal (4...20mA) kann ein Drahtbruch sicher erkannt werden Entsprechende Klemme z.B. EL3021 | EtherCAT-Klemme, 1-Kanal-Analog-Eingang, Strom, 4\u202620 mA, 12 Bit, differentiell Single-Ended w\u00e4re ebenfalls m\u00f6glich mehre Eing\u00e4nge w\u00e4re ebenfalls m\u00f6glich","title":"L\u00f6sung"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#losung_1","text":"kleinster m\u00f6glicher Druckunterschied 12 Bit sind \\(2^{12}=4096\\) m\u00f6gliche Zust\u00e4nde Der Messbereich liegt zwischen 0-10 bar \\(\\Delta P_{min}=\\frac{P_{max}-P_{min}}{n}=\\frac{10-0 bar}{4096}=2.44 m bar\\)","title":"L\u00f6sung"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#el3051","text":"","title":"EL3051"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#losung-el3051-single-ended","text":"","title":"L\u00f6sung EL3051 - single-ended"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#httpsdownloadbeckhoffcomdownloaddocumentioethercat-terminalsel30xxdepdf","text":"","title":"https://download.beckhoff.com/download/Document/io/ethercat-terminals/el30xxde.pdf"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#losung-el3021-differentiell","text":"","title":"L\u00f6sung EL3021 - differentiell"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#httpsdownloadbeckhoffcomdownloaddocumentioethercat-terminalsel30xxdepdf_1","text":"","title":"https://download.beckhoff.com/download/Document/io/ethercat-terminals/el30xxde.pdf"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#ausgange","text":"F\u00fcr Digitale und Analoge Ausg\u00e4nge gelten sie selben Prinzipien","title":"Ausg\u00e4nge"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#lernfortschritt","text":"Nach dieser Einheit sind Sie in der Lage dazu - zwischen digitalen und analogen Ein- und Ausg\u00e4ngen zu unterscheiden - geeignete Ein- und Ausg\u00e4nge zu Sensoren auszuw\u00e4hlen - und anzuschlie\u00dfen","title":"\ud83c\udfaf Lernfortschritt"},{"location":"4_2_Sprachen_nach_IEC_61131-3/","text":"Bussysteme SoSe 2023 Dr. Julian Huber 4_2_Sprachen_nach_IEC_61131-3 Allgmeiner Aufbau eines SPS-Programms Main Programm Funktionsbausteine Funktionsbl\u00f6cke Funktionen Strukturierter Text Funktionsbausteinpl\u00e4ne Latch Flipflop Z\u00e4hler Zeitglieder","title":"Sprachen nach IEC 61131-3"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#bussysteme","text":"SoSe 2023 Dr. Julian Huber","title":"Bussysteme"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#4_2_sprachen_nach_iec_61131-3","text":"","title":"4_2_Sprachen_nach_IEC_61131-3"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#allgmeiner-aufbau-eines-sps-programms","text":"","title":"Allgmeiner Aufbau eines SPS-Programms"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#main","text":"","title":"Main"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#programm","text":"","title":"Programm"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#funktionsbausteine","text":"","title":"Funktionsbausteine"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#funktionsblocke","text":"","title":"Funktionsbl\u00f6cke"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#funktionen","text":"","title":"Funktionen"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#strukturierter-text","text":"","title":"Strukturierter Text"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#funktionsbausteinplane","text":"","title":"Funktionsbausteinpl\u00e4ne"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#latch","text":"","title":"Latch"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#flipflop","text":"","title":"Flipflop"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#zahler","text":"","title":"Z\u00e4hler"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#zeitglieder","text":"","title":"Zeitglieder"},{"location":"5_1_Bussysteme/","text":"Bussysteme SoSe 2023 Dr. Julian Huber Regelverhalten Motivation Funktion hat nur Input und Output aber keinen Speicher / Zustand z.B. wenn wir bei einer Messfunktionen das Signal gl\u00e4tten wollen, m\u00fcssen wir den Zustand speichern Objektorientierung Attribute Methoden Python :writing_hand: Aufgabe: Implementierung eines Aggregators zum Gl\u00e4tten von Messwerten JSON-Darstellung eines Objekts","title":"Bussysteme"},{"location":"5_1_Bussysteme/#bussysteme","text":"SoSe 2023 Dr. Julian Huber","title":"Bussysteme"},{"location":"5_1_Bussysteme/#regelverhalten","text":"","title":"Regelverhalten"},{"location":"5_1_Bussysteme/#motivation","text":"Funktion hat nur Input und Output aber keinen Speicher / Zustand z.B. wenn wir bei einer Messfunktionen das Signal gl\u00e4tten wollen, m\u00fcssen wir den Zustand speichern","title":"Motivation"},{"location":"5_1_Bussysteme/#objektorientierung","text":"","title":"Objektorientierung"},{"location":"5_1_Bussysteme/#attribute","text":"","title":"Attribute"},{"location":"5_1_Bussysteme/#methoden","text":"","title":"Methoden"},{"location":"5_1_Bussysteme/#python","text":"","title":"Python"},{"location":"5_1_Bussysteme/#writing_hand-aufgabe-implementierung-eines-aggregators-zum-glatten-von-messwerten","text":"","title":":writing_hand: Aufgabe: Implementierung eines Aggregators zum Gl\u00e4tten von Messwerten"},{"location":"5_1_Bussysteme/#json-darstellung-eines-objekts","text":"","title":"JSON-Darstellung eines Objekts"},{"location":"5_2_Theoretische_Grundlagen/","text":"Bussysteme SoSe 2023 Dr. Julian Huber Regelverhalten Motivation Funktion hat nur Input und Output aber keinen Speicher / Zustand z.B. wenn wir bei einer Messfunktionen das Signal gl\u00e4tten wollen, m\u00fcssen wir den Zustand speichern Objektorientierung Attribute Methoden Python :writing_hand: Aufgabe: Implementierung eines Aggregators zum Gl\u00e4tten von Messwerten JSON-Darstellung eines Objekts","title":"Theoretische Grundlagen"},{"location":"5_2_Theoretische_Grundlagen/#bussysteme","text":"SoSe 2023 Dr. Julian Huber","title":"Bussysteme"},{"location":"5_2_Theoretische_Grundlagen/#regelverhalten","text":"","title":"Regelverhalten"},{"location":"5_2_Theoretische_Grundlagen/#motivation","text":"Funktion hat nur Input und Output aber keinen Speicher / Zustand z.B. wenn wir bei einer Messfunktionen das Signal gl\u00e4tten wollen, m\u00fcssen wir den Zustand speichern","title":"Motivation"},{"location":"5_2_Theoretische_Grundlagen/#objektorientierung","text":"","title":"Objektorientierung"},{"location":"5_2_Theoretische_Grundlagen/#attribute","text":"","title":"Attribute"},{"location":"5_2_Theoretische_Grundlagen/#methoden","text":"","title":"Methoden"},{"location":"5_2_Theoretische_Grundlagen/#python","text":"","title":"Python"},{"location":"5_2_Theoretische_Grundlagen/#writing_hand-aufgabe-implementierung-eines-aggregators-zum-glatten-von-messwerten","text":"","title":":writing_hand: Aufgabe: Implementierung eines Aggregators zum Gl\u00e4tten von Messwerten"},{"location":"5_2_Theoretische_Grundlagen/#json-darstellung-eines-objekts","text":"","title":"JSON-Darstellung eines Objekts"},{"location":"5_3_Feldbusse/","text":"Bussysteme SoSe 2023 Dr. Julian Huber Regelverhalten Motivation Funktion hat nur Input und Output aber keinen Speicher / Zustand z.B. wenn wir bei einer Messfunktionen das Signal gl\u00e4tten wollen, m\u00fcssen wir den Zustand speichern Objektorientierung Attribute Methoden Python :writing_hand: Aufgabe: Implementierung eines Aggregators zum Gl\u00e4tten von Messwerten JSON-Darstellung eines Objekts","title":"Feldbusse"},{"location":"5_3_Feldbusse/#bussysteme","text":"SoSe 2023 Dr. Julian Huber","title":"Bussysteme"},{"location":"5_3_Feldbusse/#regelverhalten","text":"","title":"Regelverhalten"},{"location":"5_3_Feldbusse/#motivation","text":"Funktion hat nur Input und Output aber keinen Speicher / Zustand z.B. wenn wir bei einer Messfunktionen das Signal gl\u00e4tten wollen, m\u00fcssen wir den Zustand speichern","title":"Motivation"},{"location":"5_3_Feldbusse/#objektorientierung","text":"","title":"Objektorientierung"},{"location":"5_3_Feldbusse/#attribute","text":"","title":"Attribute"},{"location":"5_3_Feldbusse/#methoden","text":"","title":"Methoden"},{"location":"5_3_Feldbusse/#python","text":"","title":"Python"},{"location":"5_3_Feldbusse/#writing_hand-aufgabe-implementierung-eines-aggregators-zum-glatten-von-messwerten","text":"","title":":writing_hand: Aufgabe: Implementierung eines Aggregators zum Gl\u00e4tten von Messwerten"},{"location":"5_3_Feldbusse/#json-darstellung-eines-objekts","text":"","title":"JSON-Darstellung eines Objekts"},{"location":"5_4_Bussysteme_in_der_Geb%C3%A4udeautomation/","text":"Bussysteme SoSe 2023 Dr. Julian Huber Regelverhalten Motivation Funktion hat nur Input und Output aber keinen Speicher / Zustand z.B. wenn wir bei einer Messfunktionen das Signal gl\u00e4tten wollen, m\u00fcssen wir den Zustand speichern Objektorientierung Attribute Methoden Python :writing_hand: Aufgabe: Implementierung eines Aggregators zum Gl\u00e4tten von Messwerten JSON-Darstellung eines Objekts","title":"Bussysteme in der Geb\u00e4udeautomation"},{"location":"5_4_Bussysteme_in_der_Geb%C3%A4udeautomation/#bussysteme","text":"SoSe 2023 Dr. Julian Huber","title":"Bussysteme"},{"location":"5_4_Bussysteme_in_der_Geb%C3%A4udeautomation/#regelverhalten","text":"","title":"Regelverhalten"},{"location":"5_4_Bussysteme_in_der_Geb%C3%A4udeautomation/#motivation","text":"Funktion hat nur Input und Output aber keinen Speicher / Zustand z.B. wenn wir bei einer Messfunktionen das Signal gl\u00e4tten wollen, m\u00fcssen wir den Zustand speichern","title":"Motivation"},{"location":"5_4_Bussysteme_in_der_Geb%C3%A4udeautomation/#objektorientierung","text":"","title":"Objektorientierung"},{"location":"5_4_Bussysteme_in_der_Geb%C3%A4udeautomation/#attribute","text":"","title":"Attribute"},{"location":"5_4_Bussysteme_in_der_Geb%C3%A4udeautomation/#methoden","text":"","title":"Methoden"},{"location":"5_4_Bussysteme_in_der_Geb%C3%A4udeautomation/#python","text":"","title":"Python"},{"location":"5_4_Bussysteme_in_der_Geb%C3%A4udeautomation/#writing_hand-aufgabe-implementierung-eines-aggregators-zum-glatten-von-messwerten","text":"","title":":writing_hand: Aufgabe: Implementierung eines Aggregators zum Gl\u00e4tten von Messwerten"},{"location":"5_4_Bussysteme_in_der_Geb%C3%A4udeautomation/#json-darstellung-eines-objekts","text":"","title":"JSON-Darstellung eines Objekts"},{"location":"5_5_Bussysteme_in_der_MSR-Technik/","text":"Bussysteme SoSe 2023 Dr. Julian Huber Regelverhalten Motivation Funktion hat nur Input und Output aber keinen Speicher / Zustand z.B. wenn wir bei einer Messfunktionen das Signal gl\u00e4tten wollen, m\u00fcssen wir den Zustand speichern Objektorientierung Attribute Methoden Python :writing_hand: Aufgabe: Implementierung eines Aggregators zum Gl\u00e4tten von Messwerten JSON-Darstellung eines Objekts","title":"Bussysteme in der MSR-Technik"},{"location":"5_5_Bussysteme_in_der_MSR-Technik/#bussysteme","text":"SoSe 2023 Dr. Julian Huber","title":"Bussysteme"},{"location":"5_5_Bussysteme_in_der_MSR-Technik/#regelverhalten","text":"","title":"Regelverhalten"},{"location":"5_5_Bussysteme_in_der_MSR-Technik/#motivation","text":"Funktion hat nur Input und Output aber keinen Speicher / Zustand z.B. wenn wir bei einer Messfunktionen das Signal gl\u00e4tten wollen, m\u00fcssen wir den Zustand speichern","title":"Motivation"},{"location":"5_5_Bussysteme_in_der_MSR-Technik/#objektorientierung","text":"","title":"Objektorientierung"},{"location":"5_5_Bussysteme_in_der_MSR-Technik/#attribute","text":"","title":"Attribute"},{"location":"5_5_Bussysteme_in_der_MSR-Technik/#methoden","text":"","title":"Methoden"},{"location":"5_5_Bussysteme_in_der_MSR-Technik/#python","text":"","title":"Python"},{"location":"5_5_Bussysteme_in_der_MSR-Technik/#writing_hand-aufgabe-implementierung-eines-aggregators-zum-glatten-von-messwerten","text":"","title":":writing_hand: Aufgabe: Implementierung eines Aggregators zum Gl\u00e4tten von Messwerten"},{"location":"5_5_Bussysteme_in_der_MSR-Technik/#json-darstellung-eines-objekts","text":"","title":"JSON-Darstellung eines Objekts"},{"location":"6_1_Smart_Metering/","text":"Bussysteme SoSe 2023 Dr. Julian Huber Regelverhalten Motivation Funktion hat nur Input und Output aber keinen Speicher / Zustand z.B. wenn wir bei einer Messfunktionen das Signal gl\u00e4tten wollen, m\u00fcssen wir den Zustand speichern Objektorientierung Attribute Methoden Python :writing_hand: Aufgabe: Implementierung eines Aggregators zum Gl\u00e4tten von Messwerten JSON-Darstellung eines Objekts","title":"Smart Metering"},{"location":"6_1_Smart_Metering/#bussysteme","text":"SoSe 2023 Dr. Julian Huber","title":"Bussysteme"},{"location":"6_1_Smart_Metering/#regelverhalten","text":"","title":"Regelverhalten"},{"location":"6_1_Smart_Metering/#motivation","text":"Funktion hat nur Input und Output aber keinen Speicher / Zustand z.B. wenn wir bei einer Messfunktionen das Signal gl\u00e4tten wollen, m\u00fcssen wir den Zustand speichern","title":"Motivation"},{"location":"6_1_Smart_Metering/#objektorientierung","text":"","title":"Objektorientierung"},{"location":"6_1_Smart_Metering/#attribute","text":"","title":"Attribute"},{"location":"6_1_Smart_Metering/#methoden","text":"","title":"Methoden"},{"location":"6_1_Smart_Metering/#python","text":"","title":"Python"},{"location":"6_1_Smart_Metering/#writing_hand-aufgabe-implementierung-eines-aggregators-zum-glatten-von-messwerten","text":"","title":":writing_hand: Aufgabe: Implementierung eines Aggregators zum Gl\u00e4tten von Messwerten"},{"location":"6_1_Smart_Metering/#json-darstellung-eines-objekts","text":"","title":"JSON-Darstellung eines Objekts"},{"location":"topic1-content/","text":"Topic 1 - Content Quicklinks Google Colabs Sakai Aufgaben 0 Organisatorisches","title":"Topic 1 - Content"},{"location":"topic1-content/#topic-1-content","text":"","title":"Topic 1 - Content"},{"location":"topic1-content/#quicklinks","text":"Google Colabs Sakai Aufgaben","title":"Quicklinks"},{"location":"topic1-content/#0-organisatorisches","text":"","title":"0 Organisatorisches"},{"location":"topic1-task/","text":"Topic 1 - Task Quicklinks Google Colabs Sakai Aufgaben Third Level Fourth Level 0 Organisatorisches","title":"Topic 1 - Task"},{"location":"topic1-task/#topic-1-task","text":"","title":"Topic 1 - Task"},{"location":"topic1-task/#quicklinks","text":"Google Colabs Sakai Aufgaben","title":"Quicklinks"},{"location":"topic1-task/#third-level","text":"","title":"Third Level"},{"location":"topic1-task/#fourth-level","text":"","title":"Fourth Level"},{"location":"topic1-task/#0-organisatorisches","text":"","title":"0 Organisatorisches"},{"location":"topic1/","text":"Topic 1 Quicklinks Google Colabs Sakai Aufgaben 0 Organisatorisches","title":"Topic 1"},{"location":"topic1/#topic-1","text":"","title":"Topic 1"},{"location":"topic1/#quicklinks","text":"Google Colabs Sakai Aufgaben","title":"Quicklinks"},{"location":"topic1/#0-organisatorisches","text":"","title":"0 Organisatorisches"}]}