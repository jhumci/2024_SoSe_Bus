{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bussysteme 0 Organisatorisches Alle Unterlagen finden sich unter dem Link auf Sakai und werden bei Bedarf aktualisiert Zudem werden pdf -Versionen der Pr\u00e4sentationen und der Skripte bereitgestellt (Fehler in diesen werden w\u00e4hrend des Semesters nicht korrigiert) Die Vorlesung hat einen hohen Praxisanteil, auch die Klausur fokussiert sich auf die Anwendung des Wissens W\u00e4hrend des Semesters gibt es keine Pflichtabgaben, jedoch wird die Mitarbeit in den \u00dcbungen und die Vorbereitung auf die Klausur empfohlen Das Labor baut auf den Inhalten der Vorlesung auf Hardware-Empfehlung F\u00fcr jede zweier-Gruppe wird die notwendige Hardware gestellt und f\u00fcr dauert des Semesters ausgeliehen Wer sich dennoch eigene Hardware zulegen m\u00f6chte, dem wird folgendes empfohlen: Raspberry Pi Pico (optional WH) Breadboard KY-018 - Fotowiderstand Optional: Sensoren und Aktoren Widerst\u00e4nde \\(10\\,k\\Omega\\) und \\(470\\,k\\Omega\\) LEDs Taster Jumperkabel","title":"\u00dcbersicht"},{"location":"#bussysteme","text":"","title":"Bussysteme"},{"location":"#0-organisatorisches","text":"Alle Unterlagen finden sich unter dem Link auf Sakai und werden bei Bedarf aktualisiert Zudem werden pdf -Versionen der Pr\u00e4sentationen und der Skripte bereitgestellt (Fehler in diesen werden w\u00e4hrend des Semesters nicht korrigiert) Die Vorlesung hat einen hohen Praxisanteil, auch die Klausur fokussiert sich auf die Anwendung des Wissens W\u00e4hrend des Semesters gibt es keine Pflichtabgaben, jedoch wird die Mitarbeit in den \u00dcbungen und die Vorbereitung auf die Klausur empfohlen Das Labor baut auf den Inhalten der Vorlesung auf","title":"0 Organisatorisches"},{"location":"#hardware-empfehlung","text":"F\u00fcr jede zweier-Gruppe wird die notwendige Hardware gestellt und f\u00fcr dauert des Semesters ausgeliehen Wer sich dennoch eigene Hardware zulegen m\u00f6chte, dem wird folgendes empfohlen: Raspberry Pi Pico (optional WH) Breadboard KY-018 - Fotowiderstand Optional: Sensoren und Aktoren Widerst\u00e4nde \\(10\\,k\\Omega\\) und \\(470\\,k\\Omega\\) LEDs Taster Jumperkabel","title":"Hardware-Empfehlung"},{"location":"1_1_Geb%C3%A4udeautomation/","text":"1.1 Geb\u00e4udeautomation \ud83c\udfaf Lernziele Nach dieser Einheit sind Sie in der Lage dazu Die Aufgaben von Geb\u00e4udeautomation-Management, Raumautomation, und Anlagenautomation abgrenzen Die Aufgaben auf Feld-, Automations-, und Managementebene abgrenzen Aufgaben der Geb\u00e4udeautomation Sicherstellung von Komfort und Sicherheit Energieeffizienz Betriebskostenoptimierung Produktivi\u00e4tssteigerung Abgrenzung verschiedene Ebenen der Geb\u00e4udeautomation Struktur nach VDI 3814 Quelle Anlagenautomation die Regelung, Steuerung, Prozessf\u00fchrung und \u00dcberwachung von Technikzentralen im Geb\u00e4ude, u. a. Heizungsanlagen, Anlagen der L\u00fcftungs-, Klima- und K\u00e4ltetechnik Raumautomation dezentrale Teilprozesse, zur Aufrechterhaltung eines lokalen Raumklimas durch Steuerungen und Bedienung der Ger\u00e4te. Schalenmodell nach VDI 3813 Blatt 1 Quelle Segment: kleinste Einheit im Schalenmodell ein Raum kann aus mehreren Segmenten bestehen, die f\u00fcr sich selbst funktionsf\u00e4hig sind Raum: ein Volumen, das von sechs Bauteilen abgeschlossen wird Bereich: Zusammenschluss mehrerer R\u00e4ume z.B. Flur mit Toiletten und einigen B\u00fcros, z.B. eine ganze Etage z.B. ein Foyer Geb\u00e4ude: \"Geb\u00e4ude sind selbst\u00e4ndig benutzbare \u00fcberdeckte bauliche Anlagen, die von Menschen betreten werden k\u00f6nnen.\" Quelle Geb\u00e4udeautomation-Management \u00fcbergeordnete Prozesse, zur \u00dcberwachung und Steuerung (Geb\u00e4udeleittechnik) Quelle Hierarchie der Geb\u00e4udeautomation (Automatisierungspyramide) Anlagen- und Raumautomation m\u00fcssen verkn\u00fcpft sein z. B. die Anpassung der zentralen W\u00e4rmeerzeugung an den dezentralen W\u00e4rmebedarf in den Geb\u00e4udezonen Verkn\u00fcpfung erfolgt in der Automationsebene z. B. Prozess\u00fcberwachung und Optimierung Quelle Fazit Geb\u00e4udeautomation ist ein komplexes Thema mit verschiedenen Zielfunktionen und Nutzergruppen Einzelne Anlagen m\u00fcssen gesteuert werden R\u00e4ume m\u00fcssen der Nutzung entsprechend gesteuert werden Geb\u00e4udeautomation-Management ist die \u00fcbergeordnete Instanz, die die Anlagen- und Raumautomation im Besten Fall verkn\u00fcpft","title":"Geb\u00e4udeautomation"},{"location":"1_1_Geb%C3%A4udeautomation/#11-gebaudeautomation","text":"\ud83c\udfaf Lernziele Nach dieser Einheit sind Sie in der Lage dazu Die Aufgaben von Geb\u00e4udeautomation-Management, Raumautomation, und Anlagenautomation abgrenzen Die Aufgaben auf Feld-, Automations-, und Managementebene abgrenzen","title":"1.1 Geb\u00e4udeautomation"},{"location":"1_1_Geb%C3%A4udeautomation/#aufgaben-der-gebaudeautomation","text":"Sicherstellung von Komfort und Sicherheit Energieeffizienz Betriebskostenoptimierung Produktivi\u00e4tssteigerung","title":"Aufgaben der Geb\u00e4udeautomation"},{"location":"1_1_Geb%C3%A4udeautomation/#abgrenzung-verschiedene-ebenen-der-gebaudeautomation","text":"Struktur nach VDI 3814 Quelle","title":"Abgrenzung verschiedene Ebenen der Geb\u00e4udeautomation"},{"location":"1_1_Geb%C3%A4udeautomation/#anlagenautomation","text":"die Regelung, Steuerung, Prozessf\u00fchrung und \u00dcberwachung von Technikzentralen im Geb\u00e4ude, u. a. Heizungsanlagen, Anlagen der L\u00fcftungs-, Klima- und K\u00e4ltetechnik","title":"Anlagenautomation"},{"location":"1_1_Geb%C3%A4udeautomation/#raumautomation","text":"dezentrale Teilprozesse, zur Aufrechterhaltung eines lokalen Raumklimas durch Steuerungen und Bedienung der Ger\u00e4te.","title":"Raumautomation"},{"location":"1_1_Geb%C3%A4udeautomation/#schalenmodell-nach-vdi-3813-blatt-1","text":"Quelle","title":"Schalenmodell nach VDI 3813 Blatt 1"},{"location":"1_1_Geb%C3%A4udeautomation/#segment","text":"kleinste Einheit im Schalenmodell ein Raum kann aus mehreren Segmenten bestehen, die f\u00fcr sich selbst funktionsf\u00e4hig sind","title":"Segment:"},{"location":"1_1_Geb%C3%A4udeautomation/#raum","text":"ein Volumen, das von sechs Bauteilen abgeschlossen wird","title":"Raum:"},{"location":"1_1_Geb%C3%A4udeautomation/#bereich","text":"Zusammenschluss mehrerer R\u00e4ume z.B. Flur mit Toiletten und einigen B\u00fcros, z.B. eine ganze Etage z.B. ein Foyer","title":"Bereich:"},{"location":"1_1_Geb%C3%A4udeautomation/#gebaude","text":"\"Geb\u00e4ude sind selbst\u00e4ndig benutzbare \u00fcberdeckte bauliche Anlagen, die von Menschen betreten werden k\u00f6nnen.\" Quelle","title":"Geb\u00e4ude:"},{"location":"1_1_Geb%C3%A4udeautomation/#gebaudeautomation-management","text":"\u00fcbergeordnete Prozesse, zur \u00dcberwachung und Steuerung (Geb\u00e4udeleittechnik) Quelle","title":"Geb\u00e4udeautomation-Management"},{"location":"1_1_Geb%C3%A4udeautomation/#hierarchie-der-gebaudeautomation-automatisierungspyramide","text":"Anlagen- und Raumautomation m\u00fcssen verkn\u00fcpft sein z. B. die Anpassung der zentralen W\u00e4rmeerzeugung an den dezentralen W\u00e4rmebedarf in den Geb\u00e4udezonen Verkn\u00fcpfung erfolgt in der Automationsebene z. B. Prozess\u00fcberwachung und Optimierung Quelle","title":"Hierarchie der Geb\u00e4udeautomation (Automatisierungspyramide)"},{"location":"1_1_Geb%C3%A4udeautomation/#fazit","text":"Geb\u00e4udeautomation ist ein komplexes Thema mit verschiedenen Zielfunktionen und Nutzergruppen Einzelne Anlagen m\u00fcssen gesteuert werden R\u00e4ume m\u00fcssen der Nutzung entsprechend gesteuert werden Geb\u00e4udeautomation-Management ist die \u00fcbergeordnete Instanz, die die Anlagen- und Raumautomation im Besten Fall verkn\u00fcpft","title":"Fazit"},{"location":"1_2_Planungsabl%C3%A4ufe/","text":"1.2 Planungsabl\u00e4ufe Im folgenden wird ein Planungsablauf f\u00fcr die Geb\u00e4udeautomation (vereinfacht stilisiert) vorgestellt Hierbei wird auf das Beispiel einer Raumautomation eingegangen Planungsabl\u00e4ufe f\u00fcr die Geb\u00e4udeautomation Quelle Leistungsphase Bezeichnung Geb\u00e4ude (\u00a7 34) Innenr\u00e4ume (\u00a7 34) Technische Ausr\u00fcstung (\u00a7 55) 1 Grundlagenermittlung 2 % 2 % 2 % 2 Vorplanung 7 % 7 % 9 % 3 Entwurfsplanung 15 % 15 % 17 % 4 Genehmigungsplanung 3 % 2 % 2 % 5 Ausf\u00fchrungsplanung 25 % 30 % 22 % 6 Vorbereitung der Vergabe 10 % 7 % 7 % 7 Mitwirkung bei der Vergabe 4 % 3 % 5 % 8 Objekt\u00fcberwachung \u2013 Bau\u00fcberwachung und Dokumentation 32 % 32 % 35 % 9 Objektbetreuung 2 % 2 % 1 % Summe 100 % 100 % 100 % Quelle Grundlagenermittlung und Bedarfsplanung Zun\u00e4chst wird z.B. w\u00e4hrend der Ausschreibungsphase ein Lastenheft erstellt, welches beschreibt was erreicht werden soll H\u00e4ufig enth\u00e4lt dieses eine textuelle Beschreibung des gew\u00fcnschten Endzustandes meist formuliert durch die Kund:in / Bauherr:in ggf. unterst\u00fctzt durch einen Planungsb\u00fcro Je nach Projekt kann hier auch auf bestehende Normen verwiesen werden bzw. diese m\u00fcssen ber\u00fccksichtigt werden z.B. Energieeffizienzklasse A nach EN15232 d.h. Heizsystem mit Einzelraumre\u00adgelung mit Kom\u00admunikation und Bedarfsanforde\u00adrung \ud83e\udd13 \u00d6sterreich Leistungsgruppen der standardisierten Bauausschreibung Komponenten-basiert. D.h. es werden Komponenten(typen) beschrieben, die in der Ausschreibung verwendet werden sollen und weniger auf die Erf\u00fcllung von Funktionen eingegangen Leistungsgruppen LG 84 - GA-System Raumautomation LG 85 GA-System Anlagenautomation (AA) LG 86 GA-Management (GA-M) \ud83e\udd13 Schweiz St\u00e4rkerer Fokus auf die Funktionen (z.B. durch Funktionstests) KBOB Empfehlung Geb\u00e4udetechnik dient als Definition der Anforderung an die geb\u00e4ude-technischen Installationen und Anlagen Vor- bis Genehmigungsplanung Fachplaner nehmen eine formale Beschreibung der Funktionen vor Die konzipieren wie die Funktionen umgesetzt werden sollen (Pflichtenheft) Typisch f\u00fcr diese Phase ist die Erstellung von Flie\u00dfbildern und Schemata z.B. Stromlaufpl\u00e4ne, Pneumatikpl\u00e4ne, Hydraulikpl\u00e4ne, etc. Raumautomations-Schema und Raumautomations-Funktionschema (VDI 3813) Anlagenautomations-Schema und Anlagenautomations-Funktionschema (VDI 3814) Komponenten-Sicht durch Preplanning Quelle Funktions-Sicht durch Raumautomations-Schema (VDI 3813) Zuordnung von Sensoren, Aktoren und Funktionen zueinander und zu Raum vs. Segment (keine genaue R\u00e4umliche Positionierung) Blockbausteine f\u00fcr Funktionen: Nutzen Attribute der Sensoren, um Attribute der Aktoren zu ver\u00e4ndern Funktionen def f ( x ): \"\"\"this function's name is f. It takes a value x and returns a value y\"\"\" [ ... ] y = 2 * x return y f ( 2 ) # Funktionsaufruf, f\u00fchrt die Funktion mit Argument aus und gibt R\u00fcckgabe aus Eingaben : Werte, die in die Funktion eingehen und sich abh\u00e4ngig vom Systemzustand \u00e4ndern k\u00f6nnen Parameter : unver\u00e4nderliche Werte, die einmalig konfiguriert werden (z.B. in Abh\u00e4ngigkeit der Raumgr\u00f6\u00dfe) Ausgaben : Werte, welche von der Funktion abh\u00e4ngig von Parametern und Eingaben zur\u00fcckgegeben werden Viele Funktionen stehen f\u00fcr viele Systeme standardisiert zur Verf\u00fcgung (z.B. Loxone , Beckhoff , etc.) oder k\u00f6nnen selbst implementiert werden Vorsicht, das stimmt nicht ganze mit der \u00fcblichen Benennung bei Programmiersprachen \u00fcberein Sensorfunktionen Ziel: Erfassen von Zust\u00e4nden Pr\u00e4senzerkennung, Fenster\u00fcberwachung, Taupunkt\u00fcberwachung, Lufttemperaturmessung, Helligkeitsmessung, Luftqualit\u00e4tsmessung, Windgeschwindigkeit, Niederschlag Quelle Sensorfuktionen != Sensoren / Datenpunkte \"k\u00fcnstliche\" Trennung erh\u00f6ht Flexibilit\u00e4t Ein Datenpunkt / Sensor Lufttemperaturmessung Luftqualit\u00e4tsmessung ggf. Taupunkt\u00fcberwachung Quelle Beispiel Verschattungkorrektur Quelle Aktorfunktionen Ziel: Steuerung von Komponenten bin\u00e4rer Schaltaktor Lichtaktor, Sonnenschutzaktor, Stellantriebsaktor (z.B: Heizk\u00f6rper) Bedien-, Anzeige und Managementfunktionen Bedien- und Anzeigefunktionen ( lokal ) Stellantriebsaktor, Sonnenschutzstellen, Antriebstellen, Temperatursollwertstellen, Raumnutzungsart w\u00e4hlen, Pr\u00e4senzmelden Managementfunktionen Aufzeichnung, Archivierung und statistische Analyse Anwendungsfunktionen sind Programmabl\u00e4ufe die meist mehrere Aktoren und Sensoren miteinbeziehen Raumklima Energieniveauwahl, Energieniveauwahl mit Startoptimierung,Sollwertermittlung, Funktionswahl, Temperaturregelung, Raum\u2010Zulufttemperatur\u2010Kaskade, Ventilatorsteuerung, Sequenzsteuerung, Stellwertbegrenzung, Luftqualit\u00e4tsregelung, Nachtk\u00fchlung, Volumenstromregelung Anwendungsfunktionen Beleuchtung Lichtschaltung, Treppenlichtschaltung , Automatiklicht, Tageslichtschaltung, Kostantlichtregelung, D\u00e4mmerungsschaltung Sonnenschutz Priorit\u00e4tssteuerung, D\u00e4mmerungsautomatik, Sonnenautomatik, Lamellennachf\u00fchrung, Verschattungskorrektur, Thermoautomatik, Witterungsschutz \u00dcbergreifend Belegungsauswertung, Steuerung \u00fcber Raumnutzung, Zeitprogramm, Trennwandsteuerung, Thermoautomatik Beispiel Treppenlichtschaltung \u00dcber die Funktion Treppenlichtschaltung k\u00f6nnen Beleuchtungseinrichtungen tempor\u00e4r eingeschaltet werden. Nach Ablauf der Treppenlichthaltezeit kann eine Abschaltvorwarnzeit aktiv werden, die den Nutzer z. B. durch kurzzeitige Unterbrechung(\u201eFlackern\u201c) \u00fcber die bevorstehende Abschaltung informiert. Ein erneuter Empfang einer Eingabeinformation zum Einschalten startet die Verz\u00f6gerungszeit neu. Die Funktion ben\u00f6tigt als Eingabeinformation das Ergebnis der Bedienfunktion Licht stellen und liefert ihrerseits die Ausgabeinformation f\u00fcr eine oder mehrere Aktorfunktionen Lichtaktor. Zusammenhang zwischen verschiedenen Funktionen Quelle Schritt Raumautomations-Schema Ableitungen aus Vorplanung und Raumautomations-Schema Raumautomations-Schema zielt insbesondere auf die Implementierung, der gezielten Funktionalit\u00e4t (Funktionsbausteine werden auch in der Programmierung eingesetzt) Grafisches Werkzeug: Intuitive Pr\u00fcfung auf Vollst\u00e4ndigkeit m\u00f6glich Entscheidung f\u00fcr Raum und Segment z.b. ein vs. mehrere Bewegungsmelder pro Segment F\u00fcr die Mengenplanung und Installationsplanung ist eine andere Darstellung hilfreicher \u270d\ufe0f Aufgabe 1_2_1: Raumautomationsschema f\u00fcr ein Treppenhaus Bef\u00fcllen Sie das vorliegende Raumautomations-Schema mit den entsprechenden Funktionen f\u00fcr die Beleuchtung eines Treppenhauses (aus den Folien zuvor) Alle Leuchten werden \u00fcber einen Aktor f\u00fcr das gesamte Treppenhaus zusammengefasst Das Treppenhaus verbindet zwei Stockwerke, auf jedem soll ein Bedienelement f\u00fcr die Beleuchtung angebracht werden Die Anwendungsfunktion Treppenlichtschaltung soll hier\u00fcber gesteuert werden k\u00f6nnen zus\u00e4tzlich soll die Beleuchtung auch direkt aus der Geb\u00e4udeleittechnik f\u00fcr den Bereich gesteuert werden k\u00f6nnen \u2714\ufe0f L\u00f6sung \ud83d\udca1 anzeigen Ausf\u00fchrung Entscheidung f\u00fcr Hardware und Software, um die Funktionen umzusetzen Erstellung von Detailpl\u00e4nen und Dokumentationen Installation der Hardware und Verkabelung Implementierung von Software Funktionstests Beispiel: Parametrisierung eines DALI-Systems Beispiel: Programmierung eine SPS Bussysteme i.d.R. gibt es eine Vielzahl von m\u00f6glichen Bussystemen, die f\u00fcr die Umsetzung der Funktionen in Frage kommen h\u00e4ufig werden mehrere Bussysteme kombiniert und m\u00fcssen orchestriert werden neben den Kosten m\u00fcssen auch Anforderungen an Erweiterbarkeit und Wartbarkeit ber\u00fccksichtigt werden Erweiterbarkeit: Wie einfach ist es, neue Komponenten hinzuzuf\u00fcgen? Wie offen ist das System f\u00fcr Ver\u00e4nderungen? Wartbarkeit: Sind Dienstleister oder Personal verf\u00fcgbar, die das System warten k\u00f6nnen? Ist davon auszugehen, dass das System in 10 Jahren noch verf\u00fcgbar ist? Betriebsphase Softwareupdates: Wie k\u00f6nnen Softwareupdates eingespielt werden? Over-the-Air vs manuell? Wie werden die Updates getestet? Funktionstests: Wie kann die Funktionalit\u00e4t \u00fcberpr\u00fcft werden? Wie k\u00f6nnen Fehler identifiziert werden? Automatisierungspyramide Cloud Zunehmende Bedeutung von Cloud-Systemen Insbesondere die h\u00f6heren Ebenen der Automatisierungspyramide werden zunehmend in die Cloud verlagert Appendix: Ausgew\u00e4hlte Anwendungsfunktionen Funktionen f\u00fcr die Raumklimaregelung II Startoptimierung Wird dem Raumtemperaturregler \u00fcber ein Zeitprogramm zus\u00e4tzlich zum gegenw\u00e4rtigen Energieniveau auch das n\u00e4chste und der zugeh\u00f6rige Zeitpunkt mitgeteilt, ist der Regler in der Lage, den optimalen Aufheizzeitpunkt des Raums anhand zus\u00e4tzlicher Informationen, wie der Raum- und der Au\u00dfentemperatur, so zu bestimmen, dass die gew\u00fcnschte Raumtemperatur genau zu dem gew\u00e4hlten Zeitpunkt zur Verf\u00fcgung steht (Erweiterung der Energieniveauwahl). Fenster\u00fcberwachung Bei ge\u00f6ffneten Fenstern sorgt die Fenster\u00fcberwachung f\u00fcr eine automatische Umschaltung auf das Energieniveau Geb\u00e4udeschutz um Energieverschwendung zu vermeiden. Der Zustand der Fenster wird \u00fcber entsprechende Kontakte eingelesen. Funktionen f\u00fcr die Raumklimaregelung III Sollwertermittlung Abh\u00e4ngig vom Energieniveau muss ein Raumtemperaturregler in der Lage sein, die korrekte Sollwertvorgabe zu ermitteln. Zus\u00e4tzlich kann der Sollwert bei hohen Au\u00dfentemperaturen gleitend angehoben werden ( Sommerkompensation ), um zu gro\u00dfe Unterschiede zur Raumtemperatur zu vermeiden. Temperaturregelung Die eigentliche Regelung der Raumtemperatur durch Ermittlung der korrekten Stellantriebsstellung f\u00fcr Heizen oder K\u00fchlen erfolgt durch die Funktion Temperaturregelung. In den meisten F\u00e4llen kommen PI-Regler zum Einsatz, die in der Lage sind, statische Regelabweichungen zu eliminieren. Funktionen f\u00fcr die Raumklimaregelung IV Ventilatorsteuerung Luftgest\u00fctzte Anlagen, z. B. Gebl\u00e4sekonvektoren, verf\u00fcgen \u00fcber Ventilatoren zum Lufttransport. Die Luftmenge kann dabei meist mehrstufig an die erforderliche Heiz- oder K\u00fchlleistung angepasst werden. Die Wahl der geeigneten Ventilatorstufe erfolgt anhand der Differenz der Ist- zur Soll-Raumlufttemperatur oder analog zu den Stellantrieben der Heiz- oder K\u00fchlregister. Luftqualit\u00e4tsregelung Wird die Versorgung der R\u00e4ume mit Frischluft \u00fcber mechanische Systeme, wie Zentral- oder Fassadenl\u00fcftungsanlagen gew\u00e4hrleistet, wird die Zuluftmenge zur Einsparung elektrischer Energie f\u00fcr die Ventilatoren an die Raumluftqualit\u00e4t angepasst . Funktionen f\u00fcr die Raumklimaregelung IV Nachtk\u00fchlung K\u00fchle Nachtluft l\u00e4sst sich zum Herunterk\u00fchlen der Raumluft nutzen, falls Fenster oder Fassadenklappen motorisch ge\u00f6ffnet werden k\u00f6nnen oder Gebl\u00e4sekonvektoren mit Zuluftklappen vorhanden sind. Diese Funktion sollte mit Hilfe der gemessenen lokalen Raumtemperatur und der Au\u00dfentemperatur raumindividuell ausgef\u00fchrt werden, um eine optimale Absenkung zu erreichen. Thermoautomatik Durch die Fenster eintretendes Sonnenlicht sorgt f\u00fcr einen W\u00e4rmeeintrag in den Raum, der je nach Raumtemperatur willkommen oder unwillkommen ist. Die Thermoautomatik \u00fcbernimmt in unbelegten R\u00e4umen nun die Kontrolle \u00fcber den Sonnenschutz zur Unterst\u00fctzung von Heiz- oder K\u00fchlvorg\u00e4ngen. So kann im Sommer eine \u00dcberhitzung vermieden und im Winter die Heizung durch solare Gewinne entlastet werden. Funktionen f\u00fcr Beleuchtung, Blendschutz und Tageslichtnutzung Konstantlichtregelung Ein Sensor zur Erfassung der Raumhelligkeit, z. B. innerhalb eines Multisensors, sorgt f\u00fcr die exakte Anpassung des Beleuchtungsniveaus an die Arbeitsaufgabe. Hierf\u00fcr erforderlich sind dimmf\u00e4hige Aktoren (analoger Ausgang). Tageslichtschaltung Der \"kleine Bruder\" der Konstantlichtregelung ist \u00fcberall dort einsetzbar, wo die Beleuchtung nur schaltbar ausgef\u00fchrt werden kann. Zur Erfassung der Helligkeit ist ebenfalls ein Sensor im Raum erforderlich. Unterschreitet das Tageslicht die erforderliche Raumhelligkeit, wird Kunstlicht automatisch in ein oder mehreren Stufen zugeschaltet und bei Zunahme des Tageslichtanteils wieder abgeschaltet (digitaler Ausgang). Funktionen f\u00fcr Beleuchtung etc. II Automatiklicht In R\u00e4umen ohne ausreichende Tageslichtversorgung, z. B. in Fluren oder Sanit\u00e4rr\u00e4umen, l\u00e4sst sich Energie sparen, indem die Beleuchtung nur tempor\u00e4r eingeschaltet wird. Die Pr\u00e4senzerkennung liefert die hierf\u00fcr erforderlichen Sensordaten. Eine einstellbare Abschaltverz\u00f6gerung sorgt f\u00fcr Beleuchtungskomfort. Sonnenautomatik Au\u00dfenliegende Jalousien und bedingt auch Markisen sorgen vor allem f\u00fcr einen W\u00e4rmeschutz des Geb\u00e4udes. Innenliegende Jalousien, Vertikallamellen u. \u00e4. sorgen vor allem f\u00fcr Blendfreiheit an Arbeitspl\u00e4tzen. Die Sonnenautomatik sorgt nutzt Wetterdaten, damit der au\u00dfenliegende Sonnenschutz eine einstellbare Position immer dann einnimmt, wenn eine bestimmte Strahlungsintensit\u00e4t \u00fcberschritten wird. Der innen liegende Blendschutz ist i. d. R. nicht automatisiert, da das Blendungsempfinden individuell zu bewerten ist. Funktionen f\u00fcr Beleuchtung etc. III Lamellennachf\u00fchrung Die Lamellennachf\u00fchrung ist eine Weiterentwicklung der Sonnenautomatik . Bei hoher Strahlungsintensit\u00e4t f\u00e4hrt der Sonnenschutz dazu in eine Stellung, die zyklisch dem Sonnenstand angepasst wird. So wird unter Aufrechterhaltung des Blendschutzes die Tageslichtversorgung maximiert. Verschattungskorrektur Umliegende Geb\u00e4ude oder eigene Geb\u00e4udeteile sorgen auf den Fassaden f\u00fcr Schattenwurf, der die Blendschutzfunktion f\u00fcr die im Schatten liegenden Jalousien zeitweise unn\u00f6tig macht. Die Jalousien sollten f\u00fcr eine bessere Tageslichtversorgung in dieser Zeit ge\u00f6ffnet sein. Die Verschattungskorrektur korrigiert dies in Verbindung mit der Sonnenautomatik oder der Lamellennachf\u00fchrung arbeitet. Die Funktion wird gelegentlich auch Jahresverschattungsdiagramm genannt. Funktionen f\u00fcr Beleuchtung etc. IV D\u00e4mmerungsschaltung Au\u00dfenbeleuchtung ist nur dann erforderlich, wenn es dunkel wird. Da der Zeitpunkt jahreszeitlich variiert, sorgt die D\u00e4mmerungsschaltung selbstst\u00e4ndig f\u00fcr den optimalen Einschaltmoment. Witterungsschutz Witterungsschutzfunktionen vermeiden Sch\u00e4den an der Sonnenschutzanlage. Sensoren f\u00fcr Temperatur, Niederschlag, Windgeschwindigkeit und -richtung stellen die erforderlichen Wetterdaten zur Verf\u00fcgung, damit der Sonnenschutz rechtzeitig vor Besch\u00e4digungen eingezogen wird (ggf. auch f\u00fcr Fenster).","title":"Planungsabl\u00e4ufe"},{"location":"1_2_Planungsabl%C3%A4ufe/#12-planungsablaufe","text":"Im folgenden wird ein Planungsablauf f\u00fcr die Geb\u00e4udeautomation (vereinfacht stilisiert) vorgestellt Hierbei wird auf das Beispiel einer Raumautomation eingegangen","title":"1.2 Planungsabl\u00e4ufe"},{"location":"1_2_Planungsabl%C3%A4ufe/#planungsablaufe-fur-die-gebaudeautomation","text":"Quelle Leistungsphase Bezeichnung Geb\u00e4ude (\u00a7 34) Innenr\u00e4ume (\u00a7 34) Technische Ausr\u00fcstung (\u00a7 55) 1 Grundlagenermittlung 2 % 2 % 2 % 2 Vorplanung 7 % 7 % 9 % 3 Entwurfsplanung 15 % 15 % 17 % 4 Genehmigungsplanung 3 % 2 % 2 % 5 Ausf\u00fchrungsplanung 25 % 30 % 22 % 6 Vorbereitung der Vergabe 10 % 7 % 7 % 7 Mitwirkung bei der Vergabe 4 % 3 % 5 % 8 Objekt\u00fcberwachung \u2013 Bau\u00fcberwachung und Dokumentation 32 % 32 % 35 % 9 Objektbetreuung 2 % 2 % 1 % Summe 100 % 100 % 100 % Quelle","title":"Planungsabl\u00e4ufe f\u00fcr die Geb\u00e4udeautomation"},{"location":"1_2_Planungsabl%C3%A4ufe/#grundlagenermittlung-und-bedarfsplanung","text":"Zun\u00e4chst wird z.B. w\u00e4hrend der Ausschreibungsphase ein Lastenheft erstellt, welches beschreibt was erreicht werden soll H\u00e4ufig enth\u00e4lt dieses eine textuelle Beschreibung des gew\u00fcnschten Endzustandes meist formuliert durch die Kund:in / Bauherr:in ggf. unterst\u00fctzt durch einen Planungsb\u00fcro Je nach Projekt kann hier auch auf bestehende Normen verwiesen werden bzw. diese m\u00fcssen ber\u00fccksichtigt werden z.B. Energieeffizienzklasse A nach EN15232 d.h. Heizsystem mit Einzelraumre\u00adgelung mit Kom\u00admunikation und Bedarfsanforde\u00adrung","title":"Grundlagenermittlung und Bedarfsplanung"},{"location":"1_2_Planungsabl%C3%A4ufe/#osterreich","text":"Leistungsgruppen der standardisierten Bauausschreibung Komponenten-basiert. D.h. es werden Komponenten(typen) beschrieben, die in der Ausschreibung verwendet werden sollen und weniger auf die Erf\u00fcllung von Funktionen eingegangen Leistungsgruppen LG 84 - GA-System Raumautomation LG 85 GA-System Anlagenautomation (AA) LG 86 GA-Management (GA-M)","title":"\ud83e\udd13 \u00d6sterreich"},{"location":"1_2_Planungsabl%C3%A4ufe/#schweiz","text":"St\u00e4rkerer Fokus auf die Funktionen (z.B. durch Funktionstests) KBOB Empfehlung Geb\u00e4udetechnik dient als Definition der Anforderung an die geb\u00e4ude-technischen Installationen und Anlagen","title":"\ud83e\udd13 Schweiz"},{"location":"1_2_Planungsabl%C3%A4ufe/#vor-bis-genehmigungsplanung","text":"Fachplaner nehmen eine formale Beschreibung der Funktionen vor Die konzipieren wie die Funktionen umgesetzt werden sollen (Pflichtenheft) Typisch f\u00fcr diese Phase ist die Erstellung von Flie\u00dfbildern und Schemata z.B. Stromlaufpl\u00e4ne, Pneumatikpl\u00e4ne, Hydraulikpl\u00e4ne, etc. Raumautomations-Schema und Raumautomations-Funktionschema (VDI 3813) Anlagenautomations-Schema und Anlagenautomations-Funktionschema (VDI 3814)","title":"Vor- bis Genehmigungsplanung"},{"location":"1_2_Planungsabl%C3%A4ufe/#komponenten-sicht-durch-preplanning","text":"Quelle","title":"Komponenten-Sicht durch Preplanning"},{"location":"1_2_Planungsabl%C3%A4ufe/#funktions-sicht-durch-raumautomations-schema-vdi-3813","text":"Zuordnung von Sensoren, Aktoren und Funktionen zueinander und zu Raum vs. Segment (keine genaue R\u00e4umliche Positionierung) Blockbausteine f\u00fcr Funktionen: Nutzen Attribute der Sensoren, um Attribute der Aktoren zu ver\u00e4ndern","title":"Funktions-Sicht durch Raumautomations-Schema (VDI 3813)"},{"location":"1_2_Planungsabl%C3%A4ufe/#funktionen","text":"def f ( x ): \"\"\"this function's name is f. It takes a value x and returns a value y\"\"\" [ ... ] y = 2 * x return y f ( 2 ) # Funktionsaufruf, f\u00fchrt die Funktion mit Argument aus und gibt R\u00fcckgabe aus Eingaben : Werte, die in die Funktion eingehen und sich abh\u00e4ngig vom Systemzustand \u00e4ndern k\u00f6nnen Parameter : unver\u00e4nderliche Werte, die einmalig konfiguriert werden (z.B. in Abh\u00e4ngigkeit der Raumgr\u00f6\u00dfe) Ausgaben : Werte, welche von der Funktion abh\u00e4ngig von Parametern und Eingaben zur\u00fcckgegeben werden Viele Funktionen stehen f\u00fcr viele Systeme standardisiert zur Verf\u00fcgung (z.B. Loxone , Beckhoff , etc.) oder k\u00f6nnen selbst implementiert werden Vorsicht, das stimmt nicht ganze mit der \u00fcblichen Benennung bei Programmiersprachen \u00fcberein","title":"Funktionen"},{"location":"1_2_Planungsabl%C3%A4ufe/#sensorfunktionen","text":"Ziel: Erfassen von Zust\u00e4nden Pr\u00e4senzerkennung, Fenster\u00fcberwachung, Taupunkt\u00fcberwachung, Lufttemperaturmessung, Helligkeitsmessung, Luftqualit\u00e4tsmessung, Windgeschwindigkeit, Niederschlag Quelle","title":"Sensorfunktionen"},{"location":"1_2_Planungsabl%C3%A4ufe/#sensorfuktionen-sensoren-datenpunkte","text":"\"k\u00fcnstliche\" Trennung erh\u00f6ht Flexibilit\u00e4t Ein Datenpunkt / Sensor Lufttemperaturmessung Luftqualit\u00e4tsmessung ggf. Taupunkt\u00fcberwachung Quelle","title":"Sensorfuktionen != Sensoren / Datenpunkte"},{"location":"1_2_Planungsabl%C3%A4ufe/#beispiel-verschattungkorrektur","text":"Quelle","title":"Beispiel Verschattungkorrektur"},{"location":"1_2_Planungsabl%C3%A4ufe/#aktorfunktionen","text":"Ziel: Steuerung von Komponenten bin\u00e4rer Schaltaktor Lichtaktor, Sonnenschutzaktor, Stellantriebsaktor (z.B: Heizk\u00f6rper)","title":"Aktorfunktionen"},{"location":"1_2_Planungsabl%C3%A4ufe/#bedien-anzeige-und-managementfunktionen","text":"Bedien- und Anzeigefunktionen ( lokal ) Stellantriebsaktor, Sonnenschutzstellen, Antriebstellen, Temperatursollwertstellen, Raumnutzungsart w\u00e4hlen, Pr\u00e4senzmelden Managementfunktionen Aufzeichnung, Archivierung und statistische Analyse","title":"Bedien-, Anzeige und Managementfunktionen"},{"location":"1_2_Planungsabl%C3%A4ufe/#anwendungsfunktionen","text":"sind Programmabl\u00e4ufe die meist mehrere Aktoren und Sensoren miteinbeziehen Raumklima Energieniveauwahl, Energieniveauwahl mit Startoptimierung,Sollwertermittlung, Funktionswahl, Temperaturregelung, Raum\u2010Zulufttemperatur\u2010Kaskade, Ventilatorsteuerung, Sequenzsteuerung, Stellwertbegrenzung, Luftqualit\u00e4tsregelung, Nachtk\u00fchlung, Volumenstromregelung","title":"Anwendungsfunktionen"},{"location":"1_2_Planungsabl%C3%A4ufe/#anwendungsfunktionen_1","text":"Beleuchtung Lichtschaltung, Treppenlichtschaltung , Automatiklicht, Tageslichtschaltung, Kostantlichtregelung, D\u00e4mmerungsschaltung Sonnenschutz Priorit\u00e4tssteuerung, D\u00e4mmerungsautomatik, Sonnenautomatik, Lamellennachf\u00fchrung, Verschattungskorrektur, Thermoautomatik, Witterungsschutz \u00dcbergreifend Belegungsauswertung, Steuerung \u00fcber Raumnutzung, Zeitprogramm, Trennwandsteuerung, Thermoautomatik","title":"Anwendungsfunktionen"},{"location":"1_2_Planungsabl%C3%A4ufe/#beispiel-treppenlichtschaltung","text":"\u00dcber die Funktion Treppenlichtschaltung k\u00f6nnen Beleuchtungseinrichtungen tempor\u00e4r eingeschaltet werden. Nach Ablauf der Treppenlichthaltezeit kann eine Abschaltvorwarnzeit aktiv werden, die den Nutzer z. B. durch kurzzeitige Unterbrechung(\u201eFlackern\u201c) \u00fcber die bevorstehende Abschaltung informiert. Ein erneuter Empfang einer Eingabeinformation zum Einschalten startet die Verz\u00f6gerungszeit neu. Die Funktion ben\u00f6tigt als Eingabeinformation das Ergebnis der Bedienfunktion Licht stellen und liefert ihrerseits die Ausgabeinformation f\u00fcr eine oder mehrere Aktorfunktionen Lichtaktor.","title":"Beispiel Treppenlichtschaltung"},{"location":"1_2_Planungsabl%C3%A4ufe/#zusammenhang-zwischen-verschiedenen-funktionen","text":"Quelle","title":"Zusammenhang zwischen verschiedenen Funktionen"},{"location":"1_2_Planungsabl%C3%A4ufe/#schritt-raumautomations-schema","text":"","title":"Schritt Raumautomations-Schema"},{"location":"1_2_Planungsabl%C3%A4ufe/#ableitungen-aus-vorplanung-und-raumautomations-schema","text":"Raumautomations-Schema zielt insbesondere auf die Implementierung, der gezielten Funktionalit\u00e4t (Funktionsbausteine werden auch in der Programmierung eingesetzt) Grafisches Werkzeug: Intuitive Pr\u00fcfung auf Vollst\u00e4ndigkeit m\u00f6glich Entscheidung f\u00fcr Raum und Segment z.b. ein vs. mehrere Bewegungsmelder pro Segment F\u00fcr die Mengenplanung und Installationsplanung ist eine andere Darstellung hilfreicher","title":"Ableitungen aus Vorplanung und Raumautomations-Schema"},{"location":"1_2_Planungsabl%C3%A4ufe/#aufgabe-1_2_1-raumautomationsschema-fur-ein-treppenhaus","text":"Bef\u00fcllen Sie das vorliegende Raumautomations-Schema mit den entsprechenden Funktionen f\u00fcr die Beleuchtung eines Treppenhauses (aus den Folien zuvor) Alle Leuchten werden \u00fcber einen Aktor f\u00fcr das gesamte Treppenhaus zusammengefasst Das Treppenhaus verbindet zwei Stockwerke, auf jedem soll ein Bedienelement f\u00fcr die Beleuchtung angebracht werden Die Anwendungsfunktion Treppenlichtschaltung soll hier\u00fcber gesteuert werden k\u00f6nnen zus\u00e4tzlich soll die Beleuchtung auch direkt aus der Geb\u00e4udeleittechnik f\u00fcr den Bereich gesteuert werden k\u00f6nnen","title":"\u270d\ufe0f Aufgabe 1_2_1: Raumautomationsschema f\u00fcr ein Treppenhaus"},{"location":"1_2_Planungsabl%C3%A4ufe/#losung","text":"\ud83d\udca1 anzeigen","title":"\u2714\ufe0f L\u00f6sung"},{"location":"1_2_Planungsabl%C3%A4ufe/#ausfuhrung","text":"Entscheidung f\u00fcr Hardware und Software, um die Funktionen umzusetzen Erstellung von Detailpl\u00e4nen und Dokumentationen Installation der Hardware und Verkabelung Implementierung von Software Funktionstests","title":"Ausf\u00fchrung"},{"location":"1_2_Planungsabl%C3%A4ufe/#beispiel-parametrisierung-eines-dali-systems","text":"","title":"Beispiel: Parametrisierung eines DALI-Systems"},{"location":"1_2_Planungsabl%C3%A4ufe/#beispiel-programmierung-eine-sps","text":"","title":"Beispiel: Programmierung eine SPS"},{"location":"1_2_Planungsabl%C3%A4ufe/#bussysteme","text":"i.d.R. gibt es eine Vielzahl von m\u00f6glichen Bussystemen, die f\u00fcr die Umsetzung der Funktionen in Frage kommen h\u00e4ufig werden mehrere Bussysteme kombiniert und m\u00fcssen orchestriert werden neben den Kosten m\u00fcssen auch Anforderungen an Erweiterbarkeit und Wartbarkeit ber\u00fccksichtigt werden Erweiterbarkeit: Wie einfach ist es, neue Komponenten hinzuzuf\u00fcgen? Wie offen ist das System f\u00fcr Ver\u00e4nderungen? Wartbarkeit: Sind Dienstleister oder Personal verf\u00fcgbar, die das System warten k\u00f6nnen? Ist davon auszugehen, dass das System in 10 Jahren noch verf\u00fcgbar ist?","title":"Bussysteme"},{"location":"1_2_Planungsabl%C3%A4ufe/#betriebsphase","text":"Softwareupdates: Wie k\u00f6nnen Softwareupdates eingespielt werden? Over-the-Air vs manuell? Wie werden die Updates getestet? Funktionstests: Wie kann die Funktionalit\u00e4t \u00fcberpr\u00fcft werden? Wie k\u00f6nnen Fehler identifiziert werden?","title":"Betriebsphase"},{"location":"1_2_Planungsabl%C3%A4ufe/#automatisierungspyramide","text":"","title":"Automatisierungspyramide"},{"location":"1_2_Planungsabl%C3%A4ufe/#cloud","text":"Zunehmende Bedeutung von Cloud-Systemen Insbesondere die h\u00f6heren Ebenen der Automatisierungspyramide werden zunehmend in die Cloud verlagert","title":"Cloud"},{"location":"1_2_Planungsabl%C3%A4ufe/#appendix-ausgewahlte-anwendungsfunktionen","text":"","title":"Appendix: Ausgew\u00e4hlte Anwendungsfunktionen"},{"location":"1_2_Planungsabl%C3%A4ufe/#funktionen-fur-die-raumklimaregelung-ii","text":"Startoptimierung Wird dem Raumtemperaturregler \u00fcber ein Zeitprogramm zus\u00e4tzlich zum gegenw\u00e4rtigen Energieniveau auch das n\u00e4chste und der zugeh\u00f6rige Zeitpunkt mitgeteilt, ist der Regler in der Lage, den optimalen Aufheizzeitpunkt des Raums anhand zus\u00e4tzlicher Informationen, wie der Raum- und der Au\u00dfentemperatur, so zu bestimmen, dass die gew\u00fcnschte Raumtemperatur genau zu dem gew\u00e4hlten Zeitpunkt zur Verf\u00fcgung steht (Erweiterung der Energieniveauwahl). Fenster\u00fcberwachung Bei ge\u00f6ffneten Fenstern sorgt die Fenster\u00fcberwachung f\u00fcr eine automatische Umschaltung auf das Energieniveau Geb\u00e4udeschutz um Energieverschwendung zu vermeiden. Der Zustand der Fenster wird \u00fcber entsprechende Kontakte eingelesen.","title":"Funktionen f\u00fcr die Raumklimaregelung II"},{"location":"1_2_Planungsabl%C3%A4ufe/#funktionen-fur-die-raumklimaregelung-iii","text":"Sollwertermittlung Abh\u00e4ngig vom Energieniveau muss ein Raumtemperaturregler in der Lage sein, die korrekte Sollwertvorgabe zu ermitteln. Zus\u00e4tzlich kann der Sollwert bei hohen Au\u00dfentemperaturen gleitend angehoben werden ( Sommerkompensation ), um zu gro\u00dfe Unterschiede zur Raumtemperatur zu vermeiden. Temperaturregelung Die eigentliche Regelung der Raumtemperatur durch Ermittlung der korrekten Stellantriebsstellung f\u00fcr Heizen oder K\u00fchlen erfolgt durch die Funktion Temperaturregelung. In den meisten F\u00e4llen kommen PI-Regler zum Einsatz, die in der Lage sind, statische Regelabweichungen zu eliminieren.","title":"Funktionen f\u00fcr die Raumklimaregelung III"},{"location":"1_2_Planungsabl%C3%A4ufe/#funktionen-fur-die-raumklimaregelung-iv","text":"Ventilatorsteuerung Luftgest\u00fctzte Anlagen, z. B. Gebl\u00e4sekonvektoren, verf\u00fcgen \u00fcber Ventilatoren zum Lufttransport. Die Luftmenge kann dabei meist mehrstufig an die erforderliche Heiz- oder K\u00fchlleistung angepasst werden. Die Wahl der geeigneten Ventilatorstufe erfolgt anhand der Differenz der Ist- zur Soll-Raumlufttemperatur oder analog zu den Stellantrieben der Heiz- oder K\u00fchlregister. Luftqualit\u00e4tsregelung Wird die Versorgung der R\u00e4ume mit Frischluft \u00fcber mechanische Systeme, wie Zentral- oder Fassadenl\u00fcftungsanlagen gew\u00e4hrleistet, wird die Zuluftmenge zur Einsparung elektrischer Energie f\u00fcr die Ventilatoren an die Raumluftqualit\u00e4t angepasst .","title":"Funktionen f\u00fcr die Raumklimaregelung IV"},{"location":"1_2_Planungsabl%C3%A4ufe/#funktionen-fur-die-raumklimaregelung-iv_1","text":"Nachtk\u00fchlung K\u00fchle Nachtluft l\u00e4sst sich zum Herunterk\u00fchlen der Raumluft nutzen, falls Fenster oder Fassadenklappen motorisch ge\u00f6ffnet werden k\u00f6nnen oder Gebl\u00e4sekonvektoren mit Zuluftklappen vorhanden sind. Diese Funktion sollte mit Hilfe der gemessenen lokalen Raumtemperatur und der Au\u00dfentemperatur raumindividuell ausgef\u00fchrt werden, um eine optimale Absenkung zu erreichen. Thermoautomatik Durch die Fenster eintretendes Sonnenlicht sorgt f\u00fcr einen W\u00e4rmeeintrag in den Raum, der je nach Raumtemperatur willkommen oder unwillkommen ist. Die Thermoautomatik \u00fcbernimmt in unbelegten R\u00e4umen nun die Kontrolle \u00fcber den Sonnenschutz zur Unterst\u00fctzung von Heiz- oder K\u00fchlvorg\u00e4ngen. So kann im Sommer eine \u00dcberhitzung vermieden und im Winter die Heizung durch solare Gewinne entlastet werden.","title":"Funktionen f\u00fcr die Raumklimaregelung IV"},{"location":"1_2_Planungsabl%C3%A4ufe/#funktionen-fur-beleuchtung-blendschutz-und-tageslichtnutzung","text":"Konstantlichtregelung Ein Sensor zur Erfassung der Raumhelligkeit, z. B. innerhalb eines Multisensors, sorgt f\u00fcr die exakte Anpassung des Beleuchtungsniveaus an die Arbeitsaufgabe. Hierf\u00fcr erforderlich sind dimmf\u00e4hige Aktoren (analoger Ausgang). Tageslichtschaltung Der \"kleine Bruder\" der Konstantlichtregelung ist \u00fcberall dort einsetzbar, wo die Beleuchtung nur schaltbar ausgef\u00fchrt werden kann. Zur Erfassung der Helligkeit ist ebenfalls ein Sensor im Raum erforderlich. Unterschreitet das Tageslicht die erforderliche Raumhelligkeit, wird Kunstlicht automatisch in ein oder mehreren Stufen zugeschaltet und bei Zunahme des Tageslichtanteils wieder abgeschaltet (digitaler Ausgang).","title":"Funktionen f\u00fcr Beleuchtung, Blendschutz und Tageslichtnutzung"},{"location":"1_2_Planungsabl%C3%A4ufe/#funktionen-fur-beleuchtung-etc-ii","text":"Automatiklicht In R\u00e4umen ohne ausreichende Tageslichtversorgung, z. B. in Fluren oder Sanit\u00e4rr\u00e4umen, l\u00e4sst sich Energie sparen, indem die Beleuchtung nur tempor\u00e4r eingeschaltet wird. Die Pr\u00e4senzerkennung liefert die hierf\u00fcr erforderlichen Sensordaten. Eine einstellbare Abschaltverz\u00f6gerung sorgt f\u00fcr Beleuchtungskomfort. Sonnenautomatik Au\u00dfenliegende Jalousien und bedingt auch Markisen sorgen vor allem f\u00fcr einen W\u00e4rmeschutz des Geb\u00e4udes. Innenliegende Jalousien, Vertikallamellen u. \u00e4. sorgen vor allem f\u00fcr Blendfreiheit an Arbeitspl\u00e4tzen. Die Sonnenautomatik sorgt nutzt Wetterdaten, damit der au\u00dfenliegende Sonnenschutz eine einstellbare Position immer dann einnimmt, wenn eine bestimmte Strahlungsintensit\u00e4t \u00fcberschritten wird. Der innen liegende Blendschutz ist i. d. R. nicht automatisiert, da das Blendungsempfinden individuell zu bewerten ist.","title":"Funktionen f\u00fcr Beleuchtung etc. II"},{"location":"1_2_Planungsabl%C3%A4ufe/#funktionen-fur-beleuchtung-etc-iii","text":"Lamellennachf\u00fchrung Die Lamellennachf\u00fchrung ist eine Weiterentwicklung der Sonnenautomatik . Bei hoher Strahlungsintensit\u00e4t f\u00e4hrt der Sonnenschutz dazu in eine Stellung, die zyklisch dem Sonnenstand angepasst wird. So wird unter Aufrechterhaltung des Blendschutzes die Tageslichtversorgung maximiert. Verschattungskorrektur Umliegende Geb\u00e4ude oder eigene Geb\u00e4udeteile sorgen auf den Fassaden f\u00fcr Schattenwurf, der die Blendschutzfunktion f\u00fcr die im Schatten liegenden Jalousien zeitweise unn\u00f6tig macht. Die Jalousien sollten f\u00fcr eine bessere Tageslichtversorgung in dieser Zeit ge\u00f6ffnet sein. Die Verschattungskorrektur korrigiert dies in Verbindung mit der Sonnenautomatik oder der Lamellennachf\u00fchrung arbeitet. Die Funktion wird gelegentlich auch Jahresverschattungsdiagramm genannt.","title":"Funktionen f\u00fcr Beleuchtung etc. III"},{"location":"1_2_Planungsabl%C3%A4ufe/#funktionen-fur-beleuchtung-etc-iv","text":"D\u00e4mmerungsschaltung Au\u00dfenbeleuchtung ist nur dann erforderlich, wenn es dunkel wird. Da der Zeitpunkt jahreszeitlich variiert, sorgt die D\u00e4mmerungsschaltung selbstst\u00e4ndig f\u00fcr den optimalen Einschaltmoment. Witterungsschutz Witterungsschutzfunktionen vermeiden Sch\u00e4den an der Sonnenschutzanlage. Sensoren f\u00fcr Temperatur, Niederschlag, Windgeschwindigkeit und -richtung stellen die erforderlichen Wetterdaten zur Verf\u00fcgung, damit der Sonnenschutz rechtzeitig vor Besch\u00e4digungen eingezogen wird (ggf. auch f\u00fcr Fenster).","title":"Funktionen f\u00fcr Beleuchtung etc. IV"},{"location":"2_1_Messkette/","text":"2.1 Messkette EVA-Prinzip Geb\u00e4udeautomation wird durch eine Steuerungseinheit \u00fcberwacht und gesteuert Hierzu werden Eingangs-Signale gemessen und Ausgangssignale erzeugt In der Steuerungseinheit werden Funktionen implementiert, die die Messsignale in Ausgangssignale umwandeln Steuerungseinheiten sind heute meist frei programmierbar (z.B. Speicherprogrammierbare Steuerung) oder wurden f\u00fcr bestimmte Funktionen vorprogrammiert (z.B. Mikrocontroller in LED-Vorschaltger\u00e4ten) Digitale Eing\u00e4nge Digitale Eing\u00e4nge k\u00f6nnen nur zwei Zust\u00e4nde annehmen (0: False oder 1: True ) Die Zust\u00e4nde werden durch Spannungen repr\u00e4sentiert i.d.R. gibt es Spannungsbereiche, die als 0 oder 1 interpretiert werden \u270d\ufe0f Aufgabe 2_1_1: Raspberry Pi Pico als Mikrocontroller Beim Raspberry Pi Pico handelt es sich um einen Mikrocontroller, der mittels Python programmiert werden kann Im folgenden wird folgende Hardware ben\u00f6tigt: Raspberry Pi Pico (WH) Breadboard Taster Widerstand ca. \\(470 \\Omega\\) und \\(10 \\,\\text{k}\\Omega\\) Jumperkabel Ziel ist es, dass der Mikrocontroller den Taster ausliest und den Zustand auf der Konsole ausgibt CircuitPython installieren Halten Sie den BOOTSEL Taster auf dem Pico gedr\u00fcckt und verbinden Sie diesen \u00fcber USB mit dem Rechner Passende Firmware UF2-File herunterladen und in den als USB-Laufwerk erkannten Pico kopieren Pico sollte jetzt neue Starten und die Firmware installieren Nach dem erneuten Verbinden sollten nun einige Programme im Pico liegen Programmieren des Pico mittels CircuitPython \u00d6ffnen Sie im Chrome Browser die Seite des Online Editors in einem Chromium-basierten Browser Verbinden Sie Sich mittels USB W\u00e4hlen Sie die Schnittstelle CircuitPython CDC Control aus \u00d6ffnen Sie das Verzeichnis (USB-Laufwerk) CIRCUITPY und w\u00e4hlen Sie USE / \u00d6ffnen Sie die Datei code.py und f\u00fcgen Sie den folgenden Inhalt ein \u00d6ffnen Sie die Serielle Schnittstellen, um die Ausgabe zu sehen Serial , \u00fcbertragen Sie den Code und starten Sie den Pico neu Save + Run Hauptprogramm code.py Dieses Programm wird automatisch ausgef\u00fchrt und ist der Einsteigspunkt f\u00fcr alle Programme (vgl. MAIN bei TwinCat) Passen Sie das Hauptprogramm so an, dass die LED l\u00e4nger hell als dunkel ist Passen Sie die Ausgabe an indem Sie \"Sleep!\" ersetzen # Externe Bibliotheken laden import time # Bibliothek Zeit-Funktionen import digitalio # Bibliothek zur Steuerung von GPIOs import board # Bibliothek welches die Adressen der Pins kennt: z.B. board.LED # Ein- und Ausg\u00e4nge definieren led = digitalio . DigitalInOut ( board . LED ) # Die Variable LED wird mit dem GPIO der LED auf dem Board verbunden led . direction = digitalio . Direction . OUTPUT # Legt Richtung des PIN fest -> Output # Endlosschleife while True : led . value = True time . sleep ( 0.5 ) led . value = False time . sleep ( 0.5 ) print ( \"Sleep!\" ) Pin-\u00dcbersicht VCC Voltage Common Connector: Spannungs- Versorgung \\(5\\) oder \\(3.3 \\,\\text{V}\\) Alles unter \\(0,8\\,\\text{V}\\) ist low alles \u00fcber \\(1,3\\,\\text{V}\\) ist high Ground: \\(0 \\,\\text{V}\\) Einige GPIOs k\u00f6nnen als Busleitungen genutzt werden: UART, SPI, I2C Quelle Breadboards - Steckplatine f\u00fcr Systemtest und Prototyping - vier Reihen f\u00fcr Spannungsversorgung - weitere Raster sind l\u00e4ngs verbunden Quelle General Purpose Input/Output Digitale Ein- und Ausg\u00e4nge GPIO arbeiten von \\(2...16 \\,\\text{mA}\\) GPIOs k\u00f6nnen bin\u00e4r gelesen und geschaltet werden Pin-Belegung \u2714\ufe0f L\u00f6sung \ud83d\udca1 anzeigen # Externe Bibliotheken laden import time # Bibliothek Zeit-Funktionen import digitalio # Bibliothek zur Steuerung von GPIOs import board # Bibliothek welches die Adressen der Pins kennt: z.B. board.LED # Ein- und Ausg\u00e4nge definieren led = digitalio . DigitalInOut ( board . LED ) # Die Variable LED wird mit dem GPIO der LED auf dem Board verbunden led . direction = digitalio . Direction . OUTPUT # Legt Richtung des PIN fest -> Output # Endlosschleife while True : led . value = True time . sleep ( 1.0 ) led . value = False time . sleep ( 0.2 ) print ( \"Sleep!\" ) \u270d\ufe0f Aufgabe 2_1_2: Anschluss eines Tasters an einen Raspberry Pi Pico Schlie\u00dfen Sie den Taster wie folgt an \\(R_{pullup} = 10 \\,\\text{k}\\Omega\\) Verbinden Sie den Taster mit dem 3.3V Pin und dem GPIO 0 F\u00fcgen Sie die folgenden Code- Teile an den richtigen Stellen ein und starten Sie das Programm import time import board import digitalio button_pin = board . GP0 # Replace with the GPIO pin connected to your button button = digitalio . DigitalInOut ( button_pin ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP # Use pull-up resistor; change if using pull-down while True : if not button . value : # Button is pressed (LOW) print ( \"Button Pressed!\" ) else : print ( \"Button Released!\" ) time . sleep ( 0.1 ) # Add a small delay to debounce the button GPIO-Eingang mit Taster/Schalter und Pullup-Widerstand Unbeschaltet oszillieren die GPIOs h\u00e4ufig unsauber zwischen den Zust\u00e4nden Grundzustand des Eingangs bei offenem Schalter: high Durch schlie\u00dfen: low \\(4{,}7~\\text{k}\\Omega\\) als Standardwert (RaspBerry Pis haben eingebaute Widerst\u00e4nde, die aktiviert werden k\u00f6nnen) Quelle1 , Quelle2 GPIO-Eingang mit Taster/Schalter und Pulldown-Widerstand Grundzustand des Eingangs: low Durch schlie\u00dfen: high der Regel \\(10~\\text{k}\\Omega\\) Zusammenfassung Schalter und Taster In der Praxis tendiert man dazu, GPIO-Eing\u00e4nge mit einem Pullup-Widerstand mit +VCC zu verbinden und gegen Ground (GND) zu schalten Erfordert Negation in der Software Werte von \\(10\\) bis \\(100~\\text{k}\\Omega\\) GPIO-Eingang mit Taster/Schalter und Querwiderstand Mehr zu Pull-Up vs Pull-Down Digitale Ausg\u00e4nge Ausg\u00e4nge k\u00f6nnen mit einer Spannung beschaltet werden Bei einem Raspberry Pi Pico sind die Ausg\u00e4nge auf \\(3.3 \\,\\text{V}\\) begrenzt Die Ausg\u00e4nge k\u00f6nnen bis zu \\(16 \\,\\text{mA}\\) liefern \u2714\ufe0f L\u00f6sung \ud83d\udca1 anzeigen import time import board import digitalio button_pin = board . GP0 # Replace with the GPIO pin connected to your button button = digitalio . DigitalInOut ( button_pin ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP # Use pull-up resistor; change if using pull-down while True : if not button . value : # Button is pressed (LOW) print ( \"Button Pressed!\" ) else : print ( \"Button Released!\" ) time . sleep ( 0.1 ) # Add a small delay to debounce the button \u270d\ufe0f Aufgabe 2_1_3: Anschluss einer LED an einen Raspberry Pi Pico Nun wollen wir eine LED anschlie\u00dfen in der Folge \u00fcber den Taster schalten Die LED soll nach einem Druck auf den Taster ihren Zustand wechseln passen Sie den Code entsprechend an und nutzen Sie dazu die folgenden Code-Teile import time import board import digitalio led_pin = board . GP1 # Replace with the GPIO pin connected to your LED led = digitalio . DigitalInOut ( led_pin ) led . direction = digitalio . Direction . OUTPUT while True : led . value = not led . value # Toggle the LED state time . sleep ( 0.2 ) # Add a small delay for debouncing time . sleep ( 0.1 ) Quelle Leuchtdioden Langes Bein: Anode Quelle Ausgang verschalten links: LED an Masse GPIO auf high > LED an rechts: LED an VCC GPIO auf low > LED an \\(R_v = 470 \\,\\Omega\\) Quelle Ausgang verschalten W\u00e4hlen Sie einen geeigneten GPIO Schlie\u00dfen Sie die LED in Reihe an den GPIO und einen Widerstand an und verbinden Sie die andere Seite des Widerstands mit Ground ( \\(0\\text{ V}\\) ) \u2714\ufe0f L\u00f6sung \ud83d\udca1 anzeigen import time import board import digitalio led_pin = board . GP1 # Replace with the GPIO pin connected to your LED led = digitalio . DigitalInOut ( led_pin ) led . direction = digitalio . Direction . OUTPUT button_pin = board . GP0 # Replace with the GPIO pin connected to your button button = digitalio . DigitalInOut ( button_pin ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP # Use pull-up resistor; change if using pull-down while True : if not button . value : # Button is pressed (LOW) print ( \"Button Pressed!\" ) led . value = not led . value # Toggle the LED state else : print ( \"Button Released!\" ) time . sleep ( 0.1 ) # Add a small delay to debounce the button Relais und Sch\u00fctze F\u00fcr viele Anwendungen ist die Leistung der GPIOs nicht ausreichend ( \\(P=UI=3.3\\text{ V} \\cdot 4\\text{ mA} = 13.2 \\text{ mW}\\) ) Eine h\u00f6here Spannung an den Ausg\u00e4ngen ist nicht m\u00f6glich (Sicherheit, Energieeffizienz, Bauform) Relais sind elektromagnetische Schalter, die eine hohe Leistung schalten k\u00f6nnen indem sie einen Schaltkontakt \u00f6ffnen oder schlie\u00dfen heute meist nicht mehr mechanisch sondern elektronisch realisiert mit Zusatzfunktionen (Stromsto\u00dfrelais, Zeitrelais, Sch\u00fctze) \ud83e\udd13 Selbsthaltefunktion Hierbei wird durch das Schlie\u00dfen des Schalters ein Stromkreis geschlossen, der das Relais anzieht und somit ein andauerndes Schlie\u00dfen des Schalters erm\u00f6glicht Wenn der Taster S2 (Schlie\u00dfer) bet\u00e4tigt wird, zieht das Relais K1 an und schlie\u00dft den Kontakt K1. Wenn der Taster S2 nun losgelassen wird, \u00fcberbr\u00fcckt ihn der Kontakt K1 und das Relais bleibt weiterhin angezogen. Durch Bet\u00e4tigung des Tasters S1 (\u00d6ffner) wird das Relais stromlos und f\u00e4llt ab, K1 ist damit offen. Wenn S2 bet\u00e4tigt wird, w\u00fcrde wieder K1 anziehen und in die Selbsthaltung gehen. Quelle Pulsweitenmodulation Digitale Ausg\u00e4nge k\u00f6nnen nur zwei Zust\u00e4nde annehmen (0 / False oder 1 : True ) Einige Verbraucher (z.B. Motoren, LEDs) kann man \u00fcber PWM quasi-analog steuern (Ausgangsleistung quasi-stetig anpassen) Hierzu muss man Periodendauer \\(T\\) und Duty Cycle \\(t\\) (Impulsdauer) geeignet setzen Die Frequenz \\(f = \\frac{1}{T}\\) ist beim Raspberry Pi Pico standardm\u00e4\u00dfig \\(500 \\,\\text{Hz}\\) Quelle \ud83e\udd13 \u270d\ufe0f Aufgabe 2_1_4: Anschluss einer LED mit PWM an einen Raspberry Pi Pico Sorgen Sie nun daf\u00fcr, dass die LED mit PWM angesteuert wird, so dass diese nach Bet\u00e4tigung des Tasters f\u00fcr \\(1\\,\\text{s}\\) leuchtet und dann langsam \u00fcber \\(5\\,\\text{s}\\) ausgeht Beispielcode f\u00fcr PWM import pwmio import board pwm = pwmio . PWMOut ( board . GP1 ) # output on LED pin with default of 500Hz while True : for cycle in range ( 0 , 65535 ): # Cycles through the full PWM range from 0 to 65535 pwm . duty_cycle = cycle # Cycles the LED pin duty cycle through the range of values for cycle in range ( 65534 , 0 , - 1 ): # Cycles through the PWM range backwards from 65534 to 0 pwm . duty_cycle = cycle # Cycles the LED pin duty cycle through the range of values Die L\u00e4nge des Duty-Cycles wird durch \\(2^{16}=65536\\) Werte abgestuft bei duty_cycle = 0 der Duty-Cycle bei \\(0 \\%\\) und die LED aus bei duty_cycle = 65535 der Duty-Cycle genau so lang wie die Periodendauer Quelle \u2714\ufe0f L\u00f6sung \ud83d\udca1 anzeigen import pwmio import board import time import digitalio pwm = pwmio . PWMOut ( board . GP1 ) # output on LED pin with default of 500Hz button_pin = board . GP0 # Replace with the GPIO pin connected to your button button = digitalio . DigitalInOut ( button_pin ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP # Use pull-up resistor; change if using pull-down while True : if not button . value : # Button is pressed (LOW) print ( \"Button Pressed!\" ) pwm . duty_cycle = 65535 time . sleep ( 1 ) for cycle in range ( 65534 , 0 , - 1 ): # Cycles through the PWM range backwards from 65534 to 0 pwm . duty_cycle = cycle # Cycles the LED pin duty cycle through the range of values time . sleep ( 0.0005 ) Analoge Eing\u00e4nge Sensoren liefern meist analoge Signale (z.B. Spannung, Strom, Widerstand) z.B. basieren viele Temperatur-Sensoren auf dem Widerstand von Metallen Damit \u00e4ndert sich bei gleichbleibender Spannung der Strom, welcher am Eingang gemessen werden kann Analog-Digital-Wandler Der Analog-Digital-Wandler (ADC) wandelt ein analoges Signal in eine digitale Zahl um Dabei gibt es zwei relevante Parameter Aufl\u00f6sung: Anzahl der m\u00f6glichen Werte Referenzspannung: Spannungsbereich, der in die Aufl\u00f6sung abgebildet wird z.B. 16 Bit Aufl\u00f6sung und \\(3.3 \\,\\text{V}\\) Referenzspannung \\(\\Rightarrow\\) \\(2^{16} = 65536\\) Werte zwischen \\(0\\) und \\(3.3 \\,\\text{V}\\) Zudem k\u00f6nnen sich Systeme in ihrer Abtastrate unterscheiden, d.h. wie oft Werte gelesen werden k\u00f6nnen (z.B. durch den Sleep-Timer im while -loop) \u270d\ufe0f Aufgabe 2_1_5: Anschluss eines analogen Helligkeitssensors Verbinden Sie die + und - Leiste des Breadboards mit \\(3.3 \\,\\text{V}\\) und GND des Raspberry Pi Pico Verbinden Sie den analogen Eingang A2 mit einem Female-to-Female-Kabel F\u00fcgen Sie den folgenden Code ein import board import analogio import time # Initialisierung des ADC (Analog-Digital Converter) ldr = analogio . AnalogIn ( board . A2 ) # Wiederholung while True : # ADC als Dezimalzahl lesen read = ldr . value # Ausgabe in der Kommandozeile/Shell print ( \"ADC:\" , read ) # Warten time . sleep ( 1 ) Verbinden Sie den Eingang zun\u00e4chst mit + , dann mit - Welche Werte erhalten Sie? \u2714\ufe0f L\u00f6sung \ud83d\udca1 anzeigen Bei einer direkten Verbindung des Eingangs mit + oder - erhalten Sie die maximalen ( 2**16 ) bzw. minimalen Werte (nahe 0 ) Schlie\u00dfen Sie einen Fotowiderstand als analogen Helligkeitssensor an den Raspberry Pi Pico an Links (I): +VCC z.B. 3,3 oder 5 Volt Mitte: GND / Masse / 0 Volt Rechts (S): Verbindungspunkt des Spannungsteilers Sie k\u00f6nnen den Sensor entweder auf dem Breadboard montieren oder ihn mit Male-Female-Kabeln direkt verbinden Verdunkeln Sie und beleuchten Sie den Sensor und beobachten Sie die \u00c4nderung des Eingangswertes Je mehr Licht auf den Fotowiderstand f\u00e4llt, desto kleiner wird sein Widerstand. Optional k\u00f6nnen Sie auch die Beleuchtungsst\u00e4rke mit einem Luxmeter messen und die Werte vergleichen Zum Testen k\u00f6nnen Sie den Analog-Eingang mit \\(3.3 \\text{ Volt}\\) und \\(0 \\text{ Volt}\\) verbinden Lesen Sie den Wert des Sensors aus und geben Sie diesen auf der Konsole aus Notieren Sie sich einige Werte ( ADC ) f\u00fcr verschiedene Hell-Dunkel-Verh\u00e4ltnisse (z.B. Zuhalten, Raumlicht, Taschenlampe) und notieren Sie die Werte Umgebung ADC E in Lux U in V Abgedunkelt Raumlicht Taschenlampe Quelle Mapping von Eingangswert zu Spannung Die Spannung und der ADC - Wert sind linear zueinander Entsprechend kann jeder Wert des ADC \u00fcber einer lineare Funktion in eine Spannung umgerechnet werden Symbol Description \\(U_{max}\\) maximale Beleuchtungsst\u00e4rke \\(U_{min}\\) minimale Beleuchtungsst\u00e4rke \\(z_{max}\\) maximaler Messwert des ADC \\(z_{min}\\) minimaler Messwert des ADC Annahme: Linearer Zusammenhang \\(U = f(z) = \\beta_0 + \\beta_1 z\\) 1: Wie gro\u00df ist der Y-Achsenabschnitt \\(\\beta_0\\) ? Bei welchen Wert hat \\(U\\) , wenn \\(z=0\\) ? 2: Wie gro\u00df ist die Steigung \\(\\beta_1\\) ? Wie gro\u00df ist die \u00c4nderung von \\(U\\) pro \u00c4nderung von \\(z\\) ? \\(\\beta_1 = \\frac{{U_{max}} - U_{min}}{z_{max} - z_{min}}\\) Der folgende Code \u00fcbernimmt dein Eingangswert und gibt einen Spannungs-Wert zwischen 3.3 und 0 zur\u00fcck F\u00fcgen Sie die Funktion map_lin in den Code ein und geben Sie die Spannung auf der Konsole aus def map_lin ( z ): U_max = 3.3 U_min = 0 z_max = 65535 z_min = 0 beta_0 = U_min beta_1 = ( U_max - U_min ) / ( z_max - z_min ) return beta_0 + beta_1 * z Wenn Sie Ihren Code sch\u00f6n aufger\u00e4umt haben wollen k\u00f6nnen eine Datei mappings.py im gleiche Ordner wie code.py erstellen und die Funktion dort speichern Sie k\u00f6nnen diese dann mittels from mappings import map_lin ins main.py importieren und nutzen Mapping von Eingangswert zu physikalischer Gr\u00f6\u00dfe Um sinnvoller mit den Werten arbeiten zu k\u00f6nnen, ist es sinnvoller die gelesen ADC -Werte read in eine Variable mit einer sinnvollen physikalischen Einheit zu \u00fcberf\u00fchren Im Fall dieses Sensors und Aufbaus lassen sich die Werte gut mit einer Parabel anpassen \\(E= f(x) = (a(x-s))^2\\) \\(a =0.0015\\) beschreibt die Steilheit der Parabel \\(s = 44000\\) ist der Verschiebung der Parabel auf der x-Achse \\(x\\) ist der Eingangswert Erstellen Sie in eine Datei mappings.py (im gleichen Ordner, wie die code.py ) eine Funktion map_quat() , die stattdessen die oben angegeben Formel implementiert \u00dcbliche Beleuchtungsst\u00e4rken \\(E\\) Umfeld \\(E \\text{ in lux}\\) Mondlose, klare Nacht 0,0003 Nachts bei Vollmond 0,2 Beleuchtete Strassen, Pl\u00e4tze 10..20 Abstellr\u00e4ume, Lagerr\u00e4ume 50 Lagerr\u00e4ume, Toiletten, Treppen 100 Speiser\u00e4ume, Werkhallen, 200 L\u00e4den, Sitzungszimmer 300 Arbeitspl\u00e4tze, Schulzimmer 500 erh\u00f6hte Anspr\u00fcche 750 Elektronikmontage, Uhrenmacher 1.000 Bedeckter Himmel im Winter 1.000.. 2.000 Bedeckter Himmel im Sommer 5.000..20.000 Sonnenlicht im Winter 10.000 Sonnenlicht im Sommer 100.000 Nachverarbeitung nach ADC Viele (teurere) Peripherie-Ger\u00e4te kommen als Transmitter (Kombination aus dem Sensor selbst und einem Messumformer) Diese linearisieren sie spannungs-(oder Strom) Ausgabe Eine Umrechnung der Spannungswerte an Eingang in die Physikalische Gr\u00f6\u00dfen muss jedoch weiterhin stattfinden Informationen hierzu finden sich meinst im Datenblatt Quelle \ud83e\udd13\u270d\ufe0f Aufgabe 2_1_5: Mapping eines Analogen Helligkeitssensors Oben ist die quadratische Funktion gegeben, die die gemessenen Werte in Beleuchtungsst\u00e4rke in Lux umrechnet Implementieren Sie diese Funktion in Python und geben Sie dann eine Nachricht mit der Beleuchtungsst\u00e4rke in Lux aus Orientieren Sie sich dabei an folgendem Code, der ein Beispiel f\u00fcr ein lineares Mapping zeigt Evtl. m\u00fcssen Sie die Werte an Ihren Sensor und Aufbau anpassen, um die Beleuchtungsst\u00e4rke in Lux zu erhalten \ud83e\udd13 Im besten Fall wird map_ln in einer eigenen Datei mappings.py gespeichert und kann dann mittels import mappings in anderen Programmen genutzt werden import board import analogio import time from mappings import map_lin # Initialisierung des ADC (Analog-Digital Converter) ldr = analogio . AnalogIn ( board . A2 ) # Wiederholung while True : # ADC als Dezimalzahl lesen read = ldr . value # Ausgabe in der Kommandozeile/Shell print ( \"ADC:\" , read ) print ( \"E in Lux\" , map_lin ( read )) # Warten time . sleep ( 1 ) \u2714\ufe0f L\u00f6sung \ud83d\udca1 anzeigen import board import analogio import time from mappings import map_quat # Initialisierung des ADC (Analog-Digital Converter) ldr = analogio . AnalogIn ( board . A2 ) # Wiederholung while True : # ADC als Dezimalzahl lesen read = ldr . value # Ausgabe in der Kommandozeile/Shell print ( \"ADC:\" , read ) print ( \"E in Lux\" , map_quat ( read )) # Warten time . sleep ( 1 ) \ud83d\udca1 anzeigen def map_lin ( z ): E_max = 1 E_min = 0 z_max = 65535 z_min = 0 beta_0 = E_min beta_1 = ( E_max - E_min ) / ( z_max - z_min ) return beta_0 + beta_1 * z def map_quat ( x ): s = 44000 a = 0.0015 return (( x - s ) * a ) ** 2 \ud83e\udd13 Verwendung von Globalen Variablen einige Variablen sind so grundlegend, dass wir Sie nicht im Code sondern zentral ver\u00e4ndern wollen Hierzu k\u00f6nnen wird Umgebungsvariablen in der settings.toml ver\u00e4ndern im Verzeichnis CIRCUITPY \u00e4ndern MY_NAME = \"Julian\" - Im Code k\u00f6nnen diese mittels os aufgerufen werden # connect to your SSID import os print ( os . getenv ( 'MY_NAME' )) Passen Sie den Code so an, dass die zur Umwandlung ben\u00f6tigten Werte als Umgebungsvariablen gesetzt werden k\u00f6nnen L\u00f6sung \ud83d\udca1 anzeigen import board import analogio import time from mappings import map_quat # Initialisierung des ADC (Analog-Digital Converter) ldr = analogio . AnalogIn ( board . A2 ) # Wiederholung while True : # ADC als Dezimalzahl lesen read = ldr . value # Ausgabe in der Kommandozeile/Shell print ( \"ADC:\" , read ) print ( \"E in Lux\" , map_quat ( read )) # Warten time . sleep ( 1 ) \ud83d\udca1 anzeigen def map_lin ( z ): E_max = 1 E_min = 0 z_max = 65535 z_min = 0 beta_0 = E_min beta_1 = ( E_max - E_min ) / ( z_max - z_min ) return beta_0 + beta_1 * z def map_quat ( x ): s = 44000 a = 0.0015 return (( x - s ) * a ) ** 2 \ud83e\udd13 \u270d\ufe0f Aufgabe 2_1_6: Nicht bei jedem Sensor wird die gefittete Kurve perfekt passen passen Sie den Code so an, dass die Parameter der Kurve in der settings.toml hinterlegt werden k\u00f6nnen, um diese m\u00f6glichst einfach anzupassen Analoge Ausg\u00e4nge Entsprechend gibt es auch analoge Ausg\u00e4nge Diese k\u00f6nnen z.B. zur Ansteuerung von Motoren genutzt werden Dabei wird einer meist der Wert einer Integer-Variable im Speicher in einen Spannungswert umgewandelt","title":"Messkette"},{"location":"2_1_Messkette/#21-messkette","text":"","title":"2.1 Messkette"},{"location":"2_1_Messkette/#eva-prinzip","text":"Geb\u00e4udeautomation wird durch eine Steuerungseinheit \u00fcberwacht und gesteuert Hierzu werden Eingangs-Signale gemessen und Ausgangssignale erzeugt In der Steuerungseinheit werden Funktionen implementiert, die die Messsignale in Ausgangssignale umwandeln Steuerungseinheiten sind heute meist frei programmierbar (z.B. Speicherprogrammierbare Steuerung) oder wurden f\u00fcr bestimmte Funktionen vorprogrammiert (z.B. Mikrocontroller in LED-Vorschaltger\u00e4ten)","title":"EVA-Prinzip"},{"location":"2_1_Messkette/#digitale-eingange","text":"Digitale Eing\u00e4nge k\u00f6nnen nur zwei Zust\u00e4nde annehmen (0: False oder 1: True ) Die Zust\u00e4nde werden durch Spannungen repr\u00e4sentiert i.d.R. gibt es Spannungsbereiche, die als 0 oder 1 interpretiert werden","title":"Digitale Eing\u00e4nge"},{"location":"2_1_Messkette/#aufgabe-2_1_1-raspberry-pi-pico-als-mikrocontroller","text":"Beim Raspberry Pi Pico handelt es sich um einen Mikrocontroller, der mittels Python programmiert werden kann Im folgenden wird folgende Hardware ben\u00f6tigt: Raspberry Pi Pico (WH) Breadboard Taster Widerstand ca. \\(470 \\Omega\\) und \\(10 \\,\\text{k}\\Omega\\) Jumperkabel Ziel ist es, dass der Mikrocontroller den Taster ausliest und den Zustand auf der Konsole ausgibt","title":"\u270d\ufe0f Aufgabe 2_1_1: Raspberry Pi Pico als Mikrocontroller"},{"location":"2_1_Messkette/#circuitpython-installieren","text":"Halten Sie den BOOTSEL Taster auf dem Pico gedr\u00fcckt und verbinden Sie diesen \u00fcber USB mit dem Rechner Passende Firmware UF2-File herunterladen und in den als USB-Laufwerk erkannten Pico kopieren Pico sollte jetzt neue Starten und die Firmware installieren Nach dem erneuten Verbinden sollten nun einige Programme im Pico liegen","title":"CircuitPython installieren"},{"location":"2_1_Messkette/#programmieren-des-pico-mittels-circuitpython","text":"\u00d6ffnen Sie im Chrome Browser die Seite des Online Editors in einem Chromium-basierten Browser Verbinden Sie Sich mittels USB W\u00e4hlen Sie die Schnittstelle CircuitPython CDC Control aus \u00d6ffnen Sie das Verzeichnis (USB-Laufwerk) CIRCUITPY und w\u00e4hlen Sie USE / \u00d6ffnen Sie die Datei code.py und f\u00fcgen Sie den folgenden Inhalt ein \u00d6ffnen Sie die Serielle Schnittstellen, um die Ausgabe zu sehen Serial , \u00fcbertragen Sie den Code und starten Sie den Pico neu Save + Run","title":"Programmieren des Pico mittels CircuitPython"},{"location":"2_1_Messkette/#hauptprogramm-codepy","text":"Dieses Programm wird automatisch ausgef\u00fchrt und ist der Einsteigspunkt f\u00fcr alle Programme (vgl. MAIN bei TwinCat) Passen Sie das Hauptprogramm so an, dass die LED l\u00e4nger hell als dunkel ist Passen Sie die Ausgabe an indem Sie \"Sleep!\" ersetzen # Externe Bibliotheken laden import time # Bibliothek Zeit-Funktionen import digitalio # Bibliothek zur Steuerung von GPIOs import board # Bibliothek welches die Adressen der Pins kennt: z.B. board.LED # Ein- und Ausg\u00e4nge definieren led = digitalio . DigitalInOut ( board . LED ) # Die Variable LED wird mit dem GPIO der LED auf dem Board verbunden led . direction = digitalio . Direction . OUTPUT # Legt Richtung des PIN fest -> Output # Endlosschleife while True : led . value = True time . sleep ( 0.5 ) led . value = False time . sleep ( 0.5 ) print ( \"Sleep!\" )","title":"Hauptprogramm code.py"},{"location":"2_1_Messkette/#pin-ubersicht","text":"VCC Voltage Common Connector: Spannungs- Versorgung \\(5\\) oder \\(3.3 \\,\\text{V}\\) Alles unter \\(0,8\\,\\text{V}\\) ist low alles \u00fcber \\(1,3\\,\\text{V}\\) ist high Ground: \\(0 \\,\\text{V}\\) Einige GPIOs k\u00f6nnen als Busleitungen genutzt werden: UART, SPI, I2C Quelle","title":"Pin-\u00dcbersicht"},{"location":"2_1_Messkette/#breadboards","text":"- Steckplatine f\u00fcr Systemtest und Prototyping - vier Reihen f\u00fcr Spannungsversorgung - weitere Raster sind l\u00e4ngs verbunden Quelle","title":"Breadboards"},{"location":"2_1_Messkette/#general-purpose-inputoutput","text":"Digitale Ein- und Ausg\u00e4nge GPIO arbeiten von \\(2...16 \\,\\text{mA}\\) GPIOs k\u00f6nnen bin\u00e4r gelesen und geschaltet werden Pin-Belegung","title":"General Purpose Input/Output"},{"location":"2_1_Messkette/#losung","text":"\ud83d\udca1 anzeigen # Externe Bibliotheken laden import time # Bibliothek Zeit-Funktionen import digitalio # Bibliothek zur Steuerung von GPIOs import board # Bibliothek welches die Adressen der Pins kennt: z.B. board.LED # Ein- und Ausg\u00e4nge definieren led = digitalio . DigitalInOut ( board . LED ) # Die Variable LED wird mit dem GPIO der LED auf dem Board verbunden led . direction = digitalio . Direction . OUTPUT # Legt Richtung des PIN fest -> Output # Endlosschleife while True : led . value = True time . sleep ( 1.0 ) led . value = False time . sleep ( 0.2 ) print ( \"Sleep!\" )","title":"\u2714\ufe0f L\u00f6sung"},{"location":"2_1_Messkette/#aufgabe-2_1_2-anschluss-eines-tasters-an-einen-raspberry-pi-pico","text":"Schlie\u00dfen Sie den Taster wie folgt an \\(R_{pullup} = 10 \\,\\text{k}\\Omega\\) Verbinden Sie den Taster mit dem 3.3V Pin und dem GPIO 0 F\u00fcgen Sie die folgenden Code- Teile an den richtigen Stellen ein und starten Sie das Programm import time import board import digitalio button_pin = board . GP0 # Replace with the GPIO pin connected to your button button = digitalio . DigitalInOut ( button_pin ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP # Use pull-up resistor; change if using pull-down while True : if not button . value : # Button is pressed (LOW) print ( \"Button Pressed!\" ) else : print ( \"Button Released!\" ) time . sleep ( 0.1 ) # Add a small delay to debounce the button","title":"\u270d\ufe0f Aufgabe 2_1_2: Anschluss eines Tasters an einen Raspberry Pi Pico"},{"location":"2_1_Messkette/#gpio-eingang-mit-tasterschalter-und-pullup-widerstand","text":"Unbeschaltet oszillieren die GPIOs h\u00e4ufig unsauber zwischen den Zust\u00e4nden Grundzustand des Eingangs bei offenem Schalter: high Durch schlie\u00dfen: low \\(4{,}7~\\text{k}\\Omega\\) als Standardwert (RaspBerry Pis haben eingebaute Widerst\u00e4nde, die aktiviert werden k\u00f6nnen) Quelle1 , Quelle2","title":"GPIO-Eingang mit Taster/Schalter und Pullup-Widerstand"},{"location":"2_1_Messkette/#gpio-eingang-mit-tasterschalter-und-pulldown-widerstand","text":"Grundzustand des Eingangs: low Durch schlie\u00dfen: high der Regel \\(10~\\text{k}\\Omega\\)","title":"GPIO-Eingang mit Taster/Schalter und Pulldown-Widerstand"},{"location":"2_1_Messkette/#zusammenfassung-schalter-und-taster","text":"In der Praxis tendiert man dazu, GPIO-Eing\u00e4nge mit einem Pullup-Widerstand mit +VCC zu verbinden und gegen Ground (GND) zu schalten Erfordert Negation in der Software Werte von \\(10\\) bis \\(100~\\text{k}\\Omega\\) GPIO-Eingang mit Taster/Schalter und Querwiderstand Mehr zu Pull-Up vs Pull-Down","title":"Zusammenfassung Schalter und Taster"},{"location":"2_1_Messkette/#digitale-ausgange","text":"Ausg\u00e4nge k\u00f6nnen mit einer Spannung beschaltet werden Bei einem Raspberry Pi Pico sind die Ausg\u00e4nge auf \\(3.3 \\,\\text{V}\\) begrenzt Die Ausg\u00e4nge k\u00f6nnen bis zu \\(16 \\,\\text{mA}\\) liefern","title":"Digitale Ausg\u00e4nge"},{"location":"2_1_Messkette/#losung_1","text":"\ud83d\udca1 anzeigen import time import board import digitalio button_pin = board . GP0 # Replace with the GPIO pin connected to your button button = digitalio . DigitalInOut ( button_pin ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP # Use pull-up resistor; change if using pull-down while True : if not button . value : # Button is pressed (LOW) print ( \"Button Pressed!\" ) else : print ( \"Button Released!\" ) time . sleep ( 0.1 ) # Add a small delay to debounce the button","title":"\u2714\ufe0f L\u00f6sung"},{"location":"2_1_Messkette/#aufgabe-2_1_3-anschluss-einer-led-an-einen-raspberry-pi-pico","text":"Nun wollen wir eine LED anschlie\u00dfen in der Folge \u00fcber den Taster schalten Die LED soll nach einem Druck auf den Taster ihren Zustand wechseln passen Sie den Code entsprechend an und nutzen Sie dazu die folgenden Code-Teile import time import board import digitalio led_pin = board . GP1 # Replace with the GPIO pin connected to your LED led = digitalio . DigitalInOut ( led_pin ) led . direction = digitalio . Direction . OUTPUT while True : led . value = not led . value # Toggle the LED state time . sleep ( 0.2 ) # Add a small delay for debouncing time . sleep ( 0.1 ) Quelle","title":"\u270d\ufe0f Aufgabe 2_1_3: Anschluss einer LED an einen Raspberry Pi Pico"},{"location":"2_1_Messkette/#leuchtdioden","text":"Langes Bein: Anode Quelle","title":"Leuchtdioden"},{"location":"2_1_Messkette/#ausgang-verschalten","text":"links: LED an Masse GPIO auf high > LED an rechts: LED an VCC GPIO auf low > LED an \\(R_v = 470 \\,\\Omega\\) Quelle","title":"Ausgang verschalten"},{"location":"2_1_Messkette/#ausgang-verschalten_1","text":"W\u00e4hlen Sie einen geeigneten GPIO Schlie\u00dfen Sie die LED in Reihe an den GPIO und einen Widerstand an und verbinden Sie die andere Seite des Widerstands mit Ground ( \\(0\\text{ V}\\) )","title":"Ausgang verschalten"},{"location":"2_1_Messkette/#losung_2","text":"\ud83d\udca1 anzeigen import time import board import digitalio led_pin = board . GP1 # Replace with the GPIO pin connected to your LED led = digitalio . DigitalInOut ( led_pin ) led . direction = digitalio . Direction . OUTPUT button_pin = board . GP0 # Replace with the GPIO pin connected to your button button = digitalio . DigitalInOut ( button_pin ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP # Use pull-up resistor; change if using pull-down while True : if not button . value : # Button is pressed (LOW) print ( \"Button Pressed!\" ) led . value = not led . value # Toggle the LED state else : print ( \"Button Released!\" ) time . sleep ( 0.1 ) # Add a small delay to debounce the button","title":"\u2714\ufe0f L\u00f6sung"},{"location":"2_1_Messkette/#relais-und-schutze","text":"F\u00fcr viele Anwendungen ist die Leistung der GPIOs nicht ausreichend ( \\(P=UI=3.3\\text{ V} \\cdot 4\\text{ mA} = 13.2 \\text{ mW}\\) ) Eine h\u00f6here Spannung an den Ausg\u00e4ngen ist nicht m\u00f6glich (Sicherheit, Energieeffizienz, Bauform) Relais sind elektromagnetische Schalter, die eine hohe Leistung schalten k\u00f6nnen indem sie einen Schaltkontakt \u00f6ffnen oder schlie\u00dfen heute meist nicht mehr mechanisch sondern elektronisch realisiert mit Zusatzfunktionen (Stromsto\u00dfrelais, Zeitrelais, Sch\u00fctze)","title":"Relais und Sch\u00fctze"},{"location":"2_1_Messkette/#selbsthaltefunktion","text":"Hierbei wird durch das Schlie\u00dfen des Schalters ein Stromkreis geschlossen, der das Relais anzieht und somit ein andauerndes Schlie\u00dfen des Schalters erm\u00f6glicht Wenn der Taster S2 (Schlie\u00dfer) bet\u00e4tigt wird, zieht das Relais K1 an und schlie\u00dft den Kontakt K1. Wenn der Taster S2 nun losgelassen wird, \u00fcberbr\u00fcckt ihn der Kontakt K1 und das Relais bleibt weiterhin angezogen. Durch Bet\u00e4tigung des Tasters S1 (\u00d6ffner) wird das Relais stromlos und f\u00e4llt ab, K1 ist damit offen. Wenn S2 bet\u00e4tigt wird, w\u00fcrde wieder K1 anziehen und in die Selbsthaltung gehen. Quelle","title":"\ud83e\udd13 Selbsthaltefunktion"},{"location":"2_1_Messkette/#pulsweitenmodulation","text":"Digitale Ausg\u00e4nge k\u00f6nnen nur zwei Zust\u00e4nde annehmen (0 / False oder 1 : True ) Einige Verbraucher (z.B. Motoren, LEDs) kann man \u00fcber PWM quasi-analog steuern (Ausgangsleistung quasi-stetig anpassen) Hierzu muss man Periodendauer \\(T\\) und Duty Cycle \\(t\\) (Impulsdauer) geeignet setzen Die Frequenz \\(f = \\frac{1}{T}\\) ist beim Raspberry Pi Pico standardm\u00e4\u00dfig \\(500 \\,\\text{Hz}\\) Quelle","title":"Pulsweitenmodulation"},{"location":"2_1_Messkette/#aufgabe-2_1_4-anschluss-einer-led-mit-pwm-an-einen-raspberry-pi-pico","text":"Sorgen Sie nun daf\u00fcr, dass die LED mit PWM angesteuert wird, so dass diese nach Bet\u00e4tigung des Tasters f\u00fcr \\(1\\,\\text{s}\\) leuchtet und dann langsam \u00fcber \\(5\\,\\text{s}\\) ausgeht","title":"\ud83e\udd13 \u270d\ufe0f Aufgabe 2_1_4: Anschluss einer LED mit PWM an einen Raspberry Pi Pico"},{"location":"2_1_Messkette/#beispielcode-fur-pwm","text":"import pwmio import board pwm = pwmio . PWMOut ( board . GP1 ) # output on LED pin with default of 500Hz while True : for cycle in range ( 0 , 65535 ): # Cycles through the full PWM range from 0 to 65535 pwm . duty_cycle = cycle # Cycles the LED pin duty cycle through the range of values for cycle in range ( 65534 , 0 , - 1 ): # Cycles through the PWM range backwards from 65534 to 0 pwm . duty_cycle = cycle # Cycles the LED pin duty cycle through the range of values Die L\u00e4nge des Duty-Cycles wird durch \\(2^{16}=65536\\) Werte abgestuft bei duty_cycle = 0 der Duty-Cycle bei \\(0 \\%\\) und die LED aus bei duty_cycle = 65535 der Duty-Cycle genau so lang wie die Periodendauer Quelle","title":"Beispielcode f\u00fcr PWM"},{"location":"2_1_Messkette/#losung_3","text":"\ud83d\udca1 anzeigen import pwmio import board import time import digitalio pwm = pwmio . PWMOut ( board . GP1 ) # output on LED pin with default of 500Hz button_pin = board . GP0 # Replace with the GPIO pin connected to your button button = digitalio . DigitalInOut ( button_pin ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP # Use pull-up resistor; change if using pull-down while True : if not button . value : # Button is pressed (LOW) print ( \"Button Pressed!\" ) pwm . duty_cycle = 65535 time . sleep ( 1 ) for cycle in range ( 65534 , 0 , - 1 ): # Cycles through the PWM range backwards from 65534 to 0 pwm . duty_cycle = cycle # Cycles the LED pin duty cycle through the range of values time . sleep ( 0.0005 )","title":"\u2714\ufe0f L\u00f6sung"},{"location":"2_1_Messkette/#analoge-eingange","text":"Sensoren liefern meist analoge Signale (z.B. Spannung, Strom, Widerstand) z.B. basieren viele Temperatur-Sensoren auf dem Widerstand von Metallen Damit \u00e4ndert sich bei gleichbleibender Spannung der Strom, welcher am Eingang gemessen werden kann","title":"Analoge Eing\u00e4nge"},{"location":"2_1_Messkette/#analog-digital-wandler","text":"Der Analog-Digital-Wandler (ADC) wandelt ein analoges Signal in eine digitale Zahl um Dabei gibt es zwei relevante Parameter Aufl\u00f6sung: Anzahl der m\u00f6glichen Werte Referenzspannung: Spannungsbereich, der in die Aufl\u00f6sung abgebildet wird z.B. 16 Bit Aufl\u00f6sung und \\(3.3 \\,\\text{V}\\) Referenzspannung \\(\\Rightarrow\\) \\(2^{16} = 65536\\) Werte zwischen \\(0\\) und \\(3.3 \\,\\text{V}\\) Zudem k\u00f6nnen sich Systeme in ihrer Abtastrate unterscheiden, d.h. wie oft Werte gelesen werden k\u00f6nnen (z.B. durch den Sleep-Timer im while -loop)","title":"Analog-Digital-Wandler"},{"location":"2_1_Messkette/#aufgabe-2_1_5-anschluss-eines-analogen-helligkeitssensors","text":"Verbinden Sie die + und - Leiste des Breadboards mit \\(3.3 \\,\\text{V}\\) und GND des Raspberry Pi Pico Verbinden Sie den analogen Eingang A2 mit einem Female-to-Female-Kabel F\u00fcgen Sie den folgenden Code ein import board import analogio import time # Initialisierung des ADC (Analog-Digital Converter) ldr = analogio . AnalogIn ( board . A2 ) # Wiederholung while True : # ADC als Dezimalzahl lesen read = ldr . value # Ausgabe in der Kommandozeile/Shell print ( \"ADC:\" , read ) # Warten time . sleep ( 1 ) Verbinden Sie den Eingang zun\u00e4chst mit + , dann mit - Welche Werte erhalten Sie?","title":"\u270d\ufe0f Aufgabe 2_1_5: Anschluss eines analogen Helligkeitssensors"},{"location":"2_1_Messkette/#losung_4","text":"\ud83d\udca1 anzeigen Bei einer direkten Verbindung des Eingangs mit + oder - erhalten Sie die maximalen ( 2**16 ) bzw. minimalen Werte (nahe 0 ) Schlie\u00dfen Sie einen Fotowiderstand als analogen Helligkeitssensor an den Raspberry Pi Pico an Links (I): +VCC z.B. 3,3 oder 5 Volt Mitte: GND / Masse / 0 Volt Rechts (S): Verbindungspunkt des Spannungsteilers Sie k\u00f6nnen den Sensor entweder auf dem Breadboard montieren oder ihn mit Male-Female-Kabeln direkt verbinden Verdunkeln Sie und beleuchten Sie den Sensor und beobachten Sie die \u00c4nderung des Eingangswertes Je mehr Licht auf den Fotowiderstand f\u00e4llt, desto kleiner wird sein Widerstand. Optional k\u00f6nnen Sie auch die Beleuchtungsst\u00e4rke mit einem Luxmeter messen und die Werte vergleichen Zum Testen k\u00f6nnen Sie den Analog-Eingang mit \\(3.3 \\text{ Volt}\\) und \\(0 \\text{ Volt}\\) verbinden Lesen Sie den Wert des Sensors aus und geben Sie diesen auf der Konsole aus Notieren Sie sich einige Werte ( ADC ) f\u00fcr verschiedene Hell-Dunkel-Verh\u00e4ltnisse (z.B. Zuhalten, Raumlicht, Taschenlampe) und notieren Sie die Werte Umgebung ADC E in Lux U in V Abgedunkelt Raumlicht Taschenlampe Quelle","title":"\u2714\ufe0f L\u00f6sung"},{"location":"2_1_Messkette/#mapping-von-eingangswert-zu-spannung","text":"Die Spannung und der ADC - Wert sind linear zueinander Entsprechend kann jeder Wert des ADC \u00fcber einer lineare Funktion in eine Spannung umgerechnet werden Symbol Description \\(U_{max}\\) maximale Beleuchtungsst\u00e4rke \\(U_{min}\\) minimale Beleuchtungsst\u00e4rke \\(z_{max}\\) maximaler Messwert des ADC \\(z_{min}\\) minimaler Messwert des ADC Annahme: Linearer Zusammenhang \\(U = f(z) = \\beta_0 + \\beta_1 z\\) 1: Wie gro\u00df ist der Y-Achsenabschnitt \\(\\beta_0\\) ? Bei welchen Wert hat \\(U\\) , wenn \\(z=0\\) ? 2: Wie gro\u00df ist die Steigung \\(\\beta_1\\) ? Wie gro\u00df ist die \u00c4nderung von \\(U\\) pro \u00c4nderung von \\(z\\) ? \\(\\beta_1 = \\frac{{U_{max}} - U_{min}}{z_{max} - z_{min}}\\) Der folgende Code \u00fcbernimmt dein Eingangswert und gibt einen Spannungs-Wert zwischen 3.3 und 0 zur\u00fcck F\u00fcgen Sie die Funktion map_lin in den Code ein und geben Sie die Spannung auf der Konsole aus def map_lin ( z ): U_max = 3.3 U_min = 0 z_max = 65535 z_min = 0 beta_0 = U_min beta_1 = ( U_max - U_min ) / ( z_max - z_min ) return beta_0 + beta_1 * z Wenn Sie Ihren Code sch\u00f6n aufger\u00e4umt haben wollen k\u00f6nnen eine Datei mappings.py im gleiche Ordner wie code.py erstellen und die Funktion dort speichern Sie k\u00f6nnen diese dann mittels from mappings import map_lin ins main.py importieren und nutzen","title":"Mapping von Eingangswert zu Spannung"},{"location":"2_1_Messkette/#mapping-von-eingangswert-zu-physikalischer-groe","text":"Um sinnvoller mit den Werten arbeiten zu k\u00f6nnen, ist es sinnvoller die gelesen ADC -Werte read in eine Variable mit einer sinnvollen physikalischen Einheit zu \u00fcberf\u00fchren Im Fall dieses Sensors und Aufbaus lassen sich die Werte gut mit einer Parabel anpassen \\(E= f(x) = (a(x-s))^2\\) \\(a =0.0015\\) beschreibt die Steilheit der Parabel \\(s = 44000\\) ist der Verschiebung der Parabel auf der x-Achse \\(x\\) ist der Eingangswert Erstellen Sie in eine Datei mappings.py (im gleichen Ordner, wie die code.py ) eine Funktion map_quat() , die stattdessen die oben angegeben Formel implementiert","title":"Mapping von Eingangswert zu physikalischer Gr\u00f6\u00dfe"},{"location":"2_1_Messkette/#ubliche-beleuchtungsstarken-e","text":"Umfeld \\(E \\text{ in lux}\\) Mondlose, klare Nacht 0,0003 Nachts bei Vollmond 0,2 Beleuchtete Strassen, Pl\u00e4tze 10..20 Abstellr\u00e4ume, Lagerr\u00e4ume 50 Lagerr\u00e4ume, Toiletten, Treppen 100 Speiser\u00e4ume, Werkhallen, 200 L\u00e4den, Sitzungszimmer 300 Arbeitspl\u00e4tze, Schulzimmer 500 erh\u00f6hte Anspr\u00fcche 750 Elektronikmontage, Uhrenmacher 1.000 Bedeckter Himmel im Winter 1.000.. 2.000 Bedeckter Himmel im Sommer 5.000..20.000 Sonnenlicht im Winter 10.000 Sonnenlicht im Sommer 100.000","title":"\u00dcbliche Beleuchtungsst\u00e4rken \\(E\\)"},{"location":"2_1_Messkette/#nachverarbeitung-nach-adc","text":"Viele (teurere) Peripherie-Ger\u00e4te kommen als Transmitter (Kombination aus dem Sensor selbst und einem Messumformer) Diese linearisieren sie spannungs-(oder Strom) Ausgabe Eine Umrechnung der Spannungswerte an Eingang in die Physikalische Gr\u00f6\u00dfen muss jedoch weiterhin stattfinden Informationen hierzu finden sich meinst im Datenblatt Quelle","title":"Nachverarbeitung nach ADC"},{"location":"2_1_Messkette/#aufgabe-2_1_5-mapping-eines-analogen-helligkeitssensors","text":"Oben ist die quadratische Funktion gegeben, die die gemessenen Werte in Beleuchtungsst\u00e4rke in Lux umrechnet Implementieren Sie diese Funktion in Python und geben Sie dann eine Nachricht mit der Beleuchtungsst\u00e4rke in Lux aus Orientieren Sie sich dabei an folgendem Code, der ein Beispiel f\u00fcr ein lineares Mapping zeigt Evtl. m\u00fcssen Sie die Werte an Ihren Sensor und Aufbau anpassen, um die Beleuchtungsst\u00e4rke in Lux zu erhalten \ud83e\udd13 Im besten Fall wird map_ln in einer eigenen Datei mappings.py gespeichert und kann dann mittels import mappings in anderen Programmen genutzt werden import board import analogio import time from mappings import map_lin # Initialisierung des ADC (Analog-Digital Converter) ldr = analogio . AnalogIn ( board . A2 ) # Wiederholung while True : # ADC als Dezimalzahl lesen read = ldr . value # Ausgabe in der Kommandozeile/Shell print ( \"ADC:\" , read ) print ( \"E in Lux\" , map_lin ( read )) # Warten time . sleep ( 1 )","title":"\ud83e\udd13\u270d\ufe0f Aufgabe 2_1_5: Mapping eines Analogen Helligkeitssensors"},{"location":"2_1_Messkette/#losung_5","text":"\ud83d\udca1 anzeigen import board import analogio import time from mappings import map_quat # Initialisierung des ADC (Analog-Digital Converter) ldr = analogio . AnalogIn ( board . A2 ) # Wiederholung while True : # ADC als Dezimalzahl lesen read = ldr . value # Ausgabe in der Kommandozeile/Shell print ( \"ADC:\" , read ) print ( \"E in Lux\" , map_quat ( read )) # Warten time . sleep ( 1 ) \ud83d\udca1 anzeigen def map_lin ( z ): E_max = 1 E_min = 0 z_max = 65535 z_min = 0 beta_0 = E_min beta_1 = ( E_max - E_min ) / ( z_max - z_min ) return beta_0 + beta_1 * z def map_quat ( x ): s = 44000 a = 0.0015 return (( x - s ) * a ) ** 2","title":"\u2714\ufe0f L\u00f6sung"},{"location":"2_1_Messkette/#verwendung-von-globalen-variablen","text":"einige Variablen sind so grundlegend, dass wir Sie nicht im Code sondern zentral ver\u00e4ndern wollen Hierzu k\u00f6nnen wird Umgebungsvariablen in der settings.toml ver\u00e4ndern im Verzeichnis CIRCUITPY \u00e4ndern MY_NAME = \"Julian\" - Im Code k\u00f6nnen diese mittels os aufgerufen werden # connect to your SSID import os print ( os . getenv ( 'MY_NAME' )) Passen Sie den Code so an, dass die zur Umwandlung ben\u00f6tigten Werte als Umgebungsvariablen gesetzt werden k\u00f6nnen","title":"\ud83e\udd13 Verwendung von Globalen Variablen"},{"location":"2_1_Messkette/#losung_6","text":"\ud83d\udca1 anzeigen import board import analogio import time from mappings import map_quat # Initialisierung des ADC (Analog-Digital Converter) ldr = analogio . AnalogIn ( board . A2 ) # Wiederholung while True : # ADC als Dezimalzahl lesen read = ldr . value # Ausgabe in der Kommandozeile/Shell print ( \"ADC:\" , read ) print ( \"E in Lux\" , map_quat ( read )) # Warten time . sleep ( 1 ) \ud83d\udca1 anzeigen def map_lin ( z ): E_max = 1 E_min = 0 z_max = 65535 z_min = 0 beta_0 = E_min beta_1 = ( E_max - E_min ) / ( z_max - z_min ) return beta_0 + beta_1 * z def map_quat ( x ): s = 44000 a = 0.0015 return (( x - s ) * a ) ** 2","title":"L\u00f6sung"},{"location":"2_1_Messkette/#aufgabe-2_1_6","text":"Nicht bei jedem Sensor wird die gefittete Kurve perfekt passen passen Sie den Code so an, dass die Parameter der Kurve in der settings.toml hinterlegt werden k\u00f6nnen, um diese m\u00f6glichst einfach anzupassen","title":"\ud83e\udd13 \u270d\ufe0f Aufgabe 2_1_6:"},{"location":"2_1_Messkette/#analoge-ausgange","text":"Entsprechend gibt es auch analoge Ausg\u00e4nge Diese k\u00f6nnen z.B. zur Ansteuerung von Motoren genutzt werden Dabei wird einer meist der Wert einer Integer-Variable im Speicher in einen Spannungswert umgewandelt","title":"Analoge Ausg\u00e4nge"},{"location":"2_2_Steuerung/","text":"2.2 Steuerung Urspr\u00fcnge der Steuerungstechnik und Automatisierung 20\u201362 - Heron von Alexandria Automaten einer Wein und Milch spendenden Bacchus-Figur 1784 Webmaschinen von h\u00f6lzernen Lochkarten 1835 erfindet Joseph Henry das elektromechanische Relais 1969 Odo J. Struger beim US-Unternehmen Allen-Bradley eine SPS (zeitgleich mit Richard E. Morley) \ud83e\udde0 Evolution zu Industrie 4.0 Industrie 1.0 (1784): Einsatz von mechanischen Webst\u00fchlen, die insbesondere durch Lochkarten-Steuerungen und sp\u00e4ter durch umlaufenden B\u00e4nder zu Webmaschinen weiterentwickelt wurden. Industrie 2.0 (1870): erster Einsatz von Flie\u00dfb\u00e4ndern in den USA (Schlachth\u00f6fe) unter Nutzung elektrischer Antriebe, die durch entsprechende Sch\u00fctz- und Relais-Steuerungen geschaltet wurden. Industrie 3.0 (1969) Speicherprogrammierbaren Steuerungen , Durchbruch bei der Industrieelektronik und Informationstechnik zur massenweisen Steuerung und Automatisierung der Produktion Industrie 4.0 (2012) Cyber-Physikalischer Systeme mit globaler Vernetzung zur global optimierten Steuerung der international organisierten Produktion ( Internet der Dinge ). Ablaufsteuerung steuert den Ablauf ereignisdiskreter Prozesse (Schrittkette). Beim Erreichen eines Schwellwertes einer Steuergr\u00f6\u00dfe (Ereignis) wir ein weiterer Prozess angesto\u00dfen. z.B. Ablauf in einer Waschmaschine z.B. Human Centric Lighting z.B. Treppenhauslicht Beispiel Treppenlichtschaltung \u00dcber die Funktion Treppenlichtschaltung k\u00f6nnen Beleuchtungseinrichtungen tempor\u00e4r eingeschaltet werden. Nach Ablauf der Treppenlichthaltezeit kann eine Abschaltvorwarnzeit aktiv werden, die den Nutzer z. B. durch kurzzeitige Unterbrechung(\u201eFlackern\u201c) \u00fcber die bevorstehende Abschaltung informiert. Ein erneuter Empfang einer Eingabeinformation zum Einschalten startet die Verz\u00f6gerungszeit neu. Die Funktion ben\u00f6tigt als Eingabeinformation das Ergebnis der Bedienfunktion Licht stellen und liefert ihrerseits die Ausgabeinformation f\u00fcr eine oder mehrere Aktorfunktionen Lichtaktor. Naive L\u00f6sung import time import board import digitalio PAR_HOLD = 3 PAR_WARN = 1 button_pin = board . GP0 # Replace with the GPIO pin connected to your button button = digitalio . DigitalInOut ( button_pin ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP # Use pull-up resistor; change if using pull-down led_pin = board . GP1 # Replace with the GPIO pin connected to your LED led = digitalio . DigitalInOut ( led_pin ) led . direction = digitalio . Direction . OUTPUT while True : if not ( button . value ): # Button is pressed (LOW) print ( \"Button Pressed!\" ) led . value = True time . sleep ( PAR_HOLD ) for i in range ( 1 , 5 ): led . value = False time . sleep ( 0.1 ) led . value = True time . sleep ( 0.1 ) time . sleep ( PAR_WARN ) led . value = False Probleme mit der naiven L\u00f6sung Erneutes bet\u00e4tigen des Taster setzt die Wartezeit nicht zur\u00fcck Unser System hat kein Ged\u00e4chtnis (\u00fcber den Zustand) Der Ablauf sollte besser nicht nur durch einen Zeitlichen Rahmen, sondern auch durch Zust\u00e4nde gesteuert werden stateDiagram A : LED ein 1 B : LED flackert C : LED ein 2 E : LED aus [*] --> E : Systemstart E --> A : L_MAN A --> B : PAR_HOLD C --> E : PAR_WARN B --> C Finite State Machine (Endlicher Automat) In Abh\u00e4ngigkeit vom Systemzustand erwarten wir unterschiedliches Verhalten z.B. Nach Tastendruck soll die Lampe angeschaltet werden Nach Ablauf einer Wartezeit soll die Lampe ausgeschaltet werden Davor gibt es ein Flackern als Warnung Nach einem weiteren Tastendruck wird die Wartezeit zur\u00fcckgesetzt Einfache Systeme lassen sich meist durch Ihre Zust\u00e4nde und deren \u00dcberg\u00e4nge beschreiben Durch die Beschreibung als State-Machine k\u00f6nnen wir das Verhalten des Systems sauber trennen und die Implementierung vereinfachen Implementierung eines Cola-Automaten Der Automat startet im Zustand Auswahl anfordern Der Automat kann in den Zustand Bezahlung anfordern wechseln Wird die geforderte Summe erreicht, wechselt der Automat in den Zustand Ware ausgeben Ist die Ausgabe abgeschlossen, wechselt der Automat wieder in den Zustand Auswahl anfordern Wird die Bezahlung abgebrochen, wechselt der Automat in den Zustand R\u00fcckgeld herausgeben und dann wieder in den Zustand Auswahl anfordern (Deterministic) Finite State Machine (Endlicher Automat) Dieser Ansatz basiert auf der Theorie der formalen Sprachen Eine DFSM beschreibt ein System mit endlich vielen Zust\u00e4nden beschreibt Eine DFSM ist ein 5-Tupel \\(M = (Q, \\Sigma, q_0, F, \\delta)\\) mit Endlicher Zustandsmenge \\(Q\\) Endliche Eingabealphabet \\(\\Sigma\\) Endlicher Startzustand \\(q_0 \\in Q\\) Endlicher Endzustandsmenge \\(F \\subseteq Q\\) \u00dcbergangsfunktion \\(\\delta: Q \\times \\Sigma \\rightarrow Q\\) In der Theorie der formalen Sprachen \ud83e\udd13 \\(Q = \\{S_1, S_2\\}\\) \\(\\Sigma = \\{0,1\\}\\) \\(q_0 = S_1\\) \\(F = \\{S_1\\}\\) \\(\\delta(S_1, 0) = S_2\\) , \\(\\delta(S_1, 1) = S_1\\) \\(\\delta(S_2, 0) = S_1\\) , \\(\\delta(S_2, 1) = S_2\\) Akzeptiert (endet in \\(F\\) ) 1 , 11 , 01101 , 11001 Akzeptiert nicht (endet nicht in \\(F\\) ) 0 , 10 , 10100 , 01001 Anwendung Parser Regular Expressions Regular Expressions Eine regul\u00e4re Sprache ist eine Menge von Zeichenketten, die durch einen regul\u00e4ren Ausdruck beschrieben werden k\u00f6nnen z.B. Beider Suche nach einer Zeichenkette in einem Text Alles, was mapping im Namen hat: .*mapping.* Alles was mit mapping beginnt und mit einer Zahl endet mapping\\d+ In der Programmierpraxis Die Knoten stellen Systemzust\u00e4nde dar. Innerhalb dieser Zust\u00e4nde muss das Systemen nicht statisch sein (z.B. Zeit muss z.B. mitgez\u00e4hlt werden) Die gerichteten Kanten stellen \u00dcberg\u00e4nge zwischen den Zust\u00e4nden dar, die durch Events und Bedingungen ausgel\u00f6st werden Die Systemzust\u00e4nde k\u00f6nnen nur in festgelegten Reihenfolgen durchlaufen werden Ein Endzustand ist optional \u270d\ufe0f Aufgabe 2_2_1: Implementierung eines Treppenhauslichts In code_state_machine.py (folgende Folie) ist das auf der rechten Seite dargestellte Programm implementiert Beschreiben Sie verbal, was in jedem der Zust\u00e4nde passiert Ber\u00fccksichtigen Sie dabei im Besonderen, warum es die beiden Zust\u00e4nde LED leuchtet und LED flackert gibt und diese nicht in einem zusammengefasst wurden import time import board import digitalio PAR_HOLD = 5 PAR_WARN = 2 state = \"start\" if state == \"start\" : button_pin = board . GP0 # Replace with the GPIO pin connected to your button button = digitalio . DigitalInOut ( button_pin ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP # Use pull-up resistor; change if using pull-down led_pin = board . GP1 # Replace with the GPIO pin connected to your LED led = digitalio . DigitalInOut ( led_pin ) led . direction = digitalio . Direction . OUTPUT state = \"LED aus\" print ( \"Erfolgreich gestartet\" ) while True : time . sleep ( 0.5 ) if state == \"LED aus\" : print ( \"State: LED aus \\n Warte auf Aktion\" ) if not ( button . value ): # Button is pressed (LOW) print ( \"Button Pressed!\" ) state = \"LED an\" led . value = True if state == \"LED an\" : print ( \"State: LED an\" ) time_start = time . time () print ( \" um: \" , time . time ()) state = \"LED leuchtet\" if state == \"LED leuchtet\" : if not ( button . value ): # Button is pressed (LOW) print ( \"Button Pressed!\" ) state = \"LED an\" print ( \"LED leuchtet\" ) print ( \" seit: \" , time . time () - time_start ) if time . time () - time_start > PAR_HOLD : state = \"LED flackert\" if state == \"LED leuchtet2\" : if not ( button . value ): # Button is pressed (LOW) print ( \"Button Pressed!\" ) state = \"LED an\" print ( \" seit Warnung: \" , time . time () - time_warning ) if time . time () - time_warning > PAR_WARN : state = \"LED aus\" led . value = False if state == \"LED flackert\" : for i in range ( 1 , 5 ): led . value = False time . sleep ( 0.1 ) led . value = True time . sleep ( 0.1 ) time_warning = time . time () state = \"LED leuchtet2\" led . value = True stateDiagram A : Start C: LED an D: LED leuchtet E: LED leuchtet2 F: LED flackert G : LED aus [*] --> A : Systemstart A --> C : Taster wird gedr\u00fcckt C --> D : D --> F : PAR_HOLD vergeht E --> G : PAR_WARN vergeht F --> E: D --> C: Taster wird gedr\u00fcckt E --> C: Taster wird gedr\u00fcckt G --> C: Taster wird gedr\u00fcckt \u2714\ufe0f L\u00f6sung L\u00f6sung anzeigen import time import board import digitalio PAR_HOLD = 5 PAR_WARN = 2 state = \"start\" if state == \"start\" : button_pin = board . GP0 # Replace with the GPIO pin connected to your button button = digitalio . DigitalInOut ( button_pin ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP # Use pull-up resistor; change if using pull-down led_pin = board . GP1 # Replace with the GPIO pin connected to your LED led = digitalio . DigitalInOut ( led_pin ) led . direction = digitalio . Direction . OUTPUT state = \"LED aus\" print ( \"Erfolgreich gestartet\" ) while True : # Long sleep to debug the state machine time . sleep ( 0.5 ) if state == \"LED aus\" : print ( \"State: LED aus \\n Warte auf Aktion\" ) if not ( button . value ): # Button is pressed (LOW) print ( \"Button Pressed!\" ) state = \"LED an\" led . value = True if state == \"LED an\" : print ( \"State: LED an\" ) time_start = time . time () print ( \" um: \" , time . time ()) state = \"LED leuchtet\" if state == \"LED leuchtet\" : if not ( button . value ): # Button is pressed (LOW) print ( \"Button Pressed!\" ) state = \"LED an\" print ( \"LED leuchtet\" ) print ( \" seit: \" , time . time () - time_start ) if time . time () - time_start > PAR_HOLD : state = \"LED flackert\" if state == \"LED leuchtet2\" : if not ( button . value ): # Button is pressed (LOW) print ( \"Button Pressed!\" ) state = \"LED an\" print ( \" seit Warnung: \" , time . time () - time_warning ) if time . time () - time_warning > PAR_WARN : state = \"LED aus\" led . value = False if state == \"LED flackert\" : for i in range ( 1 , 5 ): led . value = False time . sleep ( 0.1 ) led . value = True time . sleep ( 0.1 ) time_warning = time . time () state = \"LED leuchtet2\" led . value = True \u270d\ufe0f Aufgabe 2_2_2: State Machine f\u00fcr einen Dimmschalter Stellen Sie sich einen Dimmer vor, der durch Halten des Tasters die Helligkeit einer LED \u00fcber die PWM steuert Durch ein kurzes Dr\u00fccken des Tasters soll die Helligkeit auf 0% bzw. 100% gesetzt werden Durch einen Doppeldruck soll der Dimm-Modus gestartet werden in diesem wird durch Halten des Tasters die Helligkeit von 0% auf 100% hoch- bzw. heruntergefahren werden, je nach dem, wie lange der Taster gehalten wird Nach dem Loslassen wird die Richtung umgekehrt Durch einen einfachen Druck wird der Dimm-Modus und wieder in den normalen Modus gewechselt Zeichen Sie eine State Machine, die dieses Verhalten beschreibt \u00dcberlegen Sie sich dazu zun\u00e4chst sinnvolle Zust\u00e4nde und versuchen Sie diese dann mit sinnvollen \u00dcberg\u00e4ngen zu verkn\u00fcpfen \u2714\ufe0f L\u00f6sung \ud83d\udca1 anzeigen stateDiagram A : 100% B : 0% C : aufw\u00e4rts D : abw\u00e4rts A --> B: kurzer Druck B --> A: kurzer Druck A --> D: langer Druck B --> C: langer Druck C --> D: loslassen D --> C: loslassen \u2714\ufe0f Verbesserte L\u00f6sung \ud83d\udca1 anzeigen stateDiagram A : 100% B : 0% C : aufw\u00e4rts - warte auf Eingabe D : abw\u00e4rts - warte auf Eingabe E : dimme abw\u00e4rts F : dimme aufw\u00e4rts A --> B: kurzer Druck B --> A: kurzer Druck A --> D: Doppel-Druck B --> C: Doppel-Druck D --> E: halten E --> C: loslassen C --> F: halten F --> D: loslassen D --> A: kurzer Druck C --> B: kurzer Druck \ud83e\udd13\u270d\ufe0f Aufgabe 2_2_3: Implementierung eines Dimmschalter Implementieren Sie einen Dimmer L\u00f6sung mit einer State Machine und Darstellung der State Machine gibt 5% Bonus \u274c L\u00f6sung F\u00fcr diese Zusatzaufgabe gibt es noch keine Muster-L\u00f6sung. Senden Sie mir gerne Ihre L\u00f6sung zu, damit ich sie hier ver\u00f6ffentlichen kann. F\u00fcr richtig gel\u00f6ste Aufgaben gibt es 1% Bonus auf die Klausur. Verkn\u00fcpfungssteuerungen W\u00e4hrend Ablaufsteuerungen den Ablauf eines Prozesses steuern, verkn\u00fcpfen Verkn\u00fcpfungssteuerungen die Eingangssignale mit den Ausgangssignalen Diese Trennung ist jedoch eher akademisch, da die meisten Systeme sowohl Ablauf- als auch Verkn\u00fcpfungssteuerungen enthalten Beispiel: Wechselschalter Verkn\u00fcpfungssteuerungen k\u00f6nnen z.B. durch Wahreheitstabellen und Boolsche Funktionen beschrieben werden Sp\u00e4ter werden wir hierzu noch grafische Beschreibungen kennenlernen (Funktionsplan, Kontaktplan, ...) Wahrheitstabelle Schalter 1 Schalter 2 Lampe 0 0 1 0 1 0 1 0 0 1 1 1 Boolsche Funktion \\(L = (S_1 \\land S_2) \\lor (\\lnot S_1 \\land \\lnot S_2)\\) \u270d\ufe0f Aufgabe 2_2_4: Implementierung einer vereinfachten Tageslichtschaltung Wir vereinfachen die Tageslichtschaltung, indem wir die Parameter f\u00fcr Zeit und Mindest-Beleuchtungsst\u00e4rke weglassen Zeichen Sie zun\u00e4chst eine Wahrheitstabelle f\u00fcr die Tageslichtschaltung Setzen Sie L_MAN zun\u00e4chst im Code auf False \ud83e\udd13 schlie\u00dfen Sie daf\u00fcr nur einen zus\u00e4tzlichen Button daf\u00fcr an, wenn Sie mit der restlichen Schaltung fertig sind Nutzen Sie einen Button, um den Anwesenheitszustand P_ACT zu simulieren H_ROOM k\u00f6nnen Sie entweder als Beleuchtungsst\u00e4rke, Spannung oder ADC-Wert setzen L_SET soll das Ausgangssignal sein, das die Lampe steuert und kann zun\u00e4chst auf True gesetzt werden. \ud83e\udd13 Sp\u00e4ter k\u00f6nnen Sie diesen auch durch eine Pulsweitenmodulation setzen. P_ACT H_ROOM < PAR_SETPT L_MAN L_SET 0 0 0 0 1 0 0 0 0 1 0 0 1 1 0 1 0 0 1 1 1 0 1 1 0 1 1 1 1 1 1 1 \\[L_{\\text{SET}} = (P_{\\text{ACT}} \\land (H_{\\text{ROOM}} < \\text{PAR}_{\\text{SETPT}})) \\lor L_{\\text{MAN}})\\] Hinweise Bauen Sie auf Aufgaben 2_1_3 und 2_1_5 auf, um die Tageslichtschaltung zu implementieren \ud83d\udca1 anzeigen import time import board import digitalio led_pin = board . GP1 # Replace with the GPIO pin connected to your LED led = digitalio . DigitalInOut ( led_pin ) led . direction = digitalio . Direction . OUTPUT button_pin = board . GP0 # Replace with the GPIO pin connected to your button button = digitalio . DigitalInOut ( button_pin ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP # Use pull-up resistor; change if using pull-down while True : if not button . value : # Button is pressed (LOW) print ( \"Button Pressed!\" ) led . value = not led . value # Toggle the LED state else : print ( \"Button Released!\" ) time . sleep ( 0.1 ) # Add a small delay to debounce the button \ud83d\udca1 anzeigen import board import analogio import time from mappings import map_quat # Initialisierung des ADC (Analog-Digital Converter) ldr = analogio . AnalogIn ( board . A2 ) # Wiederholung while True : # ADC als Dezimalzahl lesen read = ldr . value # Ausgabe in der Kommandozeile/Shell print ( \"ADC:\" , read ) print ( \"E in Lux\" , map_quat ( read )) # Warten time . sleep ( 1 ) \ud83d\udca1 anzeigen def map_lin ( z ): E_max = 1 E_min = 0 z_max = 65535 z_min = 0 beta_0 = E_min beta_1 = ( E_max - E_min ) / ( z_max - z_min ) return beta_0 + beta_1 * z def map_quat ( x ): s = 44000 a = 0.0015 return (( x - s ) * a ) ** 2 \u2714\ufe0f L\u00f6sung \ud83d\udca1 anzeigen import board import analogio import time import digitalio from mappings import map_quat # LED led_pin = board . GP1 # Replace with the GPIO pin connected to your LED led = digitalio . DigitalInOut ( led_pin ) led . direction = digitalio . Direction . OUTPUT # Button button_pin = board . GP0 # Replace with the GPIO pin connected to your button button = digitalio . DigitalInOut ( button_pin ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP # Use pull-up resistor; change if using pull-down # Initialisierung des ADC (Analog-Digital Converter) ldr = analogio . AnalogIn ( board . A2 ) L_MAN = False L_SET = 300 # Wiederholung while True : P_ACT = button . value # ADC als Dezimalzahl lesen H_ROOM = ldr . value print ( \"E in Lux\" , map_quat ( H_ROOM )) led . value = ( P_ACT and map_quat ( H_ROOM ) < L_SET ) or L_MAN # Warten time . sleep ( 1 )","title":"Steuerung"},{"location":"2_2_Steuerung/#22-steuerung","text":"","title":"2.2 Steuerung"},{"location":"2_2_Steuerung/#ursprunge-der-steuerungstechnik-und-automatisierung","text":"20\u201362 - Heron von Alexandria Automaten einer Wein und Milch spendenden Bacchus-Figur 1784 Webmaschinen von h\u00f6lzernen Lochkarten 1835 erfindet Joseph Henry das elektromechanische Relais 1969 Odo J. Struger beim US-Unternehmen Allen-Bradley eine SPS (zeitgleich mit Richard E. Morley)","title":"Urspr\u00fcnge der Steuerungstechnik und Automatisierung"},{"location":"2_2_Steuerung/#evolution-zu-industrie-40","text":"Industrie 1.0 (1784): Einsatz von mechanischen Webst\u00fchlen, die insbesondere durch Lochkarten-Steuerungen und sp\u00e4ter durch umlaufenden B\u00e4nder zu Webmaschinen weiterentwickelt wurden. Industrie 2.0 (1870): erster Einsatz von Flie\u00dfb\u00e4ndern in den USA (Schlachth\u00f6fe) unter Nutzung elektrischer Antriebe, die durch entsprechende Sch\u00fctz- und Relais-Steuerungen geschaltet wurden. Industrie 3.0 (1969) Speicherprogrammierbaren Steuerungen , Durchbruch bei der Industrieelektronik und Informationstechnik zur massenweisen Steuerung und Automatisierung der Produktion Industrie 4.0 (2012) Cyber-Physikalischer Systeme mit globaler Vernetzung zur global optimierten Steuerung der international organisierten Produktion ( Internet der Dinge ).","title":"\ud83e\udde0 Evolution zu Industrie 4.0"},{"location":"2_2_Steuerung/#ablaufsteuerung","text":"steuert den Ablauf ereignisdiskreter Prozesse (Schrittkette). Beim Erreichen eines Schwellwertes einer Steuergr\u00f6\u00dfe (Ereignis) wir ein weiterer Prozess angesto\u00dfen. z.B. Ablauf in einer Waschmaschine z.B. Human Centric Lighting z.B. Treppenhauslicht","title":"Ablaufsteuerung"},{"location":"2_2_Steuerung/#beispiel-treppenlichtschaltung","text":"\u00dcber die Funktion Treppenlichtschaltung k\u00f6nnen Beleuchtungseinrichtungen tempor\u00e4r eingeschaltet werden. Nach Ablauf der Treppenlichthaltezeit kann eine Abschaltvorwarnzeit aktiv werden, die den Nutzer z. B. durch kurzzeitige Unterbrechung(\u201eFlackern\u201c) \u00fcber die bevorstehende Abschaltung informiert. Ein erneuter Empfang einer Eingabeinformation zum Einschalten startet die Verz\u00f6gerungszeit neu. Die Funktion ben\u00f6tigt als Eingabeinformation das Ergebnis der Bedienfunktion Licht stellen und liefert ihrerseits die Ausgabeinformation f\u00fcr eine oder mehrere Aktorfunktionen Lichtaktor.","title":"Beispiel Treppenlichtschaltung"},{"location":"2_2_Steuerung/#naive-losung","text":"import time import board import digitalio PAR_HOLD = 3 PAR_WARN = 1 button_pin = board . GP0 # Replace with the GPIO pin connected to your button button = digitalio . DigitalInOut ( button_pin ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP # Use pull-up resistor; change if using pull-down led_pin = board . GP1 # Replace with the GPIO pin connected to your LED led = digitalio . DigitalInOut ( led_pin ) led . direction = digitalio . Direction . OUTPUT while True : if not ( button . value ): # Button is pressed (LOW) print ( \"Button Pressed!\" ) led . value = True time . sleep ( PAR_HOLD ) for i in range ( 1 , 5 ): led . value = False time . sleep ( 0.1 ) led . value = True time . sleep ( 0.1 ) time . sleep ( PAR_WARN ) led . value = False","title":"Naive L\u00f6sung"},{"location":"2_2_Steuerung/#probleme-mit-der-naiven-losung","text":"Erneutes bet\u00e4tigen des Taster setzt die Wartezeit nicht zur\u00fcck Unser System hat kein Ged\u00e4chtnis (\u00fcber den Zustand) Der Ablauf sollte besser nicht nur durch einen Zeitlichen Rahmen, sondern auch durch Zust\u00e4nde gesteuert werden stateDiagram A : LED ein 1 B : LED flackert C : LED ein 2 E : LED aus [*] --> E : Systemstart E --> A : L_MAN A --> B : PAR_HOLD C --> E : PAR_WARN B --> C","title":"Probleme mit der naiven L\u00f6sung"},{"location":"2_2_Steuerung/#finite-state-machine-endlicher-automat","text":"In Abh\u00e4ngigkeit vom Systemzustand erwarten wir unterschiedliches Verhalten z.B. Nach Tastendruck soll die Lampe angeschaltet werden Nach Ablauf einer Wartezeit soll die Lampe ausgeschaltet werden Davor gibt es ein Flackern als Warnung Nach einem weiteren Tastendruck wird die Wartezeit zur\u00fcckgesetzt Einfache Systeme lassen sich meist durch Ihre Zust\u00e4nde und deren \u00dcberg\u00e4nge beschreiben Durch die Beschreibung als State-Machine k\u00f6nnen wir das Verhalten des Systems sauber trennen und die Implementierung vereinfachen","title":"Finite State Machine (Endlicher Automat)"},{"location":"2_2_Steuerung/#implementierung-eines-cola-automaten","text":"Der Automat startet im Zustand Auswahl anfordern Der Automat kann in den Zustand Bezahlung anfordern wechseln Wird die geforderte Summe erreicht, wechselt der Automat in den Zustand Ware ausgeben Ist die Ausgabe abgeschlossen, wechselt der Automat wieder in den Zustand Auswahl anfordern Wird die Bezahlung abgebrochen, wechselt der Automat in den Zustand R\u00fcckgeld herausgeben und dann wieder in den Zustand Auswahl anfordern","title":"Implementierung eines Cola-Automaten"},{"location":"2_2_Steuerung/#deterministic-finite-state-machine-endlicher-automat","text":"Dieser Ansatz basiert auf der Theorie der formalen Sprachen Eine DFSM beschreibt ein System mit endlich vielen Zust\u00e4nden beschreibt Eine DFSM ist ein 5-Tupel \\(M = (Q, \\Sigma, q_0, F, \\delta)\\) mit Endlicher Zustandsmenge \\(Q\\) Endliche Eingabealphabet \\(\\Sigma\\) Endlicher Startzustand \\(q_0 \\in Q\\) Endlicher Endzustandsmenge \\(F \\subseteq Q\\) \u00dcbergangsfunktion \\(\\delta: Q \\times \\Sigma \\rightarrow Q\\)","title":"(Deterministic) Finite State Machine (Endlicher Automat)"},{"location":"2_2_Steuerung/#in-der-theorie-der-formalen-sprachen","text":"\\(Q = \\{S_1, S_2\\}\\) \\(\\Sigma = \\{0,1\\}\\) \\(q_0 = S_1\\) \\(F = \\{S_1\\}\\) \\(\\delta(S_1, 0) = S_2\\) , \\(\\delta(S_1, 1) = S_1\\) \\(\\delta(S_2, 0) = S_1\\) , \\(\\delta(S_2, 1) = S_2\\) Akzeptiert (endet in \\(F\\) ) 1 , 11 , 01101 , 11001 Akzeptiert nicht (endet nicht in \\(F\\) ) 0 , 10 , 10100 , 01001 Anwendung Parser Regular Expressions","title":"In der Theorie der formalen Sprachen \ud83e\udd13"},{"location":"2_2_Steuerung/#regular-expressions","text":"Eine regul\u00e4re Sprache ist eine Menge von Zeichenketten, die durch einen regul\u00e4ren Ausdruck beschrieben werden k\u00f6nnen z.B. Beider Suche nach einer Zeichenkette in einem Text Alles, was mapping im Namen hat: .*mapping.* Alles was mit mapping beginnt und mit einer Zahl endet mapping\\d+","title":"Regular Expressions"},{"location":"2_2_Steuerung/#in-der-programmierpraxis","text":"Die Knoten stellen Systemzust\u00e4nde dar. Innerhalb dieser Zust\u00e4nde muss das Systemen nicht statisch sein (z.B. Zeit muss z.B. mitgez\u00e4hlt werden) Die gerichteten Kanten stellen \u00dcberg\u00e4nge zwischen den Zust\u00e4nden dar, die durch Events und Bedingungen ausgel\u00f6st werden Die Systemzust\u00e4nde k\u00f6nnen nur in festgelegten Reihenfolgen durchlaufen werden Ein Endzustand ist optional","title":"In der Programmierpraxis"},{"location":"2_2_Steuerung/#aufgabe-2_2_1-implementierung-eines-treppenhauslichts","text":"In code_state_machine.py (folgende Folie) ist das auf der rechten Seite dargestellte Programm implementiert Beschreiben Sie verbal, was in jedem der Zust\u00e4nde passiert Ber\u00fccksichtigen Sie dabei im Besonderen, warum es die beiden Zust\u00e4nde LED leuchtet und LED flackert gibt und diese nicht in einem zusammengefasst wurden import time import board import digitalio PAR_HOLD = 5 PAR_WARN = 2 state = \"start\" if state == \"start\" : button_pin = board . GP0 # Replace with the GPIO pin connected to your button button = digitalio . DigitalInOut ( button_pin ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP # Use pull-up resistor; change if using pull-down led_pin = board . GP1 # Replace with the GPIO pin connected to your LED led = digitalio . DigitalInOut ( led_pin ) led . direction = digitalio . Direction . OUTPUT state = \"LED aus\" print ( \"Erfolgreich gestartet\" ) while True : time . sleep ( 0.5 ) if state == \"LED aus\" : print ( \"State: LED aus \\n Warte auf Aktion\" ) if not ( button . value ): # Button is pressed (LOW) print ( \"Button Pressed!\" ) state = \"LED an\" led . value = True if state == \"LED an\" : print ( \"State: LED an\" ) time_start = time . time () print ( \" um: \" , time . time ()) state = \"LED leuchtet\" if state == \"LED leuchtet\" : if not ( button . value ): # Button is pressed (LOW) print ( \"Button Pressed!\" ) state = \"LED an\" print ( \"LED leuchtet\" ) print ( \" seit: \" , time . time () - time_start ) if time . time () - time_start > PAR_HOLD : state = \"LED flackert\" if state == \"LED leuchtet2\" : if not ( button . value ): # Button is pressed (LOW) print ( \"Button Pressed!\" ) state = \"LED an\" print ( \" seit Warnung: \" , time . time () - time_warning ) if time . time () - time_warning > PAR_WARN : state = \"LED aus\" led . value = False if state == \"LED flackert\" : for i in range ( 1 , 5 ): led . value = False time . sleep ( 0.1 ) led . value = True time . sleep ( 0.1 ) time_warning = time . time () state = \"LED leuchtet2\" led . value = True stateDiagram A : Start C: LED an D: LED leuchtet E: LED leuchtet2 F: LED flackert G : LED aus [*] --> A : Systemstart A --> C : Taster wird gedr\u00fcckt C --> D : D --> F : PAR_HOLD vergeht E --> G : PAR_WARN vergeht F --> E: D --> C: Taster wird gedr\u00fcckt E --> C: Taster wird gedr\u00fcckt G --> C: Taster wird gedr\u00fcckt","title":"\u270d\ufe0f Aufgabe 2_2_1: Implementierung eines Treppenhauslichts"},{"location":"2_2_Steuerung/#losung","text":"L\u00f6sung anzeigen import time import board import digitalio PAR_HOLD = 5 PAR_WARN = 2 state = \"start\" if state == \"start\" : button_pin = board . GP0 # Replace with the GPIO pin connected to your button button = digitalio . DigitalInOut ( button_pin ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP # Use pull-up resistor; change if using pull-down led_pin = board . GP1 # Replace with the GPIO pin connected to your LED led = digitalio . DigitalInOut ( led_pin ) led . direction = digitalio . Direction . OUTPUT state = \"LED aus\" print ( \"Erfolgreich gestartet\" ) while True : # Long sleep to debug the state machine time . sleep ( 0.5 ) if state == \"LED aus\" : print ( \"State: LED aus \\n Warte auf Aktion\" ) if not ( button . value ): # Button is pressed (LOW) print ( \"Button Pressed!\" ) state = \"LED an\" led . value = True if state == \"LED an\" : print ( \"State: LED an\" ) time_start = time . time () print ( \" um: \" , time . time ()) state = \"LED leuchtet\" if state == \"LED leuchtet\" : if not ( button . value ): # Button is pressed (LOW) print ( \"Button Pressed!\" ) state = \"LED an\" print ( \"LED leuchtet\" ) print ( \" seit: \" , time . time () - time_start ) if time . time () - time_start > PAR_HOLD : state = \"LED flackert\" if state == \"LED leuchtet2\" : if not ( button . value ): # Button is pressed (LOW) print ( \"Button Pressed!\" ) state = \"LED an\" print ( \" seit Warnung: \" , time . time () - time_warning ) if time . time () - time_warning > PAR_WARN : state = \"LED aus\" led . value = False if state == \"LED flackert\" : for i in range ( 1 , 5 ): led . value = False time . sleep ( 0.1 ) led . value = True time . sleep ( 0.1 ) time_warning = time . time () state = \"LED leuchtet2\" led . value = True","title":"\u2714\ufe0f L\u00f6sung"},{"location":"2_2_Steuerung/#aufgabe-2_2_2-state-machine-fur-einen-dimmschalter","text":"Stellen Sie sich einen Dimmer vor, der durch Halten des Tasters die Helligkeit einer LED \u00fcber die PWM steuert Durch ein kurzes Dr\u00fccken des Tasters soll die Helligkeit auf 0% bzw. 100% gesetzt werden Durch einen Doppeldruck soll der Dimm-Modus gestartet werden in diesem wird durch Halten des Tasters die Helligkeit von 0% auf 100% hoch- bzw. heruntergefahren werden, je nach dem, wie lange der Taster gehalten wird Nach dem Loslassen wird die Richtung umgekehrt Durch einen einfachen Druck wird der Dimm-Modus und wieder in den normalen Modus gewechselt Zeichen Sie eine State Machine, die dieses Verhalten beschreibt \u00dcberlegen Sie sich dazu zun\u00e4chst sinnvolle Zust\u00e4nde und versuchen Sie diese dann mit sinnvollen \u00dcberg\u00e4ngen zu verkn\u00fcpfen","title":"\u270d\ufe0f Aufgabe 2_2_2: State Machine f\u00fcr einen Dimmschalter"},{"location":"2_2_Steuerung/#losung_1","text":"\ud83d\udca1 anzeigen stateDiagram A : 100% B : 0% C : aufw\u00e4rts D : abw\u00e4rts A --> B: kurzer Druck B --> A: kurzer Druck A --> D: langer Druck B --> C: langer Druck C --> D: loslassen D --> C: loslassen","title":"\u2714\ufe0f L\u00f6sung"},{"location":"2_2_Steuerung/#verbesserte-losung","text":"\ud83d\udca1 anzeigen stateDiagram A : 100% B : 0% C : aufw\u00e4rts - warte auf Eingabe D : abw\u00e4rts - warte auf Eingabe E : dimme abw\u00e4rts F : dimme aufw\u00e4rts A --> B: kurzer Druck B --> A: kurzer Druck A --> D: Doppel-Druck B --> C: Doppel-Druck D --> E: halten E --> C: loslassen C --> F: halten F --> D: loslassen D --> A: kurzer Druck C --> B: kurzer Druck","title":"\u2714\ufe0f Verbesserte L\u00f6sung"},{"location":"2_2_Steuerung/#aufgabe-2_2_3-implementierung-eines-dimmschalter","text":"Implementieren Sie einen Dimmer L\u00f6sung mit einer State Machine und Darstellung der State Machine gibt 5% Bonus","title":"\ud83e\udd13\u270d\ufe0f Aufgabe 2_2_3: Implementierung eines Dimmschalter"},{"location":"2_2_Steuerung/#losung_2","text":"F\u00fcr diese Zusatzaufgabe gibt es noch keine Muster-L\u00f6sung. Senden Sie mir gerne Ihre L\u00f6sung zu, damit ich sie hier ver\u00f6ffentlichen kann. F\u00fcr richtig gel\u00f6ste Aufgaben gibt es 1% Bonus auf die Klausur.","title":"\u274c L\u00f6sung"},{"location":"2_2_Steuerung/#verknupfungssteuerungen","text":"W\u00e4hrend Ablaufsteuerungen den Ablauf eines Prozesses steuern, verkn\u00fcpfen Verkn\u00fcpfungssteuerungen die Eingangssignale mit den Ausgangssignalen Diese Trennung ist jedoch eher akademisch, da die meisten Systeme sowohl Ablauf- als auch Verkn\u00fcpfungssteuerungen enthalten","title":"Verkn\u00fcpfungssteuerungen"},{"location":"2_2_Steuerung/#beispiel-wechselschalter","text":"Verkn\u00fcpfungssteuerungen k\u00f6nnen z.B. durch Wahreheitstabellen und Boolsche Funktionen beschrieben werden Sp\u00e4ter werden wir hierzu noch grafische Beschreibungen kennenlernen (Funktionsplan, Kontaktplan, ...) Wahrheitstabelle Schalter 1 Schalter 2 Lampe 0 0 1 0 1 0 1 0 0 1 1 1 Boolsche Funktion \\(L = (S_1 \\land S_2) \\lor (\\lnot S_1 \\land \\lnot S_2)\\)","title":"Beispiel: Wechselschalter"},{"location":"2_2_Steuerung/#aufgabe-2_2_4-implementierung-einer-vereinfachten-tageslichtschaltung","text":"Wir vereinfachen die Tageslichtschaltung, indem wir die Parameter f\u00fcr Zeit und Mindest-Beleuchtungsst\u00e4rke weglassen Zeichen Sie zun\u00e4chst eine Wahrheitstabelle f\u00fcr die Tageslichtschaltung Setzen Sie L_MAN zun\u00e4chst im Code auf False \ud83e\udd13 schlie\u00dfen Sie daf\u00fcr nur einen zus\u00e4tzlichen Button daf\u00fcr an, wenn Sie mit der restlichen Schaltung fertig sind Nutzen Sie einen Button, um den Anwesenheitszustand P_ACT zu simulieren H_ROOM k\u00f6nnen Sie entweder als Beleuchtungsst\u00e4rke, Spannung oder ADC-Wert setzen L_SET soll das Ausgangssignal sein, das die Lampe steuert und kann zun\u00e4chst auf True gesetzt werden. \ud83e\udd13 Sp\u00e4ter k\u00f6nnen Sie diesen auch durch eine Pulsweitenmodulation setzen. P_ACT H_ROOM < PAR_SETPT L_MAN L_SET 0 0 0 0 1 0 0 0 0 1 0 0 1 1 0 1 0 0 1 1 1 0 1 1 0 1 1 1 1 1 1 1 \\[L_{\\text{SET}} = (P_{\\text{ACT}} \\land (H_{\\text{ROOM}} < \\text{PAR}_{\\text{SETPT}})) \\lor L_{\\text{MAN}})\\]","title":"\u270d\ufe0f Aufgabe 2_2_4: Implementierung einer vereinfachten Tageslichtschaltung"},{"location":"2_2_Steuerung/#hinweise","text":"Bauen Sie auf Aufgaben 2_1_3 und 2_1_5 auf, um die Tageslichtschaltung zu implementieren \ud83d\udca1 anzeigen import time import board import digitalio led_pin = board . GP1 # Replace with the GPIO pin connected to your LED led = digitalio . DigitalInOut ( led_pin ) led . direction = digitalio . Direction . OUTPUT button_pin = board . GP0 # Replace with the GPIO pin connected to your button button = digitalio . DigitalInOut ( button_pin ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP # Use pull-up resistor; change if using pull-down while True : if not button . value : # Button is pressed (LOW) print ( \"Button Pressed!\" ) led . value = not led . value # Toggle the LED state else : print ( \"Button Released!\" ) time . sleep ( 0.1 ) # Add a small delay to debounce the button \ud83d\udca1 anzeigen import board import analogio import time from mappings import map_quat # Initialisierung des ADC (Analog-Digital Converter) ldr = analogio . AnalogIn ( board . A2 ) # Wiederholung while True : # ADC als Dezimalzahl lesen read = ldr . value # Ausgabe in der Kommandozeile/Shell print ( \"ADC:\" , read ) print ( \"E in Lux\" , map_quat ( read )) # Warten time . sleep ( 1 ) \ud83d\udca1 anzeigen def map_lin ( z ): E_max = 1 E_min = 0 z_max = 65535 z_min = 0 beta_0 = E_min beta_1 = ( E_max - E_min ) / ( z_max - z_min ) return beta_0 + beta_1 * z def map_quat ( x ): s = 44000 a = 0.0015 return (( x - s ) * a ) ** 2","title":"Hinweise"},{"location":"2_2_Steuerung/#losung_3","text":"\ud83d\udca1 anzeigen import board import analogio import time import digitalio from mappings import map_quat # LED led_pin = board . GP1 # Replace with the GPIO pin connected to your LED led = digitalio . DigitalInOut ( led_pin ) led . direction = digitalio . Direction . OUTPUT # Button button_pin = board . GP0 # Replace with the GPIO pin connected to your button button = digitalio . DigitalInOut ( button_pin ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP # Use pull-up resistor; change if using pull-down # Initialisierung des ADC (Analog-Digital Converter) ldr = analogio . AnalogIn ( board . A2 ) L_MAN = False L_SET = 300 # Wiederholung while True : P_ACT = button . value # ADC als Dezimalzahl lesen H_ROOM = ldr . value print ( \"E in Lux\" , map_quat ( H_ROOM )) led . value = ( P_ACT and map_quat ( H_ROOM ) < L_SET ) or L_MAN # Warten time . sleep ( 1 )","title":"\u2714\ufe0f L\u00f6sung"},{"location":"2_3_Funktionen/","text":"2.3 Funktionen Funktionale Programmierung Berechnung von Output aus Input wird in wieder aufrufbaren Funktionen gekapselt Funktion hat nur Input und Output aber keinen Speicher / Zustand def add ( a , b ): return a + b add ( 1 , 2 ) # 3 add ( 3 , 4 ) # 7 Steuerfunktion \\[L_{\\text{SET}} = (P_{\\text{ACT}} \\land (H_{\\text{ROOM}} < \\text{PAR}_{\\text{SETPT}})) \\lor L_{\\text{MAN}}\\] def l_set ( p_act , h_room , PAR_SETPT , l_man ): return ( p_act and ( h_room < PAR_SETPT )) or l_man from tageslichtschaltung import l_set from mapping import map_quat while True : l_set_value = l_set ( p_act , h_room , PAR_SETPT , l_man ) \ud83e\udd13\u270d\ufe0f Aufgabe 2_3_1: Implementierung einer Tageslichtschaltung Implementieren Sie die Tageslichtschaltung in Python Stellen Sie zun\u00e4chst sicher, dass LED, Button und Analog-Digital-Wandler korrekt angeschlossen sind Setzen Sie die manuelle Einstellung l_man dauerhaft auf False Setzen Sie den Sollwert PAR_SETPT auf einen geigneten Wert Legen Sie die beiden Module tageslichtschaltung.py und mappings.py in den gleichen Ordner wie Ihre Hauptdatei \ud83e\udd13 Recherchieren Sie einen geeigneten Sensor, den Sie f\u00fcr die Anwesenheitserkennung verwenden k\u00f6nnen M\u00f6glicher Startpunkt import board import analogio import time from mappings import map_quat from tageslichtschaltung import l_set import digitalio # Initialisierung des ADC (Analog-Digital Converter) ldr = analogio . AnalogIn ( board . A2 ) # Initialisierung der LED led_pin = board . GP1 # Replace with the GPIO pin connected to your LED led = digitalio . DigitalInOut ( led_pin ) led . direction = digitalio . Direction . OUTPUT # Initialisierung Button button_pin = board . GP0 # Replace with the GPIO pin connected to your button button = digitalio . DigitalInOut ( button_pin ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP # Use pull-up resistor; change if using pull-down # Parameter setzen PAR_SETPT = 100 l_man = False # Wiederholung while True : # ADC als Dezimalzahl lesen read = ldr . value # Ausgabe in der Kommandozeile/Shell print ( \"ADC:\" , read ) print ( \"E in Lux\" , map_quat ( read )) tageslichtschaltung.py def l_set ( p_act , h_room , PAR_SETPT , l_man ): return ( p_act and h_room < PAR_SETPT ) or l_man mappings.py def map_lin ( z ): E_max = 1 E_min = 0 z_max = 65535 z_min = 0 beta_0 = E_min beta_1 = ( E_max - E_min ) / ( z_max - z_min ) return beta_0 + beta_1 * z def map_quat ( x ): s = 44000 a = 0.0015 return (( x - s ) * a ) ** 2 \u2714\ufe0f L\u00f6sung \ud83d\udca1 anzeigen import board import analogio import time from mappings import map_quat from tageslichtschaltung import l_set import digitalio # Initialisierung des ADC (Analog-Digital Converter) ldr = analogio . AnalogIn ( board . A2 ) # Initialisierung der LED led_pin = board . GP1 # Replace with the GPIO pin connected to your LED led = digitalio . DigitalInOut ( led_pin ) led . direction = digitalio . Direction . OUTPUT # Initialisierung Button button_pin = board . GP0 # Replace with the GPIO pin connected to your button button = digitalio . DigitalInOut ( button_pin ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP # Use pull-up resistor; change if using pull-down # Parameter setzen PAR_SETPT = 100 l_man = False # Wiederholung while True : # ADC als Dezimalzahl lesen read = ldr . value # Ausgabe in der Kommandozeile/Shell print ( \"ADC:\" , read ) print ( \"E in Lux\" , map_quat ( read )) # Anwesenheit mit Button verbinden p_act = button . value # Gemessene Helligkeit mit Sensor verbinden h_room = map_quat ( read ) l_set_value = l_set ( p_act , h_room , PAR_SETPT , l_man ) print ( \"Lampe ist: \" , l_set_value ) led . value = l_set_value # Warten time . sleep ( 1 ) \u270d\ufe0f Aufgabe 2_3_2: Welche Teile des Codes k\u00f6nnte man ebenfalls in Funktionen auslagern? Wie sch\u00e4tzen Sie den Aufwand ein, wenn man nun weitere Tageslicht-Schaltungen mit anderen LEDs und Sensoren auf der gleichen Platine realisieren m\u00f6chte? \u2714\ufe0f L\u00f6sung Initialisierung, da die Code immer gleich ist und sich nur je nach Aufbau die Pins \u00e4ndert Umrechnungen Einfacher, wenn mehr (z.B. auch die Zuweisung der Ein- und Ausg\u00e4nge) in Funktionen ausgelagert wird Sichtbarkeit von Variablen Lokale Variablen Variablen, die innerhalb einer Funktion definiert werden (z.B. s ) sind au\u00dferhalb der Funktion nicht sichtbar ( Kapselung ) Dies gilt f\u00fcr die meisten Programmiersprachen und z.B. auch f\u00fcr Schleifen def map_quat ( x ): s = 44000 a = 0.0015 return (( x - s ) * a ) ** 2 print ( s ) # NameError Traceback (most recent call last) # <ipython-input-11-76c4dd40fb41> in <module> # ----> 1 print(s) # NameError: name 's' is not defined Globale Variablen Variablen, die (bewusst) \u00fcberall im Programmcode aufrufbar sind (z.B. PAR_SETPT ) sind globale Variablen in Python werden globale Variablen in Gro\u00dfbuchstaben geschrieben A_GLOBAL_VAR = 1 def my_function (): a_local_variable = 2 return a_local_variable another_variable = my_function () print ( A_GLOBAL_VAR ) # 1 print ( a_local_variable ) # Error print ( another_variable ) # 2","title":"Funktionen"},{"location":"2_3_Funktionen/#23-funktionen","text":"","title":"2.3 Funktionen"},{"location":"2_3_Funktionen/#funktionale-programmierung","text":"Berechnung von Output aus Input wird in wieder aufrufbaren Funktionen gekapselt Funktion hat nur Input und Output aber keinen Speicher / Zustand def add ( a , b ): return a + b add ( 1 , 2 ) # 3 add ( 3 , 4 ) # 7","title":"Funktionale Programmierung"},{"location":"2_3_Funktionen/#steuerfunktion","text":"\\[L_{\\text{SET}} = (P_{\\text{ACT}} \\land (H_{\\text{ROOM}} < \\text{PAR}_{\\text{SETPT}})) \\lor L_{\\text{MAN}}\\] def l_set ( p_act , h_room , PAR_SETPT , l_man ): return ( p_act and ( h_room < PAR_SETPT )) or l_man from tageslichtschaltung import l_set from mapping import map_quat while True : l_set_value = l_set ( p_act , h_room , PAR_SETPT , l_man )","title":"Steuerfunktion"},{"location":"2_3_Funktionen/#aufgabe-2_3_1-implementierung-einer-tageslichtschaltung","text":"Implementieren Sie die Tageslichtschaltung in Python Stellen Sie zun\u00e4chst sicher, dass LED, Button und Analog-Digital-Wandler korrekt angeschlossen sind Setzen Sie die manuelle Einstellung l_man dauerhaft auf False Setzen Sie den Sollwert PAR_SETPT auf einen geigneten Wert Legen Sie die beiden Module tageslichtschaltung.py und mappings.py in den gleichen Ordner wie Ihre Hauptdatei \ud83e\udd13 Recherchieren Sie einen geeigneten Sensor, den Sie f\u00fcr die Anwesenheitserkennung verwenden k\u00f6nnen","title":"\ud83e\udd13\u270d\ufe0f Aufgabe 2_3_1: Implementierung einer Tageslichtschaltung"},{"location":"2_3_Funktionen/#moglicher-startpunkt","text":"import board import analogio import time from mappings import map_quat from tageslichtschaltung import l_set import digitalio # Initialisierung des ADC (Analog-Digital Converter) ldr = analogio . AnalogIn ( board . A2 ) # Initialisierung der LED led_pin = board . GP1 # Replace with the GPIO pin connected to your LED led = digitalio . DigitalInOut ( led_pin ) led . direction = digitalio . Direction . OUTPUT # Initialisierung Button button_pin = board . GP0 # Replace with the GPIO pin connected to your button button = digitalio . DigitalInOut ( button_pin ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP # Use pull-up resistor; change if using pull-down # Parameter setzen PAR_SETPT = 100 l_man = False # Wiederholung while True : # ADC als Dezimalzahl lesen read = ldr . value # Ausgabe in der Kommandozeile/Shell print ( \"ADC:\" , read ) print ( \"E in Lux\" , map_quat ( read ))","title":"M\u00f6glicher Startpunkt"},{"location":"2_3_Funktionen/#tageslichtschaltungpy","text":"def l_set ( p_act , h_room , PAR_SETPT , l_man ): return ( p_act and h_room < PAR_SETPT ) or l_man","title":"tageslichtschaltung.py"},{"location":"2_3_Funktionen/#mappingspy","text":"def map_lin ( z ): E_max = 1 E_min = 0 z_max = 65535 z_min = 0 beta_0 = E_min beta_1 = ( E_max - E_min ) / ( z_max - z_min ) return beta_0 + beta_1 * z def map_quat ( x ): s = 44000 a = 0.0015 return (( x - s ) * a ) ** 2","title":"mappings.py"},{"location":"2_3_Funktionen/#losung","text":"\ud83d\udca1 anzeigen import board import analogio import time from mappings import map_quat from tageslichtschaltung import l_set import digitalio # Initialisierung des ADC (Analog-Digital Converter) ldr = analogio . AnalogIn ( board . A2 ) # Initialisierung der LED led_pin = board . GP1 # Replace with the GPIO pin connected to your LED led = digitalio . DigitalInOut ( led_pin ) led . direction = digitalio . Direction . OUTPUT # Initialisierung Button button_pin = board . GP0 # Replace with the GPIO pin connected to your button button = digitalio . DigitalInOut ( button_pin ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP # Use pull-up resistor; change if using pull-down # Parameter setzen PAR_SETPT = 100 l_man = False # Wiederholung while True : # ADC als Dezimalzahl lesen read = ldr . value # Ausgabe in der Kommandozeile/Shell print ( \"ADC:\" , read ) print ( \"E in Lux\" , map_quat ( read )) # Anwesenheit mit Button verbinden p_act = button . value # Gemessene Helligkeit mit Sensor verbinden h_room = map_quat ( read ) l_set_value = l_set ( p_act , h_room , PAR_SETPT , l_man ) print ( \"Lampe ist: \" , l_set_value ) led . value = l_set_value # Warten time . sleep ( 1 )","title":"\u2714\ufe0f L\u00f6sung"},{"location":"2_3_Funktionen/#aufgabe-2_3_2","text":"Welche Teile des Codes k\u00f6nnte man ebenfalls in Funktionen auslagern? Wie sch\u00e4tzen Sie den Aufwand ein, wenn man nun weitere Tageslicht-Schaltungen mit anderen LEDs und Sensoren auf der gleichen Platine realisieren m\u00f6chte?","title":"\u270d\ufe0f Aufgabe 2_3_2:"},{"location":"2_3_Funktionen/#losung_1","text":"Initialisierung, da die Code immer gleich ist und sich nur je nach Aufbau die Pins \u00e4ndert Umrechnungen Einfacher, wenn mehr (z.B. auch die Zuweisung der Ein- und Ausg\u00e4nge) in Funktionen ausgelagert wird","title":"\u2714\ufe0f L\u00f6sung"},{"location":"2_3_Funktionen/#sichtbarkeit-von-variablen","text":"","title":"Sichtbarkeit von Variablen"},{"location":"2_3_Funktionen/#lokale-variablen","text":"Variablen, die innerhalb einer Funktion definiert werden (z.B. s ) sind au\u00dferhalb der Funktion nicht sichtbar ( Kapselung ) Dies gilt f\u00fcr die meisten Programmiersprachen und z.B. auch f\u00fcr Schleifen def map_quat ( x ): s = 44000 a = 0.0015 return (( x - s ) * a ) ** 2 print ( s ) # NameError Traceback (most recent call last) # <ipython-input-11-76c4dd40fb41> in <module> # ----> 1 print(s) # NameError: name 's' is not defined","title":"Lokale Variablen"},{"location":"2_3_Funktionen/#globale-variablen","text":"Variablen, die (bewusst) \u00fcberall im Programmcode aufrufbar sind (z.B. PAR_SETPT ) sind globale Variablen in Python werden globale Variablen in Gro\u00dfbuchstaben geschrieben A_GLOBAL_VAR = 1 def my_function (): a_local_variable = 2 return a_local_variable another_variable = my_function () print ( A_GLOBAL_VAR ) # 1 print ( a_local_variable ) # Error print ( another_variable ) # 2","title":"Globale Variablen"},{"location":"2_4_Objektorientierung/","text":"2.4 Objektorientierung Motivation Funktionen haben wohl definierten Input und Output aber keinen Speicher / Zustand Eine State-Machine hat einen Zustand, aber ist aufwendig zu implementieren und anzupassen Bedarf f\u00fcr beides: wenn wir bei einer Messfunktionen das Signal gl\u00e4tten wollen, m\u00fcssen wir den Zustand (letzte Messerwerte) speichern Grundkonzepte der Objektorientierung Programmierparadigma mit Fokus auf Objekte, deren Eigenschaften und F\u00e4higkeiten z.B. Objekt der Klasse Sensor Attribute (Eigenschaften mit Datentyp): Name Einheit Aktueller Messerwert Liste bisheriger Messerwerte Methoden (wie Funktionen): Mittelwert bilden Messen Letzten Messwert \u00fcbermitteln Klassen und Objekte Die Sensor-Klasse beschreibt allgemein das Verhalten jedes Sensors! Jeder einzelne Sensor ist ein Objekt der Klasse Sensor, bei dem die Attribute individuell ausgepr\u00e4gt Beleuchtungsst\u00e4rke-Sensor Temperatursensor ... classDiagram class Sensor{ +string name +string unit +float measurement +[]float measurements +do_measurement() +calc_mean() +print_data() } Attribute # Definition einer Klasse class Sensor : def __init__ ( self , name , unit ): self . name = name self . unit = unit self . measurement = None self . measurements = [] # Instanziierung eines Objekts sensor1 = Sensor ( \"Temperatursensor\" , \"\u00b0C\" ) sensor2 = Sensor ( \"Beleuchtungsst\u00e4rke\" , \"Lux\" ) # Aufruf der Attribute print ( sensor1 . name ) print ( sensor2 . name ) Die Methode __init__ wird aufgerufen, sobald ein Objekt einer Klasse instanziiert wird. Die Methode kann daf\u00fcr benutzt werden, ihr Objekt auf irgendeine Weise zu initialisieren wichtig ist in jeder Methode als erstes Argument self zu \u00fcbergeben, damit die Methode auf das Objekt zugreifen kann Ebenso werden Attribute mit self definiert, damit sie dem Objekt zugeordnet werden Methoden & Funktionen Methoden sind Funktionen, die zu einer Klasse geh\u00f6ren Funktionen sind wieder aufrufbare Code-Einheiten, denen Argumente als Parameter \u00fcbergeben werden k\u00f6nnen Funktionen geben einen R\u00fcckgabewert aus, der weiterverarbeitet werden kann # Definition einer Klasse class Sensor : def __init__ ( self , name , unit ): self . name = name self . unit = unit self . measurement = None self . measurements = [] def print_data ( self ): print ( \"This \" + self . name + \"returns data in \" + self . unit ) # Instanziierung eines Objekts sensor1 = Sensor ( \"Temperatursensor\" , \"\u00b0C\" ) # Aufruf der Attribute sensor1 . print_data () \u270d\ufe0f Aufgabe 2_4_1: Implementierung einer Sensor-Klasse import board import analogio import time import digitalio # Initialisierung des ADC (Analog-Digital Converter) ldr = analogio . AnalogIn ( board . A2 ) class Sensor : def __init__ ( self , name , unit ): self . name = name self . unit = unit self . last_measurement = None self . measurements = [] def do_measurement ( self , ldr ): self . last_measurement = ldr . value self . measurements . append ( self . last_measurement ) def print_data ( self ): print ( \"This \" + self . name + \"returns data in \" + self . unit ) beleuchtungs_sensor = Sensor ( \"Beleuchtungsst\u00e4rke\" , \"ADC\" ) # Wiederholung while True : # ADC als Dezimalzahl lesen beleuchtungs_sensor . do_measurement ( ldr ) print ( beleuchtungs_sensor . last_measurement ) # Warten time . sleep ( 1 ) Passen Sie den gegeben Code so an, dass der Sensor auch \u00fcber eine Methode verf\u00fcgt, welche den Mittelwert der Messwerte zur\u00fcckgibt Sie k\u00f6nnen die folgende Funktion als Ausgangspunkt verwenden Vergessen Sie nicht das self -Argument zu \u00fcbergeben Hierdurch k\u00f6nnen sie auch die \u00dcbergabe des Parameters list_of_measurements vermeiden, die Sie sich im Objekt direkt auf self.measurements beziehen k\u00f6nnen def bilde_mittelwert ( list_of_measurements ): \"\"\" Eine Funktion, die eine Liste von Werten \u00fcbernimmt und das arithmetische Mittel zur\u00fcck gibt\"\"\" mittelwert = sum ( list_of_measurements ) / len ( list_of_measurements ) return mittelwert ergebnis = bilde_mittelwert ([ 1 , 2 , 3 ]) \ud83e\udd13 \u270d\ufe0f Aufgabe 2_4_2: Stellen Sie sicher, dass maximal die letzten 10 Messwerte gespeichert werden Erweitern die Methode calc_mean so, dass optional nur die letzten n Messwerte ber\u00fccksichtigt werden und n als Parameter \u00fcbergeben werden kann Integrieren Sie die mappings.py in Ihre Sensor-Klasse, damit diese Lux-Werte zur\u00fcckgibt \ud83e\udd13 \ud83e\udd13 \u00dcberlegen Sie, wie Sie dem Sensor bei der Instanziierung unterschiedliche Mapping-Funktionen \u00fcbergeben k\u00f6nnen \u2714\ufe0f L\u00f6sung \ud83d\udca1 anzeigen import board import analogio import time import digitalio # Initialisierung des ADC (Analog-Digital Converter) ldr = analogio . AnalogIn ( board . A2 ) class Sensor : def __init__ ( self , name , unit ): self . name = name self . unit = unit self . last_measurement = None self . measurements = [] def do_measurement ( self , ldr ): self . last_measurement = ldr . value if len ( self . measurements ) > 10 : self . measurements . pop ( 0 ) self . measurements . append ( self . last_measurement ) def calc_mean ( self ): return sum ( self . measurements ) / len ( self . measurements ) def print_data ( self ): print ( \"This \" + self . name + \"returns data in \" + self . unit ) beleuchtungs_sensor = Sensor ( \"Beleuchtungsst\u00e4rke\" , \"ADC\" ) # Wiederholung while True : # ADC als Dezimalzahl lesen beleuchtungs_sensor . do_measurement ( ldr ) print ( beleuchtungs_sensor . measurements ) print ( beleuchtungs_sensor . calc_mean ()) # Warten time . sleep ( 1 ) \ud83d\udca1 anzeigen def map_lin ( z ): E_max = 1 E_min = 0 z_max = 65535 z_min = 0 beta_0 = E_min beta_1 = ( E_max - E_min ) / ( z_max - z_min ) return beta_0 + beta_1 * z def map_quat ( x ): s = 44000 a = 0.0015 return (( x - s ) * a ) ** 2 \ud83d\udca1 anzeigen import mappings import json class Sensor : def __init__ ( self , name , unit , selected_mapping ): self . name = name self . unit = unit self . last_measurement = None self . measurements = [] self . mapping = selected_mapping def do_measurement ( self , ldr ): self . last_measurement = ldr . value self . last_measurement = self . mapping ( self . last_measurement ) if len ( self . measurements ) > 10 : self . measurements . pop ( 0 ) self . measurements . append ( self . last_measurement ) def calc_mean ( self , n = 10 ): if len ( self . measurements ) < n : return sum ( self . measurements [ - n :]) / n else : return sum ( self . measurements ) / len ( self . measurements ) def prepare_data ( self ): dict_representation = self . __dict__ dict_representation . pop ( \"measurements\" ) dict_representation . pop ( \"name\" ) dict_representation . pop ( \"mapping\" ) # Vorsicht json.dumps() erstellt einen String, json.dump() schreibt eine Datei! json_representation = json . dumps ( dict_representation ) return json_representation . encode ( \"ascii\" ) def print_data ( self ): print ( \"This \" + self . name + \"returns data in \" + self . unit ) Vererbung Durch Vererbung k\u00f6nnen die Attribute und Methoden einer (Parent-)Klasse an andere (Child-) Klassen weitergegeben werden. Neu implementiert werden m\u00fcssen dann nur zus\u00e4tzliche Datenelemente und Methoden. Im UML-Klassendiagramm wird die Vererbung mit meinem im leeren Dreieck endenden Pfeil dargestellt. Dies erm\u00f6glicht eine hierarchische Strukturierung von Klassen z.B. um schnell verschiedene Sensor-Klassen zu erstellen JSON-Darstellung eines Objekts Serialisierung von Objekten Zur \u00dcbertragung zwischen Systemen und Speicherung m\u00fcssen Objekte unabh\u00e4ngig vom der Darstellung im Arbeitsspeicher gemacht werden Serialisierung: Objekt aus dem Arbeitsspeicher wird in eine Folge von Zeichen \u00fcbersetzt (letztlich eine Folge von Bits) Austauschdateiformat (meist in Form einer Auszeichnungssprache) Dictionaries Sind die Implementierung von Hash-Tabellen in Python (ein Datentyp vergleichbar mit einer Liste) Anstelle einer Liste, in der Werte \u00fcber eine Indexposition abgerufen werden, werden Werte \u00fcber einen Schl\u00fcssel abgerufen Schl\u00fcssel-Wert-Paare {<key1>:<value1>, <key2>:<value2>, <key3>:<value3} my_dict = beleuchtungs_sensor . __dict__ print ( my_dict ) { 'last_measurement' : 43114 , 'measurements' : [ 43130 , 43034 , 43066 , 42666 , 43370 , 43114 , 42426 , 43114 ], 'name' : 'Beleuchtungsst\u00e4rke' , 'unit' : 'ADC' } * Das __dict__ -Attribut enth\u00e4lt alle Attribute des Objekts als Dictionary * Auf die Werte im Dictionary kann \u00fcber den Schl\u00fcssel zugegriffen werden print ( my_dict [ \"last_measurement\" ]) JavaScriptObjectNotation (JSON) Dictionary-Objekte k\u00f6nnen in JSON-Objekte umgewandelt werden JSON is eine Auszeichnungssprache, die f\u00fcr den Datenaustausch zwischen Systemen verwendet wird import json with open ( \"sample.json\" , \"w\" ) as outfile : json . dump ( my_dict , outfile ) { \"last_measurement\" : 43114 , \"measurements\" : [ 43130 , 43034 , 43066 , 42666 , 43370 , 43114 , 42426 , 43114 ], \"name\" : \"Beleuchtungsst\\u00e4rke\" , \"unit\" : \"ADC\" } \u00fcber eine eignete Codierung (z.B. ASCII, UTF) k\u00f6nnen auch Bin\u00e4rdaten \u00fcbertragen werden <stings>.encode(\"ascii\") 1111011001001110110110101100101011101000110010101110010010111110110100101100100001001110011101000100000... \u270d\ufe0f Aufgabe 2_4_3: Nehmen wir an, wir m\u00f6chten die Messwerte eines Sensors \u00fcber ein Bussystem \u00fcbertragen Halten Sie es f\u00fcr sinnvoll, das ganze Dictionary zu \u00fcbertragen? Wenn nein, welche Werte w\u00fcrden Sie \u00fcbertragen? Implementieren Sie eine Methode prepare_data() , die Ihren Vorstellungen entspricht und das bereiningte Dictionary zur\u00fcckgibt und printen Sie es del(my_dict[\"unit\"]) entfernt z.B. den Eintrag unit aus dem Dictionary \u2714\ufe0f L\u00f6sung Ob es sinnvoll ist das gesamte Dictionary zu \u00fcbertragen, h\u00e4ngt von unter anderem von der Bandbreite des Bussystems ab. Ist diese begrenzt macht es ggf. Sinn nur die sich ver\u00e4ndernden Werte zu \u00fcbertragen. Wenn man alle Information aus den Nachrichten extrahieren m\u00f6chte, ist es aber auch sinnvolle das ganze Dictionary zu \u00fcbertragen. Priorit\u00e4t hat die \u00dcbertragung der Messwerte und ggf. die Einheit \ud83d\udca1 anzeigen import mappings import json class Sensor : def __init__ ( self , name , unit , selected_mapping ): self . name = name self . unit = unit self . last_measurement = None self . measurements = [] self . mapping = selected_mapping def do_measurement ( self , ldr ): self . last_measurement = ldr . value self . last_measurement = self . mapping ( self . last_measurement ) if len ( self . measurements ) > 10 : self . measurements . pop ( 0 ) self . measurements . append ( self . last_measurement ) def calc_mean ( self , n = 10 ): if len ( self . measurements ) < n : return sum ( self . measurements [ - n :]) / n else : return sum ( self . measurements ) / len ( self . measurements ) def prepare_data ( self ): dict_representation = self . __dict__ dict_representation . pop ( \"measurements\" ) dict_representation . pop ( \"name\" ) dict_representation . pop ( \"mapping\" ) # Vorsicht json.dumps() erstellt einen String, json.dump() schreibt eine Datei! json_representation = json . dumps ( dict_representation ) return json_representation . encode ( \"ascii\" ) def print_data ( self ): print ( \"This \" + self . name + \"returns data in \" + self . unit )","title":"Objektorientierung"},{"location":"2_4_Objektorientierung/#24-objektorientierung","text":"","title":"2.4 Objektorientierung"},{"location":"2_4_Objektorientierung/#motivation","text":"Funktionen haben wohl definierten Input und Output aber keinen Speicher / Zustand Eine State-Machine hat einen Zustand, aber ist aufwendig zu implementieren und anzupassen Bedarf f\u00fcr beides: wenn wir bei einer Messfunktionen das Signal gl\u00e4tten wollen, m\u00fcssen wir den Zustand (letzte Messerwerte) speichern","title":"Motivation"},{"location":"2_4_Objektorientierung/#grundkonzepte-der-objektorientierung","text":"Programmierparadigma mit Fokus auf Objekte, deren Eigenschaften und F\u00e4higkeiten z.B. Objekt der Klasse Sensor Attribute (Eigenschaften mit Datentyp): Name Einheit Aktueller Messerwert Liste bisheriger Messerwerte Methoden (wie Funktionen): Mittelwert bilden Messen Letzten Messwert \u00fcbermitteln","title":"Grundkonzepte der Objektorientierung"},{"location":"2_4_Objektorientierung/#klassen-und-objekte","text":"Die Sensor-Klasse beschreibt allgemein das Verhalten jedes Sensors! Jeder einzelne Sensor ist ein Objekt der Klasse Sensor, bei dem die Attribute individuell ausgepr\u00e4gt Beleuchtungsst\u00e4rke-Sensor Temperatursensor ... classDiagram class Sensor{ +string name +string unit +float measurement +[]float measurements +do_measurement() +calc_mean() +print_data() }","title":"Klassen und Objekte"},{"location":"2_4_Objektorientierung/#attribute","text":"# Definition einer Klasse class Sensor : def __init__ ( self , name , unit ): self . name = name self . unit = unit self . measurement = None self . measurements = [] # Instanziierung eines Objekts sensor1 = Sensor ( \"Temperatursensor\" , \"\u00b0C\" ) sensor2 = Sensor ( \"Beleuchtungsst\u00e4rke\" , \"Lux\" ) # Aufruf der Attribute print ( sensor1 . name ) print ( sensor2 . name ) Die Methode __init__ wird aufgerufen, sobald ein Objekt einer Klasse instanziiert wird. Die Methode kann daf\u00fcr benutzt werden, ihr Objekt auf irgendeine Weise zu initialisieren wichtig ist in jeder Methode als erstes Argument self zu \u00fcbergeben, damit die Methode auf das Objekt zugreifen kann Ebenso werden Attribute mit self definiert, damit sie dem Objekt zugeordnet werden","title":"Attribute"},{"location":"2_4_Objektorientierung/#methoden-funktionen","text":"Methoden sind Funktionen, die zu einer Klasse geh\u00f6ren Funktionen sind wieder aufrufbare Code-Einheiten, denen Argumente als Parameter \u00fcbergeben werden k\u00f6nnen Funktionen geben einen R\u00fcckgabewert aus, der weiterverarbeitet werden kann # Definition einer Klasse class Sensor : def __init__ ( self , name , unit ): self . name = name self . unit = unit self . measurement = None self . measurements = [] def print_data ( self ): print ( \"This \" + self . name + \"returns data in \" + self . unit ) # Instanziierung eines Objekts sensor1 = Sensor ( \"Temperatursensor\" , \"\u00b0C\" ) # Aufruf der Attribute sensor1 . print_data ()","title":"Methoden &amp; Funktionen"},{"location":"2_4_Objektorientierung/#aufgabe-2_4_1-implementierung-einer-sensor-klasse","text":"import board import analogio import time import digitalio # Initialisierung des ADC (Analog-Digital Converter) ldr = analogio . AnalogIn ( board . A2 ) class Sensor : def __init__ ( self , name , unit ): self . name = name self . unit = unit self . last_measurement = None self . measurements = [] def do_measurement ( self , ldr ): self . last_measurement = ldr . value self . measurements . append ( self . last_measurement ) def print_data ( self ): print ( \"This \" + self . name + \"returns data in \" + self . unit ) beleuchtungs_sensor = Sensor ( \"Beleuchtungsst\u00e4rke\" , \"ADC\" ) # Wiederholung while True : # ADC als Dezimalzahl lesen beleuchtungs_sensor . do_measurement ( ldr ) print ( beleuchtungs_sensor . last_measurement ) # Warten time . sleep ( 1 ) Passen Sie den gegeben Code so an, dass der Sensor auch \u00fcber eine Methode verf\u00fcgt, welche den Mittelwert der Messwerte zur\u00fcckgibt Sie k\u00f6nnen die folgende Funktion als Ausgangspunkt verwenden Vergessen Sie nicht das self -Argument zu \u00fcbergeben Hierdurch k\u00f6nnen sie auch die \u00dcbergabe des Parameters list_of_measurements vermeiden, die Sie sich im Objekt direkt auf self.measurements beziehen k\u00f6nnen def bilde_mittelwert ( list_of_measurements ): \"\"\" Eine Funktion, die eine Liste von Werten \u00fcbernimmt und das arithmetische Mittel zur\u00fcck gibt\"\"\" mittelwert = sum ( list_of_measurements ) / len ( list_of_measurements ) return mittelwert ergebnis = bilde_mittelwert ([ 1 , 2 , 3 ])","title":"\u270d\ufe0f Aufgabe 2_4_1: Implementierung einer Sensor-Klasse"},{"location":"2_4_Objektorientierung/#aufgabe-2_4_2","text":"Stellen Sie sicher, dass maximal die letzten 10 Messwerte gespeichert werden Erweitern die Methode calc_mean so, dass optional nur die letzten n Messwerte ber\u00fccksichtigt werden und n als Parameter \u00fcbergeben werden kann Integrieren Sie die mappings.py in Ihre Sensor-Klasse, damit diese Lux-Werte zur\u00fcckgibt \ud83e\udd13 \ud83e\udd13 \u00dcberlegen Sie, wie Sie dem Sensor bei der Instanziierung unterschiedliche Mapping-Funktionen \u00fcbergeben k\u00f6nnen","title":"\ud83e\udd13 \u270d\ufe0f Aufgabe 2_4_2:"},{"location":"2_4_Objektorientierung/#losung","text":"\ud83d\udca1 anzeigen import board import analogio import time import digitalio # Initialisierung des ADC (Analog-Digital Converter) ldr = analogio . AnalogIn ( board . A2 ) class Sensor : def __init__ ( self , name , unit ): self . name = name self . unit = unit self . last_measurement = None self . measurements = [] def do_measurement ( self , ldr ): self . last_measurement = ldr . value if len ( self . measurements ) > 10 : self . measurements . pop ( 0 ) self . measurements . append ( self . last_measurement ) def calc_mean ( self ): return sum ( self . measurements ) / len ( self . measurements ) def print_data ( self ): print ( \"This \" + self . name + \"returns data in \" + self . unit ) beleuchtungs_sensor = Sensor ( \"Beleuchtungsst\u00e4rke\" , \"ADC\" ) # Wiederholung while True : # ADC als Dezimalzahl lesen beleuchtungs_sensor . do_measurement ( ldr ) print ( beleuchtungs_sensor . measurements ) print ( beleuchtungs_sensor . calc_mean ()) # Warten time . sleep ( 1 ) \ud83d\udca1 anzeigen def map_lin ( z ): E_max = 1 E_min = 0 z_max = 65535 z_min = 0 beta_0 = E_min beta_1 = ( E_max - E_min ) / ( z_max - z_min ) return beta_0 + beta_1 * z def map_quat ( x ): s = 44000 a = 0.0015 return (( x - s ) * a ) ** 2 \ud83d\udca1 anzeigen import mappings import json class Sensor : def __init__ ( self , name , unit , selected_mapping ): self . name = name self . unit = unit self . last_measurement = None self . measurements = [] self . mapping = selected_mapping def do_measurement ( self , ldr ): self . last_measurement = ldr . value self . last_measurement = self . mapping ( self . last_measurement ) if len ( self . measurements ) > 10 : self . measurements . pop ( 0 ) self . measurements . append ( self . last_measurement ) def calc_mean ( self , n = 10 ): if len ( self . measurements ) < n : return sum ( self . measurements [ - n :]) / n else : return sum ( self . measurements ) / len ( self . measurements ) def prepare_data ( self ): dict_representation = self . __dict__ dict_representation . pop ( \"measurements\" ) dict_representation . pop ( \"name\" ) dict_representation . pop ( \"mapping\" ) # Vorsicht json.dumps() erstellt einen String, json.dump() schreibt eine Datei! json_representation = json . dumps ( dict_representation ) return json_representation . encode ( \"ascii\" ) def print_data ( self ): print ( \"This \" + self . name + \"returns data in \" + self . unit )","title":"\u2714\ufe0f L\u00f6sung"},{"location":"2_4_Objektorientierung/#vererbung","text":"Durch Vererbung k\u00f6nnen die Attribute und Methoden einer (Parent-)Klasse an andere (Child-) Klassen weitergegeben werden. Neu implementiert werden m\u00fcssen dann nur zus\u00e4tzliche Datenelemente und Methoden. Im UML-Klassendiagramm wird die Vererbung mit meinem im leeren Dreieck endenden Pfeil dargestellt. Dies erm\u00f6glicht eine hierarchische Strukturierung von Klassen z.B. um schnell verschiedene Sensor-Klassen zu erstellen","title":"Vererbung"},{"location":"2_4_Objektorientierung/#json-darstellung-eines-objekts","text":"","title":"JSON-Darstellung eines Objekts"},{"location":"2_4_Objektorientierung/#serialisierung-von-objekten","text":"Zur \u00dcbertragung zwischen Systemen und Speicherung m\u00fcssen Objekte unabh\u00e4ngig vom der Darstellung im Arbeitsspeicher gemacht werden Serialisierung: Objekt aus dem Arbeitsspeicher wird in eine Folge von Zeichen \u00fcbersetzt (letztlich eine Folge von Bits) Austauschdateiformat (meist in Form einer Auszeichnungssprache)","title":"Serialisierung von Objekten"},{"location":"2_4_Objektorientierung/#dictionaries","text":"Sind die Implementierung von Hash-Tabellen in Python (ein Datentyp vergleichbar mit einer Liste) Anstelle einer Liste, in der Werte \u00fcber eine Indexposition abgerufen werden, werden Werte \u00fcber einen Schl\u00fcssel abgerufen Schl\u00fcssel-Wert-Paare {<key1>:<value1>, <key2>:<value2>, <key3>:<value3} my_dict = beleuchtungs_sensor . __dict__ print ( my_dict ) { 'last_measurement' : 43114 , 'measurements' : [ 43130 , 43034 , 43066 , 42666 , 43370 , 43114 , 42426 , 43114 ], 'name' : 'Beleuchtungsst\u00e4rke' , 'unit' : 'ADC' } * Das __dict__ -Attribut enth\u00e4lt alle Attribute des Objekts als Dictionary * Auf die Werte im Dictionary kann \u00fcber den Schl\u00fcssel zugegriffen werden print ( my_dict [ \"last_measurement\" ])","title":"Dictionaries"},{"location":"2_4_Objektorientierung/#javascriptobjectnotation-json","text":"Dictionary-Objekte k\u00f6nnen in JSON-Objekte umgewandelt werden JSON is eine Auszeichnungssprache, die f\u00fcr den Datenaustausch zwischen Systemen verwendet wird import json with open ( \"sample.json\" , \"w\" ) as outfile : json . dump ( my_dict , outfile ) { \"last_measurement\" : 43114 , \"measurements\" : [ 43130 , 43034 , 43066 , 42666 , 43370 , 43114 , 42426 , 43114 ], \"name\" : \"Beleuchtungsst\\u00e4rke\" , \"unit\" : \"ADC\" } \u00fcber eine eignete Codierung (z.B. ASCII, UTF) k\u00f6nnen auch Bin\u00e4rdaten \u00fcbertragen werden <stings>.encode(\"ascii\") 1111011001001110110110101100101011101000110010101110010010111110110100101100100001001110011101000100000...","title":"JavaScriptObjectNotation (JSON)"},{"location":"2_4_Objektorientierung/#aufgabe-2_4_3","text":"Nehmen wir an, wir m\u00f6chten die Messwerte eines Sensors \u00fcber ein Bussystem \u00fcbertragen Halten Sie es f\u00fcr sinnvoll, das ganze Dictionary zu \u00fcbertragen? Wenn nein, welche Werte w\u00fcrden Sie \u00fcbertragen? Implementieren Sie eine Methode prepare_data() , die Ihren Vorstellungen entspricht und das bereiningte Dictionary zur\u00fcckgibt und printen Sie es del(my_dict[\"unit\"]) entfernt z.B. den Eintrag unit aus dem Dictionary","title":"\u270d\ufe0f Aufgabe 2_4_3:"},{"location":"2_4_Objektorientierung/#losung_1","text":"Ob es sinnvoll ist das gesamte Dictionary zu \u00fcbertragen, h\u00e4ngt von unter anderem von der Bandbreite des Bussystems ab. Ist diese begrenzt macht es ggf. Sinn nur die sich ver\u00e4ndernden Werte zu \u00fcbertragen. Wenn man alle Information aus den Nachrichten extrahieren m\u00f6chte, ist es aber auch sinnvolle das ganze Dictionary zu \u00fcbertragen. Priorit\u00e4t hat die \u00dcbertragung der Messwerte und ggf. die Einheit \ud83d\udca1 anzeigen import mappings import json class Sensor : def __init__ ( self , name , unit , selected_mapping ): self . name = name self . unit = unit self . last_measurement = None self . measurements = [] self . mapping = selected_mapping def do_measurement ( self , ldr ): self . last_measurement = ldr . value self . last_measurement = self . mapping ( self . last_measurement ) if len ( self . measurements ) > 10 : self . measurements . pop ( 0 ) self . measurements . append ( self . last_measurement ) def calc_mean ( self , n = 10 ): if len ( self . measurements ) < n : return sum ( self . measurements [ - n :]) / n else : return sum ( self . measurements ) / len ( self . measurements ) def prepare_data ( self ): dict_representation = self . __dict__ dict_representation . pop ( \"measurements\" ) dict_representation . pop ( \"name\" ) dict_representation . pop ( \"mapping\" ) # Vorsicht json.dumps() erstellt einen String, json.dump() schreibt eine Datei! json_representation = json . dumps ( dict_representation ) return json_representation . encode ( \"ascii\" ) def print_data ( self ): print ( \"This \" + self . name + \"returns data in \" + self . unit )","title":"\u2714\ufe0f L\u00f6sung"},{"location":"3_1_Blockschaltbild/","text":"3.1 Blockschaltbild Blockschaltbild Grafische Beschreibung von Systemen in der Regelungs- und Steuerungstechnik Systeme werden durch Bl\u00f6cke dargestellt, die durch Pfeile verbunden sind z.B. Steuerungsfunktion (z.B. in Python) z.B. thermodynamisches Modell eines Raums I.d.R. besch\u00e4ftigen wir uns mit dynamischen Systemen Die Ausgangsgr\u00f6\u00dfe h\u00e4ngt nicht nur von den Eingangsgr\u00f6\u00dfen ab (vgl. Funktion) sondern auch vom Systemzustand und damit inneren Zustandsgr\u00f6\u00dfen (vgl. Objekt) Quelle Dynamische Systeme lineare Systeme: Systemfunktion ist eine lineare Funktion nichtlineare Systeme: Systemfunktion ist eine nichtlineare Funktion zeitinvariante Systeme: Systemfunktion ist unabh\u00e4ngig von der Zeit zeitvariante Systeme: Systemfunktion ist abh\u00e4ngig von der Zeit Totzeit: Systemfunktion ist eine Funktion der Zeit, die f\u00fcr \\(t<0\\) verschwindet Elemente eines Blockschaltbildes \u00dcbertragungsglieder beschreiben Systeme mit deren Eigenschaften / Funktionen Pfeile die Ein- und Ausgangsgr\u00f6\u00dfen Komplexe Systeme k\u00f6nnen durch mehrere Systeme zusammengesetzt werden Systeme werden im Zeitbereich durch ihre Funktionsbeziehung zwischen Ausgang \\(y\\) und Eingang \\(u\\) unterschieden \\(f(u)=y\\) Proportionalglied (P-Glied) Linear und zeitinvariant Beschreibt Systeme mit direktem proportionaler Systemfunktion \\(f\\) f\u00fcr den Zusammenhang zwischen Eingang ( \\(u\\) ) und Ausgang ( \\(y\\) ) \\(y = f(u)=K_p \\cdot u\\) \\(K_p\\) ... Proportionalit\u00e4tsfaktor Wirkweise eines P-Glieds \\(y = f(u)=K_p \\cdot u\\) Beispiel: je h\u00f6her die \\(\\text{CO}_2\\) Konzentration in einem Raum, desto schneller dreht sich ein Ventilator in einer L\u00fcftungsanlage \\(y\\) ... Drehfrequenz der Ventilators in \\(Hz\\) \\(u\\) ... \\(\\text{CO}_2\\) Konzentration in \\(ppm\\) \\(K_p\\) ... Proportionalit\u00e4tsfaktor in \\(\\frac{Hz}{ppm}\\) Unabh\u00e4ngig vom Verlauf der Eingangsgr\u00f6\u00dfe \\(u(t)\\) ist der Wert der Ausgangsgr\u00f6\u00dfe \\(y(t)\\) immer proportional \ud83e\udde0 Einheits-Sprungfunktion Eine Funktion, die am Zeitpunkt \\(t=0\\) von \\(u=0\\) auf \\(u=1\\) springt und sonst konstant bleibt beliebtes Werkzeug in die Regelungstechnik: Wie reagiert ein System, wenn wir eine Sprungfunktion an den Eingang legen (auch in der E-Technik!) \ud83e\udde0 Sprungantwort (Reaktion) eines P-Glieds auf eine Sprungfunktion Das Symbol repr\u00e4sentiert die Sprungantwort weitere Beispiele: Entwicklung Spannungsabfall am Ohmschen Widerstand beim Anlegen einer Quellenspannung Antwort eines Helligkeitssensors auf Lichteinfall Quelle Totzeitglied (T-Glied) beschreibt die zeitliche Verz\u00f6gerung, bis ein System auf das Eingangssignal (z.B. der Sprungfunktion) reagiert. Nicht die Tr\u00e4gheit des Systems sondern eine Leerlaufzeit \\(T_t\\) . \ud83e\udde0 Sprungantwort eines T-Glieds auf eine Sprungfunktion Simulation mit scilab xcos Installieren Sie scilab xcos Xcos ist ein grafischer Editor f\u00fcr Blockschaltbilder die Funktionalit\u00e4t entspricht in etwa matlab simulink allerdings ist die Software open source und kostenlos \u270d\ufe0f Aufgabe 3_1_0: Proportional mit Totzeitglied \u00d6ffnen Sie P_totzeit.zcos in scilab xcos Testen Sie verschiedene Werte f\u00fcr den P-Wert beim PID -Block und die Totzeit beim Continuous fix delay -Block Ersetzen Sie den PID -Block durch einen GAIN_f -Block Proportionalglied mit Verz\u00f6gerung 1. Ordnung (PT1-Glied) beschreibt Tr\u00e4gheit im System oder eine D\u00e4mpfung n\u00e4hert sich \u00fcber die Zeit einer waagrechten Linie an z.B. Spannung am Kondensator z.B. Temperatur im Raum nach dem Einschalten einer Fu\u00dfbodenheizung Beschr\u00e4nktes Wachstum Es gibt noch viele weitere typische Glieder Mehr dazu beim Thema stetige Regler aus diesen lassen sich komplexe Modelle zusammenstellen lassen (z.B. als Blockschaltbild) Blockschaltbild einer Steuerung Die F\u00fchrungsgr\u00f6\u00dfe ist die Gr\u00f6\u00dfe, welche das Verhalten der Stellglieds bestimmt ( \\(\\rightarrow\\) z.B. die aktuelle Beleuchtungsst\u00e4rke gemessen am Lichtsensor im Freien) Durch das Stellen eines Stellglieds (oder Stelleinrichtung bzw. Aktor) wird die Steuerstrecke beeinflusst ( \\(\\rightarrow\\) Mikrocotroller steuert Spannung an LED an oder aus basierend auf einen Schwellenwert) Quelle \ud83e\udde0 Steuerung Stellgr\u00f6\u00dfe ist die Ausgangsgr\u00f6\u00dfe des Stellglieds ( \\(\\rightarrow\\) Spannung an der LED) Steuerstrecke ist das System, das durch die Stellgr\u00f6\u00dfe und St\u00f6rgr\u00f6\u00dfen beeinflusst wird ( \\(\\rightarrow\\) Helligkeit im Raum) Auf die Steuerstrecke wirken neben der Stellgr\u00f6\u00dfe aus St\u00f6rgr\u00f6\u00dfen ( \\(\\rightarrow\\) Lichteinfall von Au\u00dfen, weitere nicht gesteuerte Lichtquellen im Raum) Quelle Stellglied ist nun kein standardisiertes Glied, sondern hat eine spezielle Funktion die sich aus Hard- und Software ergibt diese beinhaltet Steuerungslogik und physikalische Umsetzung zeitliche Reaktion meist nicht unmittelbar, sondern verz\u00f6gert (z.B. Rechenzeit als Totzeit) def l_set ( p_act , h_room , PAR_SETPT , l_man ): return ( p_act and h_room < PAR_SETPT ) or l_man Steuerstrecke beschreibt die echte Welt h\u00e4ufig in vereinfachten Modellen zeitliche Reaktion meist nicht unmittelbar (z.B. PT1-Glied) def beleuchtungsstraerke_raum_lux ( lichtabgabe_led , lichteinfall_aussen , wand_farbe ): # Gr\u00f6\u00dfe des Raumes # Gr\u00f6\u00dfe der Fenster # Reflexion der W\u00e4nde <...> return beleuchtungsstraerke_raum_lux def raumtemperatur ( heizleistung_in_w , aussen_temp_in_c ): # Temperatur im Zeitpunkt zuvor # Tr\u00e4gheit der Temperatur\u00e4nderung # Gr\u00f6\u00dfe des Raumes # Isolation der Raumes <...> return raum_temp_in_c \u270d\ufe0f Aufgabe 3_1_1: Wassertank ohne Steuerung Bauen Sie das folgende Modell aus CONST , INTEGRAL_m , CSCOPE und CLOCK_c nach Modellieren Sie einen 100 l fassenden Wassertank, der zu Begin mit 10 l gef\u00fcllt ist und in den 5 l pro Minute einflie\u00dfen \u2714\ufe0f L\u00f6sung \ud83d\udca1 anzeigen Link \u270d\ufe0f Aufgabe 3_1_2: Einfache Tageslichtschaltung passen Sie den Threshold in Dynamic in 3_1_2_Tageslichtschaltung.zcos so an, dass die LED bei einer Helligkeit von 220 Lux angeht \u2714\ufe0f L\u00f6sung \ud83d\udca1 anzeigen Link Zwei-Punkt Regelung Vorteile einfach zu verstehen und zu implementieren regelabweichung = soll_lux - ist_lux zweipunkt_regler ( regelabweichung ): if regelabweichung > 0 : licht = True else : licht = False return licht Quelle Probleme Zwei-Punkt Regelung Nachteile bei zeitlich wenig tr\u00e4gen Systemen Regler schaltet st\u00e4ndig zwischen den Ausgangswerten kritisch insbesondere bei mechanische Belastung z.B. Motor wird st\u00e4ndig an und aus geschaltet Hysterese bewirkt eine Schalttoleranz ober- und unterhalb des Sollwerts def zweipunkt_hysterese ( ist_lux , on_level , off_level , letzter_zustand ): if ist_lux > off_level : licht = False elif ist_lux < on_level : licht = True else : licht = letzter_zustand return licht class zweipunkt_hysterese (): def __init__ ( self , on_level , off_level ): self . on_level = on_level self . off_level = off_level self . letzter_zustand = False def calc_output ( self , ist_lux ): if ist_lux > self . off_level : self . letzter_zustand = False elif ist_lux < self . on_level : self . letzter_zustand = True return self . letzter_zustand Quelle Quelle Drei-Punkt Regelung vermeidet st\u00e4ndiges Umschalten sinnvoll bei Neutralstellung z.B. Motoren drei_punk_regler ( abstand ): if abstand > 6 : fahre = \"vorw\u00e4rts\" elif abstand < 4 : fahre = \"r\u00fcckw\u00e4rts\" else : fahre = \"nicht\" return fahre bewegung = drei_punk_regler ( abstand ) \u270d\ufe0f Aufgabe 3_1_3: Einfache Tageslichtschaltung Ersetzen Sie den Schalter Dynamic mit einem Hystereseschalter HYSTERESIS \u2714\ufe0f L\u00f6sung \ud83d\udca1 anzeigen Link","title":"Blockschaltbild "},{"location":"3_1_Blockschaltbild/#31-blockschaltbild","text":"","title":"3.1 Blockschaltbild"},{"location":"3_1_Blockschaltbild/#blockschaltbild","text":"Grafische Beschreibung von Systemen in der Regelungs- und Steuerungstechnik Systeme werden durch Bl\u00f6cke dargestellt, die durch Pfeile verbunden sind z.B. Steuerungsfunktion (z.B. in Python) z.B. thermodynamisches Modell eines Raums I.d.R. besch\u00e4ftigen wir uns mit dynamischen Systemen Die Ausgangsgr\u00f6\u00dfe h\u00e4ngt nicht nur von den Eingangsgr\u00f6\u00dfen ab (vgl. Funktion) sondern auch vom Systemzustand und damit inneren Zustandsgr\u00f6\u00dfen (vgl. Objekt) Quelle","title":"Blockschaltbild"},{"location":"3_1_Blockschaltbild/#dynamische-systeme","text":"lineare Systeme: Systemfunktion ist eine lineare Funktion nichtlineare Systeme: Systemfunktion ist eine nichtlineare Funktion zeitinvariante Systeme: Systemfunktion ist unabh\u00e4ngig von der Zeit zeitvariante Systeme: Systemfunktion ist abh\u00e4ngig von der Zeit Totzeit: Systemfunktion ist eine Funktion der Zeit, die f\u00fcr \\(t<0\\) verschwindet","title":"Dynamische Systeme"},{"location":"3_1_Blockschaltbild/#elemente-eines-blockschaltbildes","text":"\u00dcbertragungsglieder beschreiben Systeme mit deren Eigenschaften / Funktionen Pfeile die Ein- und Ausgangsgr\u00f6\u00dfen Komplexe Systeme k\u00f6nnen durch mehrere Systeme zusammengesetzt werden Systeme werden im Zeitbereich durch ihre Funktionsbeziehung zwischen Ausgang \\(y\\) und Eingang \\(u\\) unterschieden \\(f(u)=y\\)","title":"Elemente eines Blockschaltbildes"},{"location":"3_1_Blockschaltbild/#proportionalglied-p-glied","text":"Linear und zeitinvariant Beschreibt Systeme mit direktem proportionaler Systemfunktion \\(f\\) f\u00fcr den Zusammenhang zwischen Eingang ( \\(u\\) ) und Ausgang ( \\(y\\) ) \\(y = f(u)=K_p \\cdot u\\) \\(K_p\\) ... Proportionalit\u00e4tsfaktor","title":"Proportionalglied (P-Glied)"},{"location":"3_1_Blockschaltbild/#wirkweise-eines-p-glieds","text":"\\(y = f(u)=K_p \\cdot u\\) Beispiel: je h\u00f6her die \\(\\text{CO}_2\\) Konzentration in einem Raum, desto schneller dreht sich ein Ventilator in einer L\u00fcftungsanlage \\(y\\) ... Drehfrequenz der Ventilators in \\(Hz\\) \\(u\\) ... \\(\\text{CO}_2\\) Konzentration in \\(ppm\\) \\(K_p\\) ... Proportionalit\u00e4tsfaktor in \\(\\frac{Hz}{ppm}\\) Unabh\u00e4ngig vom Verlauf der Eingangsgr\u00f6\u00dfe \\(u(t)\\) ist der Wert der Ausgangsgr\u00f6\u00dfe \\(y(t)\\) immer proportional","title":"Wirkweise eines P-Glieds"},{"location":"3_1_Blockschaltbild/#einheits-sprungfunktion","text":"Eine Funktion, die am Zeitpunkt \\(t=0\\) von \\(u=0\\) auf \\(u=1\\) springt und sonst konstant bleibt beliebtes Werkzeug in die Regelungstechnik: Wie reagiert ein System, wenn wir eine Sprungfunktion an den Eingang legen (auch in der E-Technik!)","title":"\ud83e\udde0 Einheits-Sprungfunktion"},{"location":"3_1_Blockschaltbild/#sprungantwort-reaktion-eines-p-glieds-auf-eine-sprungfunktion","text":"Das Symbol repr\u00e4sentiert die Sprungantwort weitere Beispiele: Entwicklung Spannungsabfall am Ohmschen Widerstand beim Anlegen einer Quellenspannung Antwort eines Helligkeitssensors auf Lichteinfall Quelle","title":"\ud83e\udde0 Sprungantwort (Reaktion) eines P-Glieds auf eine Sprungfunktion"},{"location":"3_1_Blockschaltbild/#totzeitglied-t-glied","text":"beschreibt die zeitliche Verz\u00f6gerung, bis ein System auf das Eingangssignal (z.B. der Sprungfunktion) reagiert. Nicht die Tr\u00e4gheit des Systems sondern eine Leerlaufzeit \\(T_t\\) .","title":"Totzeitglied (T-Glied)"},{"location":"3_1_Blockschaltbild/#sprungantwort-eines-t-glieds-auf-eine-sprungfunktion","text":"","title":"\ud83e\udde0 Sprungantwort eines T-Glieds auf eine Sprungfunktion"},{"location":"3_1_Blockschaltbild/#simulation-mit-scilab-xcos","text":"Installieren Sie scilab xcos Xcos ist ein grafischer Editor f\u00fcr Blockschaltbilder die Funktionalit\u00e4t entspricht in etwa matlab simulink allerdings ist die Software open source und kostenlos","title":"Simulation mit scilab xcos"},{"location":"3_1_Blockschaltbild/#aufgabe-3_1_0-proportional-mit-totzeitglied","text":"\u00d6ffnen Sie P_totzeit.zcos in scilab xcos Testen Sie verschiedene Werte f\u00fcr den P-Wert beim PID -Block und die Totzeit beim Continuous fix delay -Block Ersetzen Sie den PID -Block durch einen GAIN_f -Block","title":"\u270d\ufe0f Aufgabe 3_1_0: Proportional mit Totzeitglied"},{"location":"3_1_Blockschaltbild/#proportionalglied-mit-verzogerung-1-ordnung-pt1-glied","text":"beschreibt Tr\u00e4gheit im System oder eine D\u00e4mpfung n\u00e4hert sich \u00fcber die Zeit einer waagrechten Linie an z.B. Spannung am Kondensator z.B. Temperatur im Raum nach dem Einschalten einer Fu\u00dfbodenheizung Beschr\u00e4nktes Wachstum Es gibt noch viele weitere typische Glieder Mehr dazu beim Thema stetige Regler aus diesen lassen sich komplexe Modelle zusammenstellen lassen (z.B. als Blockschaltbild)","title":"Proportionalglied mit Verz\u00f6gerung 1. Ordnung (PT1-Glied)"},{"location":"3_1_Blockschaltbild/#blockschaltbild-einer-steuerung","text":"Die F\u00fchrungsgr\u00f6\u00dfe ist die Gr\u00f6\u00dfe, welche das Verhalten der Stellglieds bestimmt ( \\(\\rightarrow\\) z.B. die aktuelle Beleuchtungsst\u00e4rke gemessen am Lichtsensor im Freien) Durch das Stellen eines Stellglieds (oder Stelleinrichtung bzw. Aktor) wird die Steuerstrecke beeinflusst ( \\(\\rightarrow\\) Mikrocotroller steuert Spannung an LED an oder aus basierend auf einen Schwellenwert) Quelle","title":"Blockschaltbild einer Steuerung"},{"location":"3_1_Blockschaltbild/#steuerung","text":"Stellgr\u00f6\u00dfe ist die Ausgangsgr\u00f6\u00dfe des Stellglieds ( \\(\\rightarrow\\) Spannung an der LED) Steuerstrecke ist das System, das durch die Stellgr\u00f6\u00dfe und St\u00f6rgr\u00f6\u00dfen beeinflusst wird ( \\(\\rightarrow\\) Helligkeit im Raum) Auf die Steuerstrecke wirken neben der Stellgr\u00f6\u00dfe aus St\u00f6rgr\u00f6\u00dfen ( \\(\\rightarrow\\) Lichteinfall von Au\u00dfen, weitere nicht gesteuerte Lichtquellen im Raum) Quelle","title":"\ud83e\udde0 Steuerung"},{"location":"3_1_Blockschaltbild/#stellglied","text":"ist nun kein standardisiertes Glied, sondern hat eine spezielle Funktion die sich aus Hard- und Software ergibt diese beinhaltet Steuerungslogik und physikalische Umsetzung zeitliche Reaktion meist nicht unmittelbar, sondern verz\u00f6gert (z.B. Rechenzeit als Totzeit) def l_set ( p_act , h_room , PAR_SETPT , l_man ): return ( p_act and h_room < PAR_SETPT ) or l_man","title":"Stellglied"},{"location":"3_1_Blockschaltbild/#steuerstrecke","text":"beschreibt die echte Welt h\u00e4ufig in vereinfachten Modellen zeitliche Reaktion meist nicht unmittelbar (z.B. PT1-Glied) def beleuchtungsstraerke_raum_lux ( lichtabgabe_led , lichteinfall_aussen , wand_farbe ): # Gr\u00f6\u00dfe des Raumes # Gr\u00f6\u00dfe der Fenster # Reflexion der W\u00e4nde <...> return beleuchtungsstraerke_raum_lux def raumtemperatur ( heizleistung_in_w , aussen_temp_in_c ): # Temperatur im Zeitpunkt zuvor # Tr\u00e4gheit der Temperatur\u00e4nderung # Gr\u00f6\u00dfe des Raumes # Isolation der Raumes <...> return raum_temp_in_c","title":"Steuerstrecke"},{"location":"3_1_Blockschaltbild/#aufgabe-3_1_1-wassertank-ohne-steuerung","text":"Bauen Sie das folgende Modell aus CONST , INTEGRAL_m , CSCOPE und CLOCK_c nach Modellieren Sie einen 100 l fassenden Wassertank, der zu Begin mit 10 l gef\u00fcllt ist und in den 5 l pro Minute einflie\u00dfen","title":"\u270d\ufe0f Aufgabe 3_1_1: Wassertank ohne Steuerung"},{"location":"3_1_Blockschaltbild/#losung","text":"\ud83d\udca1 anzeigen Link","title":"\u2714\ufe0f L\u00f6sung"},{"location":"3_1_Blockschaltbild/#aufgabe-3_1_2-einfache-tageslichtschaltung","text":"passen Sie den Threshold in Dynamic in 3_1_2_Tageslichtschaltung.zcos so an, dass die LED bei einer Helligkeit von 220 Lux angeht","title":"\u270d\ufe0f Aufgabe 3_1_2: Einfache Tageslichtschaltung"},{"location":"3_1_Blockschaltbild/#losung_1","text":"\ud83d\udca1 anzeigen Link","title":"\u2714\ufe0f L\u00f6sung"},{"location":"3_1_Blockschaltbild/#zwei-punkt-regelung","text":"Vorteile einfach zu verstehen und zu implementieren regelabweichung = soll_lux - ist_lux zweipunkt_regler ( regelabweichung ): if regelabweichung > 0 : licht = True else : licht = False return licht Quelle","title":"Zwei-Punkt Regelung"},{"location":"3_1_Blockschaltbild/#probleme-zwei-punkt-regelung","text":"Nachteile bei zeitlich wenig tr\u00e4gen Systemen Regler schaltet st\u00e4ndig zwischen den Ausgangswerten kritisch insbesondere bei mechanische Belastung z.B. Motor wird st\u00e4ndig an und aus geschaltet","title":"Probleme Zwei-Punkt Regelung"},{"location":"3_1_Blockschaltbild/#hysterese","text":"bewirkt eine Schalttoleranz ober- und unterhalb des Sollwerts def zweipunkt_hysterese ( ist_lux , on_level , off_level , letzter_zustand ): if ist_lux > off_level : licht = False elif ist_lux < on_level : licht = True else : licht = letzter_zustand return licht class zweipunkt_hysterese (): def __init__ ( self , on_level , off_level ): self . on_level = on_level self . off_level = off_level self . letzter_zustand = False def calc_output ( self , ist_lux ): if ist_lux > self . off_level : self . letzter_zustand = False elif ist_lux < self . on_level : self . letzter_zustand = True return self . letzter_zustand Quelle Quelle","title":"Hysterese"},{"location":"3_1_Blockschaltbild/#drei-punkt-regelung","text":"vermeidet st\u00e4ndiges Umschalten sinnvoll bei Neutralstellung z.B. Motoren drei_punk_regler ( abstand ): if abstand > 6 : fahre = \"vorw\u00e4rts\" elif abstand < 4 : fahre = \"r\u00fcckw\u00e4rts\" else : fahre = \"nicht\" return fahre bewegung = drei_punk_regler ( abstand )","title":"Drei-Punkt Regelung"},{"location":"3_1_Blockschaltbild/#aufgabe-3_1_3-einfache-tageslichtschaltung","text":"Ersetzen Sie den Schalter Dynamic mit einem Hystereseschalter HYSTERESIS","title":"\u270d\ufe0f Aufgabe 3_1_3: Einfache Tageslichtschaltung"},{"location":"3_1_Blockschaltbild/#losung_2","text":"\ud83d\udca1 anzeigen Link","title":"\u2714\ufe0f L\u00f6sung"},{"location":"3_2_Regelkreis/","text":"3.2 Regelkreise Beispiel Konstantlicht-Regelung regelt die Raumbeleuchtung oder Teile davon bei Belegung automatisch so, dass eine eingestellte Mindestbeleuchtungsst\u00e4rke nicht unterschritten wird Im Gegensatz zur Tageslichtschaltung, soll es aber auch nicht unn\u00f6tig hell sein, wenn es drau\u00dfen schon hell ist Konstantlichtregelung Lichtst\u00e4rke kann (quasi) stetig gesteuert werden (z.B. \u00fcber Dimmer oder Pulsweitenmodulation) \u270d\ufe0f Aufgabe 3_2_1: Konstantlicht-Regelung Laden Sie die Datei Konstantlicht_nur_p.zcos und passen Sie den P-Parameter in PID -Baustein an und beobachten Sie die Reaktion des Systems Welche Komponenten werden durch welche Bausteine dargestellt? \u2714\ufe0f L\u00f6sung Bleibende Regelabweichung. Die 100 Lux werden nie erreicht Schwingen des Systems Sprunghaftes Verhalten (wegen Delay) Proportional-Regler Reaktion der Stellgr\u00f6\u00dfe bzw. Steuerungsgr\u00f6\u00dfe \\(u(t)=K_P \\cdot e(t)\\) multipliziert die Regelabweichung \\(e_t\\) mit dem Verst\u00e4rkungsfaktor \\(K_P\\) und gibt das Ergebnis aus je dunkler \\(y_m\\) im Verh\u00e4ltnis zur F\u00fchrungsgr\u00f6\u00dfe ( \\(w\\) ), desto heller die Beleuchtung ( \\(u\\) ) Reaktion der Stellgr\u00f6\u00dfe: \\(u(t)=K_P \\cdot e(t)\\) def p - regler ( e , k_p ): ausgang = e * k_p return ausgang \u270d\ufe0f Aufgabe 3_2_2: Regelung der CO2-Konzentration Ziel ist der Entwurf eines Reglers zur Steuerung einer Bel\u00fcftungsanlage auf Basis der Schadstoffkonzentration im Raum in ppm Zeichnen Sie den Verlauf der Stellgr\u00f6\u00dfen (Drehzahl der Anlage) f\u00fcr folgende zwei Regler: stetiger Proportionalregler: \\(u(t) = \\frac{2}{min \\cdot ppm} e(t)\\) Regelung nach Logik n\u00e4chste Seite. \u2714\ufe0f L\u00f6sung \u2714\ufe0f L\u00f6sung def regler ( e , letzte_drehzahl ): if e == 1000 : drehzahl = letzte_drehzahl else : if e > 1000 : drehzahl = e else : drehzahl = 0 return drehzahl Zusammenfassung P-Regler P-Glied, welches als Regler eingesetzt wird Zeitverhalten: reagiert unverz\u00f6gert bleibende Regelabweichung bei Systemen mit Ausgleich (Regelstrecken die bei konstantem Eingang einen konstanten Wert anstreben) \u270d\ufe0f Aufgabe 3_2_3: Wassertank mit PID-Regler Entfernen Sie den I und D-Anteil des PID-Reglers in demo_watertank.zcos und beobachten Sie die Reaktion des Systems \ud83e\udde0 Integral-Regler Antwort \\(u(t)\\) auf Sprung unmittelbar, jedoch nicht sofort mit voller St\u00e4rke Je l\u00e4nger ( \\(t\\) ) die Regelabweichung besteht und umso gr\u00f6\u00dfer sie ist, desto st\u00e4rker die Antwort \\(u(t)=\\frac{1}{T_n}\\int_0^te(\\tau)d\\tau\\) Quelle \\(u(t)=\\frac{1}{T_n}\\int_0^te(\\tau)d\\tau\\) \\(u(t)=K_I \\cdot \\int_0^te(\\tau)d\\tau\\) \\(T_n\\) ... Nachstellzeit bestimmt den Gradienten des Anstieges von \\(u\\) summiert die Regelabweichung \u00fcber die Zeit auf Regelabweichungen werden auch bei Strecken mit Ausgleich vollst\u00e4ndig eliminiert , daf\u00fcr langsamer Proportional-Integral-Regler Sprungantwort: \\(u(t)=K_Pe(t) + K_I \\cdot \\int_0^te(\\tau)d\\tau\\) PI-Regler Kombination aus P- und I-Regler schnelle Reaktion (wie P-Regler) exakte Ausregelung ohne eine bleibende Regelabweichung (wie I-Regler) \ud83e\udde0 Proportional-Differenzial-Regler Sprungantwort: \\(u(t)=K_Pe(t)+K_d \\frac{de(t)}{dt}=K_Pe(t)+T_v \\frac{de(t)}{dt}\\) kombiniert P-Regler mit Differenzial-Anteil der D-Anteil bewertet die \u00c4nderung einer Regelabweichung (differenziert) und berechnet so deren \u00c4nderungsgeschwindigkeit reagiert schon auf \"Ank\u00fcndigungen\" von Ver\u00e4nderungen sehr schnell , doch bleibende Regelabweichung Unruhe im Regelkreis wird verst\u00e4rkt, wenn Sensorsignal verrauscht \u270d\ufe0f Aufgabe 3_2_4: Reaktion D-Regler \u270d\ufe0f Wie sieht die Reaktion aus?","title":"Regelkreis"},{"location":"3_2_Regelkreis/#32-regelkreise","text":"","title":"3.2 Regelkreise"},{"location":"3_2_Regelkreis/#beispiel-konstantlicht-regelung","text":"regelt die Raumbeleuchtung oder Teile davon bei Belegung automatisch so, dass eine eingestellte Mindestbeleuchtungsst\u00e4rke nicht unterschritten wird Im Gegensatz zur Tageslichtschaltung, soll es aber auch nicht unn\u00f6tig hell sein, wenn es drau\u00dfen schon hell ist","title":"Beispiel Konstantlicht-Regelung"},{"location":"3_2_Regelkreis/#konstantlichtregelung","text":"Lichtst\u00e4rke kann (quasi) stetig gesteuert werden (z.B. \u00fcber Dimmer oder Pulsweitenmodulation)","title":"Konstantlichtregelung"},{"location":"3_2_Regelkreis/#aufgabe-3_2_1-konstantlicht-regelung","text":"Laden Sie die Datei Konstantlicht_nur_p.zcos und passen Sie den P-Parameter in PID -Baustein an und beobachten Sie die Reaktion des Systems Welche Komponenten werden durch welche Bausteine dargestellt?","title":"\u270d\ufe0f Aufgabe 3_2_1: Konstantlicht-Regelung"},{"location":"3_2_Regelkreis/#losung","text":"Bleibende Regelabweichung. Die 100 Lux werden nie erreicht Schwingen des Systems Sprunghaftes Verhalten (wegen Delay)","title":"\u2714\ufe0f L\u00f6sung"},{"location":"3_2_Regelkreis/#proportional-regler","text":"Reaktion der Stellgr\u00f6\u00dfe bzw. Steuerungsgr\u00f6\u00dfe \\(u(t)=K_P \\cdot e(t)\\) multipliziert die Regelabweichung \\(e_t\\) mit dem Verst\u00e4rkungsfaktor \\(K_P\\) und gibt das Ergebnis aus je dunkler \\(y_m\\) im Verh\u00e4ltnis zur F\u00fchrungsgr\u00f6\u00dfe ( \\(w\\) ), desto heller die Beleuchtung ( \\(u\\) ) Reaktion der Stellgr\u00f6\u00dfe: \\(u(t)=K_P \\cdot e(t)\\) def p - regler ( e , k_p ): ausgang = e * k_p return ausgang","title":"Proportional-Regler"},{"location":"3_2_Regelkreis/#aufgabe-3_2_2-regelung-der-co2-konzentration","text":"Ziel ist der Entwurf eines Reglers zur Steuerung einer Bel\u00fcftungsanlage auf Basis der Schadstoffkonzentration im Raum in ppm Zeichnen Sie den Verlauf der Stellgr\u00f6\u00dfen (Drehzahl der Anlage) f\u00fcr folgende zwei Regler: stetiger Proportionalregler: \\(u(t) = \\frac{2}{min \\cdot ppm} e(t)\\) Regelung nach Logik n\u00e4chste Seite.","title":"\u270d\ufe0f Aufgabe 3_2_2: Regelung der CO2-Konzentration"},{"location":"3_2_Regelkreis/#losung_1","text":"","title":"\u2714\ufe0f L\u00f6sung"},{"location":"3_2_Regelkreis/#losung_2","text":"def regler ( e , letzte_drehzahl ): if e == 1000 : drehzahl = letzte_drehzahl else : if e > 1000 : drehzahl = e else : drehzahl = 0 return drehzahl","title":"\u2714\ufe0f L\u00f6sung"},{"location":"3_2_Regelkreis/#zusammenfassung-p-regler","text":"P-Glied, welches als Regler eingesetzt wird Zeitverhalten: reagiert unverz\u00f6gert bleibende Regelabweichung bei Systemen mit Ausgleich (Regelstrecken die bei konstantem Eingang einen konstanten Wert anstreben)","title":"Zusammenfassung P-Regler"},{"location":"3_2_Regelkreis/#aufgabe-3_2_3-wassertank-mit-pid-regler","text":"Entfernen Sie den I und D-Anteil des PID-Reglers in demo_watertank.zcos und beobachten Sie die Reaktion des Systems","title":"\u270d\ufe0f Aufgabe 3_2_3: Wassertank mit PID-Regler"},{"location":"3_2_Regelkreis/#integral-regler","text":"Antwort \\(u(t)\\) auf Sprung unmittelbar, jedoch nicht sofort mit voller St\u00e4rke Je l\u00e4nger ( \\(t\\) ) die Regelabweichung besteht und umso gr\u00f6\u00dfer sie ist, desto st\u00e4rker die Antwort \\(u(t)=\\frac{1}{T_n}\\int_0^te(\\tau)d\\tau\\) Quelle \\(u(t)=\\frac{1}{T_n}\\int_0^te(\\tau)d\\tau\\) \\(u(t)=K_I \\cdot \\int_0^te(\\tau)d\\tau\\) \\(T_n\\) ... Nachstellzeit bestimmt den Gradienten des Anstieges von \\(u\\) summiert die Regelabweichung \u00fcber die Zeit auf Regelabweichungen werden auch bei Strecken mit Ausgleich vollst\u00e4ndig eliminiert , daf\u00fcr langsamer","title":"\ud83e\udde0 Integral-Regler"},{"location":"3_2_Regelkreis/#proportional-integral-regler","text":"Sprungantwort: \\(u(t)=K_Pe(t) + K_I \\cdot \\int_0^te(\\tau)d\\tau\\) PI-Regler Kombination aus P- und I-Regler schnelle Reaktion (wie P-Regler) exakte Ausregelung ohne eine bleibende Regelabweichung (wie I-Regler)","title":"Proportional-Integral-Regler"},{"location":"3_2_Regelkreis/#proportional-differenzial-regler","text":"Sprungantwort: \\(u(t)=K_Pe(t)+K_d \\frac{de(t)}{dt}=K_Pe(t)+T_v \\frac{de(t)}{dt}\\) kombiniert P-Regler mit Differenzial-Anteil der D-Anteil bewertet die \u00c4nderung einer Regelabweichung (differenziert) und berechnet so deren \u00c4nderungsgeschwindigkeit reagiert schon auf \"Ank\u00fcndigungen\" von Ver\u00e4nderungen sehr schnell , doch bleibende Regelabweichung Unruhe im Regelkreis wird verst\u00e4rkt, wenn Sensorsignal verrauscht","title":"\ud83e\udde0 Proportional-Differenzial-Regler"},{"location":"3_2_Regelkreis/#aufgabe-3_2_4-reaktion-d-regler","text":"\u270d\ufe0f Wie sieht die Reaktion aus?","title":"\u270d\ufe0f Aufgabe 3_2_4: Reaktion D-Regler"},{"location":"3_3_Regelverhalten/","text":"3.2 Regelverhalten \ud83e\udde0 PID-Regler universellste der klassischen Regler Der PID-geregelte Kreis ist genau und sehr schnell, deshalb wird er bevorzugt in den meisten Anwendungen eingesetzt \\(u(t)=K_P \\cdot e(t) + \\frac{1}{T_N}\\int_0^te(\\tau)d\\tau + T_v \\frac{de(t)}{dt}\\) Systeme ohne zeitliche Verz\u00f6gerung alle Systeme reagieren unmittelbar auf Ver\u00e4nderungen der Eing\u00e4nge z.B. wird die Lichtst\u00e4rke der Lampe ( \\(u_r\\) ) erh\u00f6ht, erh\u00f6ht sich die Helligkeit im Raum ( \\(y\\) ) Systeme mit zeitlicher Verz\u00f6gerung z.B. mit Erh\u00f6hung des Durchfluss durch die Heizung ( \\(u_r\\) ) erw\u00e4rmt sich der Raum nur langsam ( \\(y\\) ). Das Thermometer gibt die gemessene Temperatur ( \\(y_m\\) ) nur mit Verz\u00f6gerung weiter Bestimmung des dynamischen Verhaltens Ziel der Regelungstechnik ist es ein erw\u00fcnschtes Verhalten der Regelgr\u00f6\u00dfe \\(y\\) zu erhalten Mathematische Beschreibung und Analyse Simulationsprogramme: z.B. Matlab Simulink oder Scilab Xcos Quelle Fazit Zeitverhalten von Regelkreisen wird durch alle Komponenten (Zeitverhalten) und die Einstellung des Reglers (gew\u00e4hlte Parameter) beeinflusst komplexere Regelkreise m\u00fcssen als Gesamtheit betrachtet werden Beobachtung am echten System Modellierung durch Vereinfachung (Regelungstechnik) Kalibrierung am realen System Regelverlauf der verschiedenen Reglertypen im Zeitverlauf Reaktion auf Sprungfunktion im einfachen Regelkreis Deutlich wird die bleibende Regelabweichung des P-Reglers Das schnelle Verhalten der Regler mit D-Anteil Quelle Kriterien zur Beurteilung eines Regelkreises F\u00fchrungsverhalten bei Anregung mit Sprungfunktion: Ausregelzeit \\(t_\\epsilon\\) : gibt den Zeitpunkt an, ab dem die Regelabweichung kleiner als eine vorgegebene Schranke \\(\u00b1\\epsilon\\) ist. Maximale \u00dcberschwingweite \\(e_{max}\\) : gibt den Betrag der maximalen Regelabweichung an, die nach dem erstmaligen Erreichen des Sollwertes auftritt Quelle Regelfl\u00e4che Regelfl\u00e4che : Die Fl\u00e4che zwischen F\u00fchrungsgr\u00f6\u00dfe und Ist-Wert kann als Ma\u00df definiert werden. Besonders sinnvoll ist die Beurteilung mittels der Regelfl\u00e4che allerdings nur, wenn kein \u00dcberschwingen auftritt Alternativ z.B. Absolutwert des Integrals der Regelfl\u00e4che Quelle Praktische \u00dcberlegungen Um eine gew\u00fcnschtes Regelverhalten zu erreichen, muss ein geeigneter Regler mit den passenden Faktoren (z.B. Verst\u00e4rkungsfaktor \\(K_P\\) ) ausgew\u00e4hlt oder kalibriert werden. Hier l\u00e4sst sich entweder ein Modell der Regelstrecke bilden. In der Praxis werden Regelkreise h\u00e4ufig durch Ausprobieren von Reglere instellungen eines PID-Regler kalibriert. \ud83e\udd13 Praktische \u00dcberlegungen PID-Regler Quelle \u270d\ufe0f Aufgabe 3_3_1: Auswahl Reglerverhalten Welchen Reglerverlauf w\u00fcnschen Sie sich f\u00fcr folgende Anwendungen - Startoptimierung der Raumtemperatur (unter Energieffizienzgesichtspunkten) - Konstantlichtregelung (Beleuchtung aus Komfortgesichtspunkten) - Bewegungssteuerung eines Laufroboters Quelle L\u00f6sung Welchen Reglerverlauf w\u00fcnschen Sie sich f\u00fcr folgende Anwendungen - Startoptimierung der Raumtemperatur (unter Energieffizinzgesichtspunkten) * Langsam kein \u00dcberschwingen - Konstantlichtregelung (Beleuchtung aus Komfortgesichtspunkten) * Langsam kein \u00dcberschwingen - Bewegungssteuerung eines Laufroboters * Schnell, minimales \u00dcberschwingen Quelle Beispiele Hardware PID-Regler Quelle Software Baustein PID-Regler Eing\u00e4nge rW : Sollwert rX : Istwert Eingangsparameter rKp : Proportionalfaktor Verst\u00e4rkung tTi : Integrierzeit [s] tTv : Vorhaltezeit [s] Ausg\u00e4nge rY : Stellgr\u00f6\u00dfe rXW : Regelabweichung Quelle Methode von Ziegler und Nichols heuristisches Verfahren zur Bestimmung von Reglerparametern nur f\u00fcr existierenden stabile Anlagen geeignet oder bei denen instabiles Verhalten keine Sch\u00e4den verursachen kann Eigenschaft Regelstrecke und P-Regler dynamischen Eigenschaften h\u00e4ngen stark vom Verst\u00e4rkungsfaktor ( \\(K_P\\) ) des Gesamtsystems ab. Ab bestimmtem \\(K_P^{krit}\\) beginnt die Regelgr\u00f6\u00dfe zu schwingen (Stabilit\u00e4tsgrenze) Quelle Umformung mit Vorhalt- und Nachstellzeit f\u00fcr PID-Regler: Neben der Darstellung mit Vorhalte- und Nachhaltezeit findet sich auch h\u00e4ufig eine Darstellung mit Faktoren ( \\(K\\) ): \\(u(t)=K_P \\cdot e(t) + \\frac{1}{T_N}\\int_0^te(\\tau)d\\tau + T_v \\frac{de(t)}{dt}\\) \\(u(t)=K_P e(t) + K_I\\int_0^te(\\tau)d\\tau + K_d \\frac{de(t)}{dt}\\) \\(u(t)=K_P \\cdot [e(t) + \\frac{K_I}{K_P}\\int_0^te(\\tau)d\\tau + \\frac{K_D}{K_P} \\frac{de(t)}{dt}]\\) Vorgehen Methode von Ziegler und Nichols (I) Voreinstellung des Reglers als reiner P-Regler: \\(K_I=0\\) , \\(K_D=0\\) bzw. \\(T_v=0\\) , \\(T_n=\u221e\\) \\(u(t)=K_P e(t) + K_I\\int_0^te(\\tau)d\\tau + K_D \\frac{de(t)}{dt}\\) \\(u(t)=K_P \\cdot [e(t) + \\frac{1}{T_N}\\int_0^te(\\tau)d\\tau + T_v \\frac{de(t)}{dt}]\\) Methode von Ziegler und Nichols (II) * Erh\u00f6hung von \\(K_P\\) (beginnend mit kleinen Werten von \\(K_P\\) ) bis zur Stabilit\u00e4tsgrenze (die Regelgr\u00f6\u00dfe \\(x\\) beginnt gleichma\u00dfig mit konstanter Amplitude zu schwingen) * Ablesen von \\(K_P^{krit}\\) Messung der beobachtbaren Periodendauer \\(T^{krit}\\) * Berechnung der Reglerparameter ( \\(K_P\\) , \\(T_n\\) , \\(T_v\\) ) entsprechend den folgenden Regeln: Quelle ) Einstellregeln nach Ziegler und Nichols (III) \\(K_P\\) \\(T_n\\) \\(T_v\\) P-Regler \\(K_P = K_P^{krit} \\cdot 0,5\\) PI-Regler \\(K_P\\) = \\(K_P^{krit} \\cdot 0,45\\) \\(T_n=0,85 \\cdot T^{krit}\\) PID-Regler \\(K_P\\) = \\(K_P^{krit} \\cdot 0,6\\) \\(T_n=0,5 \\cdot T^{krit}\\) \\(T_v=0,12 \\cdot T^{krit}\\) \u270d\ufe0f Aufgabe 3_3_2: Kalibrieren Sie den Regler f\u00fcr die folgenden Anwendungen nach der Methode von Ziegler und Nichols: Colab \ud83e\udd13 \u270d\ufe0f Aufgabe 3_3_2: Kalibrieren Sie das folgende System nach der Methode von Ziegler und Nichols \u2714\ufe0f L\u00f6sung \ud83d\udca1 anzeigen Link","title":"Regelverhalten"},{"location":"3_3_Regelverhalten/#32-regelverhalten","text":"","title":"3.2 Regelverhalten"},{"location":"3_3_Regelverhalten/#pid-regler","text":"universellste der klassischen Regler Der PID-geregelte Kreis ist genau und sehr schnell, deshalb wird er bevorzugt in den meisten Anwendungen eingesetzt \\(u(t)=K_P \\cdot e(t) + \\frac{1}{T_N}\\int_0^te(\\tau)d\\tau + T_v \\frac{de(t)}{dt}\\)","title":"\ud83e\udde0 PID-Regler"},{"location":"3_3_Regelverhalten/#systeme-ohne-zeitliche-verzogerung","text":"alle Systeme reagieren unmittelbar auf Ver\u00e4nderungen der Eing\u00e4nge z.B. wird die Lichtst\u00e4rke der Lampe ( \\(u_r\\) ) erh\u00f6ht, erh\u00f6ht sich die Helligkeit im Raum ( \\(y\\) )","title":"Systeme ohne zeitliche Verz\u00f6gerung"},{"location":"3_3_Regelverhalten/#systeme-mit-zeitlicher-verzogerung","text":"z.B. mit Erh\u00f6hung des Durchfluss durch die Heizung ( \\(u_r\\) ) erw\u00e4rmt sich der Raum nur langsam ( \\(y\\) ). Das Thermometer gibt die gemessene Temperatur ( \\(y_m\\) ) nur mit Verz\u00f6gerung weiter","title":"Systeme mit zeitlicher Verz\u00f6gerung"},{"location":"3_3_Regelverhalten/#bestimmung-des-dynamischen-verhaltens","text":"Ziel der Regelungstechnik ist es ein erw\u00fcnschtes Verhalten der Regelgr\u00f6\u00dfe \\(y\\) zu erhalten Mathematische Beschreibung und Analyse Simulationsprogramme: z.B. Matlab Simulink oder Scilab Xcos Quelle","title":"Bestimmung des dynamischen Verhaltens"},{"location":"3_3_Regelverhalten/#fazit","text":"Zeitverhalten von Regelkreisen wird durch alle Komponenten (Zeitverhalten) und die Einstellung des Reglers (gew\u00e4hlte Parameter) beeinflusst komplexere Regelkreise m\u00fcssen als Gesamtheit betrachtet werden Beobachtung am echten System Modellierung durch Vereinfachung (Regelungstechnik) Kalibrierung am realen System","title":"Fazit"},{"location":"3_3_Regelverhalten/#regelverlauf-der-verschiedenen-reglertypen-im-zeitverlauf","text":"Reaktion auf Sprungfunktion im einfachen Regelkreis Deutlich wird die bleibende Regelabweichung des P-Reglers Das schnelle Verhalten der Regler mit D-Anteil Quelle","title":"Regelverlauf der verschiedenen Reglertypen im Zeitverlauf"},{"location":"3_3_Regelverhalten/#kriterien-zur-beurteilung-eines-regelkreises","text":"F\u00fchrungsverhalten bei Anregung mit Sprungfunktion: Ausregelzeit \\(t_\\epsilon\\) : gibt den Zeitpunkt an, ab dem die Regelabweichung kleiner als eine vorgegebene Schranke \\(\u00b1\\epsilon\\) ist. Maximale \u00dcberschwingweite \\(e_{max}\\) : gibt den Betrag der maximalen Regelabweichung an, die nach dem erstmaligen Erreichen des Sollwertes auftritt Quelle","title":"Kriterien zur Beurteilung eines Regelkreises"},{"location":"3_3_Regelverhalten/#regelflache","text":"Regelfl\u00e4che : Die Fl\u00e4che zwischen F\u00fchrungsgr\u00f6\u00dfe und Ist-Wert kann als Ma\u00df definiert werden. Besonders sinnvoll ist die Beurteilung mittels der Regelfl\u00e4che allerdings nur, wenn kein \u00dcberschwingen auftritt Alternativ z.B. Absolutwert des Integrals der Regelfl\u00e4che Quelle","title":"Regelfl\u00e4che"},{"location":"3_3_Regelverhalten/#praktische-uberlegungen","text":"Um eine gew\u00fcnschtes Regelverhalten zu erreichen, muss ein geeigneter Regler mit den passenden Faktoren (z.B. Verst\u00e4rkungsfaktor \\(K_P\\) ) ausgew\u00e4hlt oder kalibriert werden. Hier l\u00e4sst sich entweder ein Modell der Regelstrecke bilden. In der Praxis werden Regelkreise h\u00e4ufig durch Ausprobieren von Reglere instellungen eines PID-Regler kalibriert.","title":"Praktische \u00dcberlegungen"},{"location":"3_3_Regelverhalten/#praktische-uberlegungen-pid-regler","text":"Quelle","title":"\ud83e\udd13 Praktische \u00dcberlegungen PID-Regler"},{"location":"3_3_Regelverhalten/#aufgabe-3_3_1-auswahl-reglerverhalten","text":"Welchen Reglerverlauf w\u00fcnschen Sie sich f\u00fcr folgende Anwendungen - Startoptimierung der Raumtemperatur (unter Energieffizienzgesichtspunkten) - Konstantlichtregelung (Beleuchtung aus Komfortgesichtspunkten) - Bewegungssteuerung eines Laufroboters Quelle","title":"\u270d\ufe0f Aufgabe 3_3_1: Auswahl Reglerverhalten"},{"location":"3_3_Regelverhalten/#losung","text":"Welchen Reglerverlauf w\u00fcnschen Sie sich f\u00fcr folgende Anwendungen - Startoptimierung der Raumtemperatur (unter Energieffizinzgesichtspunkten) * Langsam kein \u00dcberschwingen - Konstantlichtregelung (Beleuchtung aus Komfortgesichtspunkten) * Langsam kein \u00dcberschwingen - Bewegungssteuerung eines Laufroboters * Schnell, minimales \u00dcberschwingen Quelle","title":"L\u00f6sung"},{"location":"3_3_Regelverhalten/#beispiele","text":"","title":"Beispiele"},{"location":"3_3_Regelverhalten/#hardware-pid-regler","text":"Quelle","title":"Hardware PID-Regler"},{"location":"3_3_Regelverhalten/#software-baustein-pid-regler","text":"Eing\u00e4nge rW : Sollwert rX : Istwert Eingangsparameter rKp : Proportionalfaktor Verst\u00e4rkung tTi : Integrierzeit [s] tTv : Vorhaltezeit [s] Ausg\u00e4nge rY : Stellgr\u00f6\u00dfe rXW : Regelabweichung Quelle","title":"Software Baustein PID-Regler"},{"location":"3_3_Regelverhalten/#methode-von-ziegler-und-nichols","text":"heuristisches Verfahren zur Bestimmung von Reglerparametern nur f\u00fcr existierenden stabile Anlagen geeignet oder bei denen instabiles Verhalten keine Sch\u00e4den verursachen kann Eigenschaft Regelstrecke und P-Regler dynamischen Eigenschaften h\u00e4ngen stark vom Verst\u00e4rkungsfaktor ( \\(K_P\\) ) des Gesamtsystems ab. Ab bestimmtem \\(K_P^{krit}\\) beginnt die Regelgr\u00f6\u00dfe zu schwingen (Stabilit\u00e4tsgrenze) Quelle","title":"Methode von Ziegler und Nichols"},{"location":"3_3_Regelverhalten/#umformung-mit-vorhalt-und-nachstellzeit-fur-pid-regler","text":"Neben der Darstellung mit Vorhalte- und Nachhaltezeit findet sich auch h\u00e4ufig eine Darstellung mit Faktoren ( \\(K\\) ): \\(u(t)=K_P \\cdot e(t) + \\frac{1}{T_N}\\int_0^te(\\tau)d\\tau + T_v \\frac{de(t)}{dt}\\) \\(u(t)=K_P e(t) + K_I\\int_0^te(\\tau)d\\tau + K_d \\frac{de(t)}{dt}\\) \\(u(t)=K_P \\cdot [e(t) + \\frac{K_I}{K_P}\\int_0^te(\\tau)d\\tau + \\frac{K_D}{K_P} \\frac{de(t)}{dt}]\\)","title":"Umformung mit Vorhalt- und Nachstellzeit f\u00fcr PID-Regler:"},{"location":"3_3_Regelverhalten/#vorgehen-methode-von-ziegler-und-nichols-i","text":"Voreinstellung des Reglers als reiner P-Regler: \\(K_I=0\\) , \\(K_D=0\\) bzw. \\(T_v=0\\) , \\(T_n=\u221e\\) \\(u(t)=K_P e(t) + K_I\\int_0^te(\\tau)d\\tau + K_D \\frac{de(t)}{dt}\\) \\(u(t)=K_P \\cdot [e(t) + \\frac{1}{T_N}\\int_0^te(\\tau)d\\tau + T_v \\frac{de(t)}{dt}]\\)","title":"Vorgehen Methode von Ziegler und Nichols (I)"},{"location":"3_3_Regelverhalten/#methode-von-ziegler-und-nichols-ii","text":"* Erh\u00f6hung von \\(K_P\\) (beginnend mit kleinen Werten von \\(K_P\\) ) bis zur Stabilit\u00e4tsgrenze (die Regelgr\u00f6\u00dfe \\(x\\) beginnt gleichma\u00dfig mit konstanter Amplitude zu schwingen) * Ablesen von \\(K_P^{krit}\\) Messung der beobachtbaren Periodendauer \\(T^{krit}\\) * Berechnung der Reglerparameter ( \\(K_P\\) , \\(T_n\\) , \\(T_v\\) ) entsprechend den folgenden Regeln: Quelle )","title":"Methode von Ziegler und Nichols (II)"},{"location":"3_3_Regelverhalten/#einstellregeln-nach-ziegler-und-nichols-iii","text":"\\(K_P\\) \\(T_n\\) \\(T_v\\) P-Regler \\(K_P = K_P^{krit} \\cdot 0,5\\) PI-Regler \\(K_P\\) = \\(K_P^{krit} \\cdot 0,45\\) \\(T_n=0,85 \\cdot T^{krit}\\) PID-Regler \\(K_P\\) = \\(K_P^{krit} \\cdot 0,6\\) \\(T_n=0,5 \\cdot T^{krit}\\) \\(T_v=0,12 \\cdot T^{krit}\\)","title":"Einstellregeln nach Ziegler und Nichols (III)"},{"location":"3_3_Regelverhalten/#aufgabe-3_3_2","text":"Kalibrieren Sie den Regler f\u00fcr die folgenden Anwendungen nach der Methode von Ziegler und Nichols: Colab","title":"\u270d\ufe0f Aufgabe 3_3_2:"},{"location":"3_3_Regelverhalten/#aufgabe-3_3_3","text":"Kalibrieren Sie das folgende System nach der Methode von Ziegler und Nichols","title":"\ud83e\udd13 \u270d\ufe0f Aufgabe 3_3_2:"},{"location":"3_3_Regelverhalten/#losung_1","text":"\ud83d\udca1 anzeigen Link","title":"\u2714\ufe0f L\u00f6sung"},{"location":"4_1_Speicherprogrammierbare_Steuerung/","text":"4.1 Speicherprogrammierbare Steuerung (SPS) Schalter vs. Taster Ein Schalter beh\u00e4lt seine Stellung nach dem Bet\u00e4tigen bei. Ein Taster springt in die Ausgangslage Wahrheitstabelle Annahme: Schalter mit zwei Zust\u00e4nden S1 S2 H1 0 0 1 0 1 0 1 0 0 1 1 1 \\(H1 = \\lnot (S1 \\oplus S2)\\) Zustandsdiagramm einer Wechselschaltung stateDiagram-v2 s1: Licht aus - Schalter 1 = off, Schalter = 2 off s2: Licht an - Schalter 1 = on, Schalter 2 = off s3: Licht an - Schalter 1 = off, Schalter 2 = on s4: Licht aus - Schalter 1 = on, Schalter 2 = on s1--> s2: Schalter 1 = on s2--> s1: Schalter 1 = off s1--> s3: Schalter 2 = on s3--> s1: Schalter 2 = off s4--> s3: Schalter 1 = off s3--> s4: Schalter 1 = on s2 --> s4: Schalter 2 = on s4 --> s2: Schalter 2 = off Quelle L\u00f6sung \"Industrie 2.0\" S1, S2: Schalter mit zwei Zust\u00e4nden H1: Gl\u00fchlampe Wechselschaltung im Geb\u00e4ude Quelle Direkte verbindungsprogrammierte Steuerung Steuerung auf Basis des Stomkreises (z.B. Wechselschaltung bei Lichtschalter) \u00dcberall liegt die hohe (ggf. gef\u00e4hrliche ) Spannung an Verdrahtungsaufwand (z.B. Kreuzschaltung f\u00fcr mehr als 2 Schalter) die Fehlersuche sehr m\u00fchselig Bestimmte sicherheitsrelevante Funktionen (z. B. Not-Aus) L\u00f6sung \"Industrie 2.1\" Entkopplung von Steuerstrom und Laststromkreis durch Relais oder Sch\u00fctz Steuerstromkreis hat i.d.R. niedrigere Spannung Verbindungsprogrammierte Steuerung mit logischen Komponenten In diesem Fall wird ein Stromsto\u00dfschalter verbaut: Bei jeder Bet\u00e4tigung eines der Taster (S) wird der Zustand von K1 gewechselt Zwei oder mehrere Schalter S k\u00f6nnen parallel geschaltet werden Verringertet Verdrahtungsaufwand, erh\u00f6hte Wartbarkeit A1 - A2 : Schlie\u00dfen des Steuerkreises l\u00f6st eine Sprungfunktion in der Spannung und Strom aus (Flanke) 1 - 2 wird geschlossen Quelle A1 - A2 : Schlie\u00dfen des Steuerkreises l\u00f6st eine Sprungfunktion in der Spannung und Strom aus (Flanke) *- 1 - 2 wird geschlossen Quelle Stromsto\u00dfschalter Quelle L\u00f6sung Industrie 3.0 Logikbausteine werden durch Computer mit Ein- ( bIn1 ) und Ausg\u00e4ngen ( bOut1 ) ersetzt Computer erfasst, ob an Eing\u00e4ngen eine Spannung anliegt Computer setzt Spannung auf Ausg\u00e4nge def taster ( s1 , s2 , status_lampe ): if ( s1 or s1 ): return not ( status_lampe ) else : return status_lampe bOut1 = stromstossschalter ( s1 , s2 , status_lampe ) Aufbau SPS - Loxone Mini Server Quelle Aufbau SPS - Siemens Logo Aufbau SPS - am Beispiel Beckhoff Aufbau einer SPS Quelle Anbringung meist an Hutschiene ( modular ) Rechen- und Speichereinheit oft Anbindung an Bus-System Ein oder mehrere Signalmodule Empfang Sensordaten ( Eing\u00e4nge ) Versand Steuerbefehle ( Ausg\u00e4nge ) Aufbau SPS Eingang / Ausgang: Schaltende Verbindungen zwischen 0 und 24V Stromversorgung Powerkontakt 24V (L+): SPS arbeitet wegen Bauraum und Sicherheit mit 24V Gleichstrom Powerkontakt 0V (L-): Masse als 0 Potential f\u00fcr die Schaltung definiert Powerkontakt PE: Schutzleiter mit Potential-Erde, 0V sollte auf PE gelegt werden Ausg\u00e4nge + und - zur weiterverteilung Industrie 3.0 Zentrale SPS -Speicherprogrammierbare Steuerung die Steuerungsfunktionen sind als Programme in einem Speicher enthalten Flexibilit\u00e4t : Einfacher Austausch von Programmen Mehrere Funktionen auf einem Ger\u00e4t Geringer Platzbedarf , H\u00f6here Zuverl\u00e4ssigkeit, Geringere Kosten Vernetzung mit anderen Systemen, Fernwartung Fehlerdiagnose Quelle Abgrenzung von SPS und Bussystemen \u26a0\ufe0f Die folgende Darstellung vereinfacht und stilisiert in der Praxis sind Mischformen \u00fcblich SPS als zentrales System SPS als Single Point of Failure h\u00e4ufig sternf\u00f6rmige Verkabelung Ein- und Ausg\u00e4nge der SPS sind digital (nur zwei Zust\u00e4nde) oder analog Quelle Dezentrales System Viele Mikrocontroller \u00fcbernehmen die Steuerungsaufgaben kein Single Point of Failure andere Topologien als Sternform m\u00f6glich \u00dcbermittlung von Seriellen Telegrammen auf der Busleitung Quelle Steuerung mit Bus-System Zentrale SPS wird durch mehrere dezentrale Contoller ersetzt Diese kommunizieren \u00fcber Telegramme in einem standardtisierten Protokoll miteinander Anstelle von bin\u00e4ren Schaltinformationen werden Bitfolgen \u00fcbertragen Mischformen sind m\u00f6glich! Speicherprogrammierbare Steuerung (SPS) Messkette: Elektronische Sicht der Steuerung Sensoren wandeln den Zustand eines Prozesses in ein elektrisches Signal um Die Steuerung und Regelung erfolgt elektronisch oder digital oder in einem rechnergest\u00fctzten Ger\u00e4t ( Steuerungseinheit ) Aktoren werden zur Beeinflussung von Systemen eingesetzt Quelle Steuerungseinheit: Aufbau einer SPS Quelle Anbringung meist an Hutschiene ( modular ) Rechen- und Speichereinheit oft Anbindung an Bus-System Ein oder mehrere Signalmodule Empfang Sensordaten ( Eing\u00e4nge ) Versand Steuerbefehle ( Ausg\u00e4nge ) Aufbau SPS Digitale Ein- und Ausg\u00e4nge kennt nur zwei Zust\u00e4nde ( True / False ) Abgebildet \u00fcber Spannungslevel oder Stromst\u00e4rke Quelle Adressierung Quelle Digitale Ein- und Ausg\u00e4nge schalten und erfassen Spannungen bis 24V (i.d.R.) Jeder digitale Ein- und Ausgang wird durch ein Bit repr\u00e4sentiert ( True : 24V, False : 0V) Eing\u00e4nge werden mit E bzw. I (Input) bezeichnet ( E0.1 ) Ausg\u00e4nge mit A bzw. O/Q (Output) A0.2 Symbolische Adressierung Zur besseren Verst\u00e4ndlichkeit sollten bei der Programmierung sinnvolle Variablennamen eingef\u00fchrt werden, da diese leichter zu interpretieren sind als z.B. Q0.1 . z.B. f\u00fcr ein Automatiklicht bInAnwesenheit F\u00fcr Wert des digitalen Sensors f\u00fcr Anwesenheit an E0.0 bInDunkelheit F\u00fcr Wert des digitalen Sensors f\u00fcr Dunkelheit an E0.1 bOutLicht F\u00fcr digitalen Schalter f\u00fcr Licht an A0.1 Das b steht f\u00fcr einen bin\u00e4ren (digitalen) Ein- oder Ausgang Das In / Out f\u00fcr Ein- oder Ausg\u00e4nge Digitale Ein- und Ausg\u00e4nge Quelle Digitaler Eingang Kennt nur Signal oder kein Signal ( Boolean ) z.B. Taster z.B. Fensterkontakt EVA-Prinzip Quelle Zyklische Verarbeitung Das EVA-Prinzip wird in regelm\u00e4\u00dfigen Zyklen durchlaufen Einlesen der Eing\u00e4nge Durchf\u00fchren der Verarbeitung Ausgabe der Ausg\u00e4nge Typische Zykluszeiten liegen zwischen einer und zehn Millisekunden Verarbeitungseinheit - CPU Quelle Analoge Ein- und Ausg\u00e4nge Quelle Analog-Digital Wandler Vorsicht : Auch analoge Signale werden beim Eingang in die Verarbeitungseinheit digitalisiert Die Aufl\u00f6sung analoger Ein- und Ausg\u00e4nge wird in Bit angegeben Analoger Eingang bei vielen Anwendungsf\u00e4llen sind stetige Werte von Interesse: z.B. Temperatur, Helligkeit, etc. Passive Analoge Signale Nutzen Temperaturabh\u00e4ngigkeit eines Widerstands und Ohmsches Gesetz: \\(U=RI\\) Bei gleicher angelegter Spannung, wird temperaturabh\u00e4ngig ein anderer Strom gemessen Quelle z.B. PT-Widerst\u00e4nde Platin hat ein relativ lineares Verhalten \\(U = 24 V\\) \\(I_m=0.16 A\\) \\(R=\\frac{U}{I_m}=150 \\Omega\\) \\(T \\approx 100\u00b0C\\) Sollten wir den PT-Widerstand direkt mit \\(24 V\\) beaufschlagen? Quelle Einsatzgebiete von Verst\u00e4rkern Quelle Linearisierung des Signals Anpassung des Signals auf definierten Ausgangsbereich (z.B. 0 .. 20mA, 0 .. 10V) Extra Kosten Sensorspezifisch Aktive Sensoren Integriert Sensor und Verst\u00e4rker Sensor wird mit Spannung versorgt (i.d.R. 24V/DC) Sensor \u00fcbersetzt physikalische Gr\u00f6\u00dfe in ein Ausgangssignal \\(E\\) Skalierung h\u00e4ufig linear oder sogar proportional \\(U(E_v)=E_0 + K_p \\cdot E_v\\) \\(U(E_v)=\\frac{10 V}{100.000 Lux} \\cdot E_v\\) Anschluss aktiver Sensoren Spannungsversorgung \u00fcber GND und 24 V Ausgang LUX wird mit analogem Eingang der SPS verbunden Auswahl Analoger Eing\u00e4nge Spannungssignal: z.B. \\(0...10\\) bzw. \\(-10...10\\) V g\u00fcnstig leicht zu messen (z.B. mit Multimeter) Stromschnittstelle: z.B. 4...20 mA auch bei langen Leitungen unanf\u00e4lliger gegen St\u00f6rungen Erkennen von Drahtbruch (0 A) PT-Eing\u00e4nge: Spezielle Eing\u00e4nge zum Anschluss von PT-Widerst\u00e4nden Quelle \ud83e\udd13 Anzahl der Leiter Es gibt Sensoren mit 2, 3, 4 Leitern Zunehmende Messgenauigkeit (Einfluss des Leiterwiderstands kann herausgerechnet werden) Signalformen live zero l\u00e4sst Kabelbruch erkennen Quelle \ud83e\udd13 Single-Ended vs. Differential Single-Ended: alle Sensoren liegen auf dem gleichen V- Potential (nur ein Kabel zur\u00fcck) Differential: jeder Sensor hat sein eigenes V- Potential (weniger St\u00f6ranf\u00e4llig) Quelle Analog-Digital-Wandlung Analog-Digital-Wandlung Signalform: Spannung bipolar SPS kann nur diskrete Werte darstellen Wie hoch ist die Zykluszeit der SPS? Wie viel Bit stehen zur Speicherung eines Wertes zu Verf\u00fcgung? Quelle Abtastung (Sample rate) i.d.R. Zykluszeit der SPS ein Wert pro Zyklus z.B. 10 ms T in ms Beleuchtungsst\u00e4rke in Lux 0 0 10 50000 Quelle Digitalisierung (resolution) Quelle Wie viele Spannungswerte kann der Eingang unterscheiden (resolution) Angabe auf der Klemme: 12 Bit verteilt auf \\(-0-..10\\) V \\(2^{12} = 4096\\) Zust\u00e4nde T in ms Beleuchtungsst\u00e4rke in Lux am Sensor Spannung in V nach Verst\u00e4rker Eingangswert als Integer am A/D-Wandler Beleuchtungsst\u00e4rke in Lux in der Steuerungseinheit 0 0 0 0 0 10 50000 5 2047 50000 Quelle Digitalsignal Nach der Umwandlung im Speicher der SPS Quelle T in ms Beleuchtungsst\u00e4rke in Lux 0 0 10 50000 \u270d\ufe0f Aufgabe 4_1_1: Anbindung eines Helligkeitssensors Ein Helligkeitssensor bildet die gemessenen Helligkeitswerte \u00fcber ein analoges Signal \\(0...10 \\text{ V}\\) ab Die Eingangsschnittstelle verf\u00fcgt \u00fcber eine Aufl\u00f6sung von 12 Bit Wie viele diskrete Helligkeitsstufen gibt es? Was ist der kleinste Spannungsunterschied, der unterschieden werden kann? \u2714\ufe0f L\u00f6sung \\(2^{12}=4096\\) diskrete Helligkeitsstufen \\(\\Delta U_{min}=\\frac{U_{max}-U_{min}}{n}=\\frac{10-0 \\text{ V}}{4096}=2.44 \\text{ mV}\\) Analoger Eingang Signal ist eine Stromst\u00e4rke ( 4...20mA ) Signal wird in 12 Bit digitalisiert z.B. Lichtsensor Beispiele f\u00fcr analoge und digitale Signale Eingang Ausgang Digital Taster, ... Kontrollleuchte, ... Analog Temperaturf\u00fchler, ... Elektromotor, ... \u270d\ufe0f Aufgabe 4_1_2: In einer L\u00fcftungsanlage soll ein Drucksensor (Druckbereich 0-10 bar) mit einem verbaut werden Wichtig ist hierbei, dass ein Drahtbruch sofort erkannt wird Welches Sensorsignal w\u00e4hlen Sie? Welche Klemme w\u00e4hlen Sie? Was ist die kleinste Druckdifferenz, die Sie an der SPS erfassen k\u00f6nnen? Zeichen Sie, wie sie den Sensor anschlie\u00dfen w\u00fcrden Quelle \u00dcbersicht Klemmen Link \u2714\ufe0f L\u00f6sung mit einem Stromsignal (4...20mA) kann ein Drahtbruch sicher erkannt werden Entsprechende Klemme z.B. EL3021 | EtherCAT-Klemme, 1-Kanal-Analog-Eingang, Strom, 4\u202620 mA, 12 Bit, differentiell Single-Ended w\u00e4re ebenfalls m\u00f6glich mehre Eing\u00e4nge w\u00e4re ebenfalls m\u00f6glich kleinster m\u00f6glicher Druckunterschied 12 Bit sind \\(2^{12}=4096\\) m\u00f6gliche Zust\u00e4nde Der Messbereich liegt zwischen 0-10 bar \\(\\Delta P_{min}=\\frac{P_{max}-P_{min}}{n}=\\frac{10-0 bar}{4096}=2.44 \\text{ mbar}\\) EL3051 L\u00f6sung EL3051 - single-ended Quelle L\u00f6sung EL3021 - differentiell Quelle Ausg\u00e4nge F\u00fcr Digitale und Analoge Ausg\u00e4nge gelten sie selben Prinzipien","title":"Speicherprogrammierbare Steuerung"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#41-speicherprogrammierbare-steuerung-sps","text":"","title":"4.1 Speicherprogrammierbare Steuerung (SPS)"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#schalter-vs-taster","text":"Ein Schalter beh\u00e4lt seine Stellung nach dem Bet\u00e4tigen bei. Ein Taster springt in die Ausgangslage","title":"Schalter vs. Taster"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#wahrheitstabelle","text":"Annahme: Schalter mit zwei Zust\u00e4nden S1 S2 H1 0 0 1 0 1 0 1 0 0 1 1 1 \\(H1 = \\lnot (S1 \\oplus S2)\\)","title":"Wahrheitstabelle"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#zustandsdiagramm-einer-wechselschaltung","text":"stateDiagram-v2 s1: Licht aus - Schalter 1 = off, Schalter = 2 off s2: Licht an - Schalter 1 = on, Schalter 2 = off s3: Licht an - Schalter 1 = off, Schalter 2 = on s4: Licht aus - Schalter 1 = on, Schalter 2 = on s1--> s2: Schalter 1 = on s2--> s1: Schalter 1 = off s1--> s3: Schalter 2 = on s3--> s1: Schalter 2 = off s4--> s3: Schalter 1 = off s3--> s4: Schalter 1 = on s2 --> s4: Schalter 2 = on s4 --> s2: Schalter 2 = off Quelle","title":"Zustandsdiagramm einer Wechselschaltung"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#losung-industrie-20","text":"S1, S2: Schalter mit zwei Zust\u00e4nden H1: Gl\u00fchlampe","title":"L\u00f6sung \"Industrie 2.0\""},{"location":"4_1_Speicherprogrammierbare_Steuerung/#wechselschaltung-im-gebaude","text":"Quelle","title":"Wechselschaltung im Geb\u00e4ude"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#direkte-verbindungsprogrammierte-steuerung","text":"Steuerung auf Basis des Stomkreises (z.B. Wechselschaltung bei Lichtschalter) \u00dcberall liegt die hohe (ggf. gef\u00e4hrliche ) Spannung an Verdrahtungsaufwand (z.B. Kreuzschaltung f\u00fcr mehr als 2 Schalter) die Fehlersuche sehr m\u00fchselig Bestimmte sicherheitsrelevante Funktionen (z. B. Not-Aus)","title":"Direkte verbindungsprogrammierte Steuerung"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#losung-industrie-21","text":"Entkopplung von Steuerstrom und Laststromkreis durch Relais oder Sch\u00fctz Steuerstromkreis hat i.d.R. niedrigere Spannung","title":"L\u00f6sung \"Industrie 2.1\""},{"location":"4_1_Speicherprogrammierbare_Steuerung/#verbindungsprogrammierte-steuerung-mit-logischen-komponenten","text":"In diesem Fall wird ein Stromsto\u00dfschalter verbaut: Bei jeder Bet\u00e4tigung eines der Taster (S) wird der Zustand von K1 gewechselt Zwei oder mehrere Schalter S k\u00f6nnen parallel geschaltet werden Verringertet Verdrahtungsaufwand, erh\u00f6hte Wartbarkeit A1 - A2 : Schlie\u00dfen des Steuerkreises l\u00f6st eine Sprungfunktion in der Spannung und Strom aus (Flanke) 1 - 2 wird geschlossen Quelle A1 - A2 : Schlie\u00dfen des Steuerkreises l\u00f6st eine Sprungfunktion in der Spannung und Strom aus (Flanke) *- 1 - 2 wird geschlossen Quelle","title":"Verbindungsprogrammierte Steuerung mit logischen Komponenten"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#stromstoschalter","text":"Quelle","title":"Stromsto\u00dfschalter"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#losung-industrie-30","text":"Logikbausteine werden durch Computer mit Ein- ( bIn1 ) und Ausg\u00e4ngen ( bOut1 ) ersetzt Computer erfasst, ob an Eing\u00e4ngen eine Spannung anliegt Computer setzt Spannung auf Ausg\u00e4nge def taster ( s1 , s2 , status_lampe ): if ( s1 or s1 ): return not ( status_lampe ) else : return status_lampe bOut1 = stromstossschalter ( s1 , s2 , status_lampe )","title":"L\u00f6sung Industrie 3.0"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#aufbau-sps-loxone-mini-server","text":"Quelle","title":"Aufbau SPS - Loxone Mini Server"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#aufbau-sps-siemens-logo","text":"","title":"Aufbau SPS - Siemens Logo"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#aufbau-sps-am-beispiel-beckhoff","text":"","title":"Aufbau SPS - am Beispiel Beckhoff"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#aufbau-einer-sps","text":"Quelle Anbringung meist an Hutschiene ( modular ) Rechen- und Speichereinheit oft Anbindung an Bus-System Ein oder mehrere Signalmodule Empfang Sensordaten ( Eing\u00e4nge ) Versand Steuerbefehle ( Ausg\u00e4nge )","title":"Aufbau einer SPS"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#aufbau-sps","text":"Eingang / Ausgang: Schaltende Verbindungen zwischen 0 und 24V Stromversorgung Powerkontakt 24V (L+): SPS arbeitet wegen Bauraum und Sicherheit mit 24V Gleichstrom Powerkontakt 0V (L-): Masse als 0 Potential f\u00fcr die Schaltung definiert Powerkontakt PE: Schutzleiter mit Potential-Erde, 0V sollte auf PE gelegt werden Ausg\u00e4nge + und - zur weiterverteilung","title":"Aufbau SPS"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#industrie-30-zentrale-sps-speicherprogrammierbare-steuerung","text":"die Steuerungsfunktionen sind als Programme in einem Speicher enthalten Flexibilit\u00e4t : Einfacher Austausch von Programmen Mehrere Funktionen auf einem Ger\u00e4t Geringer Platzbedarf , H\u00f6here Zuverl\u00e4ssigkeit, Geringere Kosten Vernetzung mit anderen Systemen, Fernwartung Fehlerdiagnose Quelle","title":"Industrie 3.0 Zentrale SPS -Speicherprogrammierbare Steuerung"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#abgrenzung-von-sps-und-bussystemen","text":"\u26a0\ufe0f Die folgende Darstellung vereinfacht und stilisiert in der Praxis sind Mischformen \u00fcblich","title":"Abgrenzung von SPS und Bussystemen"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#sps-als-zentrales-system","text":"SPS als Single Point of Failure h\u00e4ufig sternf\u00f6rmige Verkabelung Ein- und Ausg\u00e4nge der SPS sind digital (nur zwei Zust\u00e4nde) oder analog Quelle","title":"SPS als zentrales System"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#dezentrales-system","text":"Viele Mikrocontroller \u00fcbernehmen die Steuerungsaufgaben kein Single Point of Failure andere Topologien als Sternform m\u00f6glich \u00dcbermittlung von Seriellen Telegrammen auf der Busleitung Quelle","title":"Dezentrales System"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#steuerung-mit-bus-system","text":"Zentrale SPS wird durch mehrere dezentrale Contoller ersetzt Diese kommunizieren \u00fcber Telegramme in einem standardtisierten Protokoll miteinander Anstelle von bin\u00e4ren Schaltinformationen werden Bitfolgen \u00fcbertragen Mischformen sind m\u00f6glich!","title":"Steuerung mit Bus-System"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#speicherprogrammierbare-steuerung-sps","text":"","title":"Speicherprogrammierbare Steuerung (SPS)"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#messkette-elektronische-sicht-der-steuerung","text":"Sensoren wandeln den Zustand eines Prozesses in ein elektrisches Signal um Die Steuerung und Regelung erfolgt elektronisch oder digital oder in einem rechnergest\u00fctzten Ger\u00e4t ( Steuerungseinheit ) Aktoren werden zur Beeinflussung von Systemen eingesetzt Quelle","title":"Messkette: Elektronische Sicht der Steuerung"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#steuerungseinheit-aufbau-einer-sps","text":"Quelle Anbringung meist an Hutschiene ( modular ) Rechen- und Speichereinheit oft Anbindung an Bus-System Ein oder mehrere Signalmodule Empfang Sensordaten ( Eing\u00e4nge ) Versand Steuerbefehle ( Ausg\u00e4nge )","title":"Steuerungseinheit: Aufbau einer SPS"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#aufbau-sps_1","text":"","title":"Aufbau SPS"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#digitale-ein-und-ausgange","text":"kennt nur zwei Zust\u00e4nde ( True / False ) Abgebildet \u00fcber Spannungslevel oder Stromst\u00e4rke Quelle","title":"Digitale Ein- und Ausg\u00e4nge"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#adressierung","text":"Quelle Digitale Ein- und Ausg\u00e4nge schalten und erfassen Spannungen bis 24V (i.d.R.) Jeder digitale Ein- und Ausgang wird durch ein Bit repr\u00e4sentiert ( True : 24V, False : 0V) Eing\u00e4nge werden mit E bzw. I (Input) bezeichnet ( E0.1 ) Ausg\u00e4nge mit A bzw. O/Q (Output) A0.2","title":"Adressierung"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#symbolische-adressierung","text":"Zur besseren Verst\u00e4ndlichkeit sollten bei der Programmierung sinnvolle Variablennamen eingef\u00fchrt werden, da diese leichter zu interpretieren sind als z.B. Q0.1 . z.B. f\u00fcr ein Automatiklicht bInAnwesenheit F\u00fcr Wert des digitalen Sensors f\u00fcr Anwesenheit an E0.0 bInDunkelheit F\u00fcr Wert des digitalen Sensors f\u00fcr Dunkelheit an E0.1 bOutLicht F\u00fcr digitalen Schalter f\u00fcr Licht an A0.1 Das b steht f\u00fcr einen bin\u00e4ren (digitalen) Ein- oder Ausgang Das In / Out f\u00fcr Ein- oder Ausg\u00e4nge","title":"Symbolische Adressierung"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#digitale-ein-und-ausgange_1","text":"Quelle","title":"Digitale Ein- und Ausg\u00e4nge"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#digitaler-eingang","text":"Kennt nur Signal oder kein Signal ( Boolean ) z.B. Taster z.B. Fensterkontakt","title":"Digitaler Eingang"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#eva-prinzip","text":"Quelle","title":"EVA-Prinzip"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#zyklische-verarbeitung","text":"Das EVA-Prinzip wird in regelm\u00e4\u00dfigen Zyklen durchlaufen Einlesen der Eing\u00e4nge Durchf\u00fchren der Verarbeitung Ausgabe der Ausg\u00e4nge Typische Zykluszeiten liegen zwischen einer und zehn Millisekunden","title":"Zyklische Verarbeitung"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#verarbeitungseinheit-cpu","text":"Quelle","title":"Verarbeitungseinheit - CPU"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#analoge-ein-und-ausgange","text":"Quelle","title":"Analoge Ein- und Ausg\u00e4nge"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#analog-digital-wandler","text":"Vorsicht : Auch analoge Signale werden beim Eingang in die Verarbeitungseinheit digitalisiert Die Aufl\u00f6sung analoger Ein- und Ausg\u00e4nge wird in Bit angegeben","title":"Analog-Digital Wandler"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#analoger-eingang","text":"bei vielen Anwendungsf\u00e4llen sind stetige Werte von Interesse: z.B. Temperatur, Helligkeit, etc.","title":"Analoger Eingang"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#passive-analoge-signale","text":"Nutzen Temperaturabh\u00e4ngigkeit eines Widerstands und Ohmsches Gesetz: \\(U=RI\\) Bei gleicher angelegter Spannung, wird temperaturabh\u00e4ngig ein anderer Strom gemessen Quelle","title":"Passive Analoge Signale"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#zb-pt-widerstande","text":"Platin hat ein relativ lineares Verhalten \\(U = 24 V\\) \\(I_m=0.16 A\\) \\(R=\\frac{U}{I_m}=150 \\Omega\\) \\(T \\approx 100\u00b0C\\) Sollten wir den PT-Widerstand direkt mit \\(24 V\\) beaufschlagen? Quelle","title":"z.B. PT-Widerst\u00e4nde"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#einsatzgebiete-von-verstarkern","text":"Quelle Linearisierung des Signals Anpassung des Signals auf definierten Ausgangsbereich (z.B. 0 .. 20mA, 0 .. 10V) Extra Kosten Sensorspezifisch","title":"Einsatzgebiete von Verst\u00e4rkern"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#aktive-sensoren","text":"Integriert Sensor und Verst\u00e4rker Sensor wird mit Spannung versorgt (i.d.R. 24V/DC) Sensor \u00fcbersetzt physikalische Gr\u00f6\u00dfe in ein Ausgangssignal \\(E\\) Skalierung h\u00e4ufig linear oder sogar proportional \\(U(E_v)=E_0 + K_p \\cdot E_v\\) \\(U(E_v)=\\frac{10 V}{100.000 Lux} \\cdot E_v\\)","title":"Aktive Sensoren"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#anschluss-aktiver-sensoren","text":"Spannungsversorgung \u00fcber GND und 24 V Ausgang LUX wird mit analogem Eingang der SPS verbunden","title":"Anschluss aktiver Sensoren"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#auswahl-analoger-eingange","text":"Spannungssignal: z.B. \\(0...10\\) bzw. \\(-10...10\\) V g\u00fcnstig leicht zu messen (z.B. mit Multimeter) Stromschnittstelle: z.B. 4...20 mA auch bei langen Leitungen unanf\u00e4lliger gegen St\u00f6rungen Erkennen von Drahtbruch (0 A) PT-Eing\u00e4nge: Spezielle Eing\u00e4nge zum Anschluss von PT-Widerst\u00e4nden Quelle","title":"Auswahl Analoger Eing\u00e4nge"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#anzahl-der-leiter","text":"Es gibt Sensoren mit 2, 3, 4 Leitern Zunehmende Messgenauigkeit (Einfluss des Leiterwiderstands kann herausgerechnet werden)","title":"\ud83e\udd13 Anzahl der Leiter"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#signalformen","text":"live zero l\u00e4sst Kabelbruch erkennen Quelle","title":"Signalformen"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#single-ended-vs-differential","text":"Single-Ended: alle Sensoren liegen auf dem gleichen V- Potential (nur ein Kabel zur\u00fcck) Differential: jeder Sensor hat sein eigenes V- Potential (weniger St\u00f6ranf\u00e4llig) Quelle","title":"\ud83e\udd13 Single-Ended vs. Differential"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#analog-digital-wandlung","text":"","title":"Analog-Digital-Wandlung"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#analog-digital-wandlung_1","text":"Signalform: Spannung bipolar SPS kann nur diskrete Werte darstellen Wie hoch ist die Zykluszeit der SPS? Wie viel Bit stehen zur Speicherung eines Wertes zu Verf\u00fcgung? Quelle","title":"Analog-Digital-Wandlung"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#abtastung-sample-rate","text":"i.d.R. Zykluszeit der SPS ein Wert pro Zyklus z.B. 10 ms T in ms Beleuchtungsst\u00e4rke in Lux 0 0 10 50000 Quelle","title":"Abtastung (Sample rate)"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#digitalisierung-resolution","text":"Quelle Wie viele Spannungswerte kann der Eingang unterscheiden (resolution) Angabe auf der Klemme: 12 Bit verteilt auf \\(-0-..10\\) V \\(2^{12} = 4096\\) Zust\u00e4nde T in ms Beleuchtungsst\u00e4rke in Lux am Sensor Spannung in V nach Verst\u00e4rker Eingangswert als Integer am A/D-Wandler Beleuchtungsst\u00e4rke in Lux in der Steuerungseinheit 0 0 0 0 0 10 50000 5 2047 50000 Quelle","title":"Digitalisierung (resolution)"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#digitalsignal","text":"Nach der Umwandlung im Speicher der SPS Quelle T in ms Beleuchtungsst\u00e4rke in Lux 0 0 10 50000","title":"Digitalsignal"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#aufgabe-4_1_1-anbindung-eines-helligkeitssensors","text":"Ein Helligkeitssensor bildet die gemessenen Helligkeitswerte \u00fcber ein analoges Signal \\(0...10 \\text{ V}\\) ab Die Eingangsschnittstelle verf\u00fcgt \u00fcber eine Aufl\u00f6sung von 12 Bit Wie viele diskrete Helligkeitsstufen gibt es? Was ist der kleinste Spannungsunterschied, der unterschieden werden kann?","title":"\u270d\ufe0f Aufgabe 4_1_1: Anbindung eines Helligkeitssensors"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#losung","text":"\\(2^{12}=4096\\) diskrete Helligkeitsstufen \\(\\Delta U_{min}=\\frac{U_{max}-U_{min}}{n}=\\frac{10-0 \\text{ V}}{4096}=2.44 \\text{ mV}\\)","title":"\u2714\ufe0f L\u00f6sung"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#analoger-eingang_1","text":"Signal ist eine Stromst\u00e4rke ( 4...20mA ) Signal wird in 12 Bit digitalisiert z.B. Lichtsensor","title":"Analoger Eingang"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#beispiele-fur-analoge-und-digitale-signale","text":"Eingang Ausgang Digital Taster, ... Kontrollleuchte, ... Analog Temperaturf\u00fchler, ... Elektromotor, ...","title":"Beispiele f\u00fcr analoge und digitale Signale"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#aufgabe-4_1_2","text":"In einer L\u00fcftungsanlage soll ein Drucksensor (Druckbereich 0-10 bar) mit einem verbaut werden Wichtig ist hierbei, dass ein Drahtbruch sofort erkannt wird Welches Sensorsignal w\u00e4hlen Sie? Welche Klemme w\u00e4hlen Sie? Was ist die kleinste Druckdifferenz, die Sie an der SPS erfassen k\u00f6nnen? Zeichen Sie, wie sie den Sensor anschlie\u00dfen w\u00fcrden Quelle","title":"\u270d\ufe0f Aufgabe 4_1_2:"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#ubersicht-klemmen","text":"Link","title":"\u00dcbersicht Klemmen"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#losung_1","text":"mit einem Stromsignal (4...20mA) kann ein Drahtbruch sicher erkannt werden Entsprechende Klemme z.B. EL3021 | EtherCAT-Klemme, 1-Kanal-Analog-Eingang, Strom, 4\u202620 mA, 12 Bit, differentiell Single-Ended w\u00e4re ebenfalls m\u00f6glich mehre Eing\u00e4nge w\u00e4re ebenfalls m\u00f6glich kleinster m\u00f6glicher Druckunterschied 12 Bit sind \\(2^{12}=4096\\) m\u00f6gliche Zust\u00e4nde Der Messbereich liegt zwischen 0-10 bar \\(\\Delta P_{min}=\\frac{P_{max}-P_{min}}{n}=\\frac{10-0 bar}{4096}=2.44 \\text{ mbar}\\)","title":"\u2714\ufe0f L\u00f6sung"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#el3051","text":"","title":"EL3051"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#losung-el3051-single-ended","text":"Quelle","title":"L\u00f6sung EL3051 - single-ended"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#losung-el3021-differentiell","text":"Quelle","title":"L\u00f6sung EL3021 - differentiell"},{"location":"4_1_Speicherprogrammierbare_Steuerung/#ausgange","text":"F\u00fcr Digitale und Analoge Ausg\u00e4nge gelten sie selben Prinzipien","title":"Ausg\u00e4nge"},{"location":"4_2_Sprachen_nach_IEC_61131-3/","text":"4.2 SPS Programmier-Sprachen nach IEC 61131-3 Allgemeiner Aufbau eines SPS-Projekts Die Folgenden Inhalte orientieren sich an der Software Twincat 3 von Beckhoff Die Inhalte sind aber auch auf andere SPS-Programmiersysteme \u00fcbertragbar Da die Twincat 3 Software tief ins System eingreift, wird nicht empfohlen diese auf den privaten Rechnern zu installieren Die Software ist aber auf den Rechnern im Labor installiert Als Alternative, kann die Software OpenPLC Editor empfohlen werden Projektstruktur Ein Projekt besteht aus einem oder mehreren Programmen, welche in einer POU (Program Organization Unit) zusammengefasst werden Am Beispiel TwinCat Entwicklungsumgebung der Firma Beckhoff Automation f\u00fcr SPS Steuerungslogiken Kann auf der Steuerung oder anderem PC ausgef\u00fchrt werden Links sieht man die Gesamt\u00fcbersicht \u00fcber das Projekt ( Projektexplorer ) Twincat bietet ein Fester f\u00fcr die Variablendeklaration (rechts oben) und ein Fester f\u00fcr den sonstigen Code an (rechts unten) Programmablauf in Verarbeitungseinheit Nach dem EVA-Prinzip \u00fcberwacht die SPS in regelm\u00e4\u00dfigen Abst\u00e4nden ( Zykluszeit ) die Werte der Eing\u00e4nge und f\u00fchrt das Hauptprogramm (.../POUs/MAIN (PRG)) aus Hauptprogramm (Main-Program) Entsprechend der code.py bei Circuit Python gibt es eine MAIN -Programm W\u00e4hren wir im code.py einen while -Loop erstellen mussten, wir der Inhalt der MAIN immer wieder automatisch in der Zykluszeit der SPS ausgef\u00fchrt Das Hauptprogramm wird in einer Entwicklungsumgebung geschrieben Hierzu kommen verschiedene Programmiersprachen zum Einsatz Nach Pr\u00fcfung und Fehlerbeseitigung erstellt der Compiler dann den Programmcode, der auf die Steuerung geladen werden kann. liegt dann auf dem Speicher der SPS und kann ver\u00e4ndert werden Programmiersprachen f\u00fcr SPS f\u00fcnf Programmiersprachen (nach IEC 61131) Strukturierter Text , ST (engl. Structured Text, ST) \u00e4hnlich Pascal Anweisungsliste, AWL (engl. Instruction List, IL) Kontaktplan , KOP (engl. Ladder Diagram, LD) Funktionsbausteinsprache , FBS oder FUP genannt (engl. Function Block Diagram, FBD) Ablaufsprache, AS (engl. Sequential Function Chart, SFC) Programm Programm liefert bei der Ausf\u00fchrung einen oder mehrere Werte und speichert diese in Variablen Alle Werte bleiben nach einer Ausf\u00fchrung des Programms bis zur n\u00e4chsten Ausf\u00fchrung erhalten z.B. der Status der Lampe im Hauptprogramm bis zur Ausf\u00fchrung des n\u00e4chsten Zyklus \u270d\ufe0f Aufgabe 4_2_1: Automatik Licht Anwendungsfall: Eine smarte Lichtsteuerung soll eine Leuchte immer anschalten, wenn es dunkel ist und eine Anwesenheit erkannt wird F\u00fcr unsere smarte Lichtsteuerung k\u00f6nnte das f\u00fcr eine Programmierung mittels Strukturiertem Text wie folgt aussehen, wenn wir statt analogen digitale Eing\u00e4nge verwenden: PROGRAM MAIN // Main Programm wird definiert VAR // Variablen werden deklariert bInAnwesenheit1 : BOOL; // der Variable f\u00fcr Anwesenheit. True = Anwesend bInDunkelheit2 : BOOL; // der Variable f\u00fcr Anwesenheit. True = Dunkel bOutLicht1 : BOOL; // der Variable f\u00fcr Licht. True = An END_VAR bOutLicht1 := bInAnwesenheit1 AND bInDunkelheit2; // Logische Verkn\u00fcpfung (nur wenn beides erf\u00fcllt ist, geht das Licht an) Welche Unterschiede zu Python fallen Ihnen auf? \u2714\ufe0f L\u00f6sung PROGRAM MAIN // Main Programm wird definiert VAR // Variablen werden deklariert bInAnwesenheit1 : BOOL; // der Variable f\u00fcr Anwesenheit. True = Anwesend bInDunkelheit2 : BOOL; // der Variable f\u00fcr Anwesenheit. True = Dunkel bOutLicht1 : BOOL; // der Variable f\u00fcr Licht. True = An END_VAR bOutLicht1 := bInAnwesenheit1 AND bInDunkelheit2; // Logische Verkn\u00fcpfung (nur wenn beides erf\u00fcllt ist, geht das Licht an) * Kommentare mit // eingef\u00fchrt * Zeilen werden mit ; abgeschlossen * Variablen und Ihr Typ m\u00fcssen deklariert werden (Name und Datentyp werden festgelegt): <Variablenname>:<Typ> * Der Wert der Variable wird \u00fcber := gesetzt: <Variablenname>:=<Variablenwert> Wichtige Datentypen BOOL : Boolean INT : Integer (nur positiv) z.B. Bit-Werte der Eingangsklemmen UNIT : Unsigned Integer (nur positiv) REAL : Gleitkommazahl z.B. Interne Darstellung der physikalischen G\u00f6\u00dfen weitere IF-Anweisungen IF-Anweisung kann man eine Bedingung abpr\u00fcfen und abh\u00e4ngig von dieser Bedingung ein Anweisungen ausf\u00fchren IF <Boolescher_Ausdruck1> THEN <IF_Anweisungen> {ELSIF <Boolescher_Ausdruck2> THEN <ELSIF_Anweisungen1> . . ELSIF <Boolescher_Ausdruck n> THEN <ELSIF_Anweisungen n-1> ELSE <ELSE_Anweisungen>} END_IF; Ausdr\u00fccke in den {} sind optional Beispiel IF temp < 17 THEN heizung_an := TRUE ; ELSE heizung_an := FALSE ; END_IF ; Keine Einr\u00fcckungen wie bei Python erforderlich \u270d\ufe0f Aufgabe 4_2_2: Wechselschaltung Wie k\u00f6nnen wir daf\u00fcr sorgen, dass das Licht den Zustand wechselt, wenn einer der beiden Schalter bet\u00e4tigt wird? \u2714\ufe0f L\u00f6sung IF ( bInS1 OR bInS2 ) THEN bOut1 = not ( bOut1 ) else : bOut1 = bOut1 Funktionsbausteine Funktionsbaustein liefert einen oder mehrere Werte . Die Werte der Ausgabevariablen und der internen Variablen bleiben bis zur n\u00e4chsten Ausf\u00fchrung erhalten (lokalen Variablen werden nicht gel\u00f6scht) Vergleichbar eine Klasse, mit einer Methode, die immer wieder aufgerufen wird Vorsicht : bei mehrmaligem Aufruf mit denselben Eingabevariablen werden so nicht unbedingt dieselben Ausgabewerte geliefert vgl. Hysterese) Funktionsbaustein Zun\u00e4chst wird eine Blaupause (Klasse) erstellt, sie beschreibt, welche Ein-, Ausgaben, und Zwischenwerte ein Funktionsbaustein enth\u00e4lt (Variablen) und welche Berechnungen diese ausf\u00fchrt Im Hauptprogramm ( MAIN ) k\u00f6nnen eine oder mehrere Objekte des Bausteins instanziiert werden (als Variable deklariert werden) Auch bei der Arbeit mit Funktionsbausteinen gilt das EVA-Prinzip Warum gibt es beides - Funktionen und Funktionsbausteine? z.B. Anwendung von Funktionsbaustein f\u00fcr verschiedene R\u00e4ume nach 100 Bewegungen soll gel\u00fcftet werden w\u00fcrde mit Funktion eine globale Variable pro Raum ben\u00f6tigen \u270d\ufe0f Aufgabe 4_2_3: Funktionsbaustein Counter Schreiben Sie eine Klasse f\u00fcr einen Funktionsbaustein, der eine Z\u00e4hlervariable um eins erh\u00f6ht und den aktuellen Wert zur\u00fcckgibt Zudem soll der Z\u00e4hler zur\u00fcckgesetzt werden k\u00f6nnen class Counter : def __init__ ( self ): self . count = 0 \u2714\ufe0f L\u00f6sung class Counter : def __init__ ( self ): self . count = 0 def increment ( self ): self . count = self . count + 1 return self . count def reset ( self ): self . count = 0 return self . count c = Counter () c . increment () c . increment () print ( c . increment ()) Verwendung von Programm-Organisationseinheiten Programme Direkte Verbindung zu Ein- und Ausgabeeinheiten Grundger\u00fcst ist das Hauptprogramm MAIN , welches zyklisch ausgef\u00fchrt wird und angibt welche Funktionen und Funktionsbausteine aufgerufen werden Funktion Wiederverwendbare Elemente Es gibt viele Standardfunktionen ohne internen Speicher Funktionsbausteine Komplexer as Funktionen K\u00f6nnen Variablen erhalten z.B. Z\u00e4hler Strukturierter Text Anweisungen Wie in anderen h\u00f6heren Programmiersprachen gibt es Anweisungen die den Text strukturieren Zuweisung : Auf der linken Seite einer Zuweisung := steht ein Operand (Variable, Adresse), dem der Wert des Ausdrucks auf der rechten Seite zugewiesen wird: Var1 := Var2 * 10; Aufruf von Funktionen und Funktionsbl\u00f6cken Aufruf eines Funktionsblocks: Aufruf durch Namen der Funktion oder Instanz des Funktionsblocks und in Klammer die gew\u00fcnschten Werte der Parameter hier wird die Funktion FIND aufgerufen, um STR2 in STR1 zu finden Die \u00fcbergebenen Parameter sind beide Zeichenketten / Strings Funktionen haben einen fixen R\u00fcckgabetyp (z.B. die Position als INT) Globale und lokale Variablen Wichtiges Prinzip in der Programmierung Verhindert unbeabsichtigte Eingriffe Nur globale Variablen sind von \u00fcberall sichtbar lokale Variablen , k\u00f6nnen z.B. innerhalb eines Programms oder Funkion definiert werden und sind nur darin sichtbar Alle Variablen sind zun\u00e4chst nur innerhalb der jeweiligen POU sichtbar Arrays - Datenfelder (Listen gleichen Datentyps) / Deklaration VAR aCounter : ARRAY[0..9] OF INT; END_VAR //Deklaration mit Initialisierung: aCounter : ARRAY[0..9] OF INT := [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]; //Datenzugriff 1: //Der lokalen Variablen wird der Wert 20 zugewiesen. nLocalVariable := aCounter[2]; Weitere Anweisungen Return wird genutzt, um einen Baustein zu verlassen EXIT -Anweisung** wenn diese in einer FOR-, WHILE- oder REPEAT-Schleife vorkommt, dann wird die innerste Schleife beendet, ungeachtet der Abbruchbedingung. Aufruf einer Fuktion : Analog zu Python werden der Funktionsname genannt und in Klammern die Attribute \u00fcbergeben (z.B. SQRT(IN := 9) ) Funktionsplan \ud83c\udfaf Lernziele Nach dieser Einheit sind Sie in der Lage dazu - einfache bin\u00e4re Funktionspl\u00e4ne lesen und aufbauen - einfache Bausteine (Vergleiche, Mathematische Operatoren) interpretieren - die Wirkweise von Zeitbausteinen skizzieren und diese passenden Anwendungsf\u00e4llen zuzuordnen (Bin\u00e4rer) Funktionsplan (FUP) Grafische Programmiersprache, nach EVA -Prinzip (links nach rechts) Jeder Baustein ist ein Funktionsbaustein (Funktionsblock) Bausteine mit Symbolen z.B. & f\u00fcr logisches und ( \\(\\land\\) ) >=1 f\u00fcr logisches oder ( \\(\\lor\\) ) Links gehen die Eing\u00e4nge in die Bausteine. Ergebnisse werden rechts weitergegeben. Variablen die gesetzt werden stehen \u00fcber den Bausteinen (vgl. Spule bei Kontaktplan, hier A0.1 ) Quelle Negieren von Ein- und Ausg\u00e4ngen Bei bin\u00e4ren Ein- und Ausg\u00e4ngen kann der Wert durch einen Kreis negiert werden TRUE wird zu FALSE FALSE wird zu TRUE Quelle \u270d\ufe0f Aufgabe 4_2_4: Bin\u00e4rer Funktionsplan E0.1 = TRUE E0.2 = TRUE Was ist A0.1 ? \u2714\ufe0f L\u00f6sung E0.1 wird negiert E0.2 wird negiert not(E0.1) and not(E0.2) = False wird negiert Ausgang des & -Bausteins wird negiert A0.1 = True Quelle Zeitbausteine Ein guter Bewegungsmelder w\u00fcrde nicht sofort erl\u00f6schen, wenn keine Bewegung mehr registriert wird, sondern f\u00fcr ein Nachleuchten der Lampen sorgen (Nachlauf) Die k\u00f6nnte \u00fcber das Z\u00e4hlen der Zyklus-Zeiten gesteuert werden, hierzu m\u00fcssten aber alle Zyklen auf jeder Steuerung gleich lang sein Stattdessen k\u00f6nnen spezielle Bausteine , wie z.B. TOF (Timer off), Ausschaltverz\u00f6gerung eingesetzt werden. TOF: Ausschaltverz\u00f6gerung (Timer Off) verl\u00e4ngert Signal nach Wechsel auf Off (False) IN bin\u00e4rer Eingang PT Gesetzte Ausschaltverz\u00f6gerung Q bin\u00e4rer Ausgang mit Impuls ET Vergangene Zeit seit Erkennen des Ende des Eingangsignals Quelle \u270d\ufe0f Aufgabe 4_2_5 Erweiterung um Nachlauf von einer Sekunde \u2714\ufe0f L\u00f6sung Impulsbildung wandelt positive Flanke in Impuls mit fixer L\u00e4nge IN bin\u00e4rer Eingang PT Gesetzte Impulsl\u00e4nge Q bin\u00e4rer Ausgang mit Impuls ET Vergangene Zeit seit Impulsstart (Elapsed Time) Quelle TON: Einschaltverz\u00f6gerung verz\u00f6gerte Aktivierung, sofern Mindestdauer erreicht IN bin\u00e4rer Eingang PT Gesetzte Einschaltverz\u00f6gerung Q bin\u00e4rer Ausgang mit Impuls ET Vergangene Zeit seit Erkennen des Eingangsignals Quelle TONR: Zeitakkumulator Gibt aufsummierte Zeit sobald Mindestwert erreicht ET Zeit bis zur Ausgabe PT Maximalzeit bis Ausgabe IN bin\u00e4rer Start-Eingang R bin\u00e4rer Reset-Eingang Q bin\u00e4rer Ausgang zeigt wann PT erreicht Quelle \u270d\ufe0f Aufgabe 2_4_6: Zeitbausteine Zeichnen Sie das Ausgangssignal einer Ausschaltverz\u00f6gerung TOF mit PT = 2s eines Impulsgenerators TP mit PT = 0.5s \u2714\ufe0f L\u00f6sung Z\u00e4hler Z\u00e4hlt Flanken (\u00c4nderungen False auf True ) CU bin\u00e4rer Eingang an dem die Flanken gez\u00e4hlt werden (Count Up) R Reset-Eingang um Z\u00e4hler zur\u00fcckzusetzen PV Oberer Grenzwert CV Ausgang der hoch z\u00e4hlt (Counter Value) Q Z\u00e4hlerstatus im Vergleich mit PV Weitere Bausteine Trigger-Bausteine Erkennen steigende oder fallende Flanken F_TRIG f\u00fcr fallende Flanken R_TRIG f\u00fcr steigende (rising) Flanken Anstelle von zur\u00fccksetzen der Taster (Bild) Szenenwechsel wird nur bei Aktivierung eines Tasters aktiviert Speicherbausteine Zuweisungen bleiben i.d.R. nur solange bestehen wie die Eing\u00e4nge auf den vorherigen Block wirken. Zuweisungen bleiben i.d.R. nur solange wie die Eing\u00e4nge auf den vorherigen Block wirken. Speicherglieder und Flipflops erhalten den Wert , auch wenn die Setz-Bedingung nicht mehr gegeben ist. Ausgang setzen im FUP Hier wird der Wert von A0.1 gesetzt (S f\u00fcr set) SR-Flipflop der Ausgang Q wird abh\u00e4ngig vom Signalzustand der Eing\u00e4nge S (et) und R (eset) dauerhaft gesetzt Wenn der Signalzustand am Eingang S=1 und am Eingang R=0 ist, wird Q=1 gesetzt. S=0 und am Eingang R=1 ist, wird auf Q=0 zur\u00fcck gesetzt. bei SR-Flipfops dominiert Eingang S den Eingang R . Bei 1 an beiden Eing\u00e4ngen wird der Operanden auf \"1\" gesetzt S R Q 0 0 Q 1 0 1 0 1 0 1 1 1 Quelle RS-Flipflop Der Eingang R dominiert den Eingang S . Bei einem Signalzustand 1 an beiden Eing\u00e4ngen wird der Signalzustand des angegebenen Operanden auf \"0\" zur\u00fcckgesetzt. S R Q 0 0 Q 1 0 1 0 1 0 1 1 0 Quelle Speicherbausteine und Variablen Ist das Programm in der Lage interne Variablen zu speichern, kann der Einsatz von Speicherbausteinen durch Zuweisungen ersetzt werden Zusammenfassung und Ausblick komplexe neuartige Probleme lassen sich h\u00e4ufig am besten \u00fcber strukturierten Text l\u00f6sen f\u00fcr viele bestehende Anwendungsf\u00e4lle stehen in verschiedenen Softwarel\u00f6sungen bereits Funktionen und Funktionsbl\u00f6cke bereit Automatiklicht bSwi : Eine steigende Flanke an diesem Eingang schaltet den Baustein und das Licht wechselweise ein und aus. bOn : Eine steigende Flanke an diesem Eingang schaltet den Baustein und das Licht gezielt ein. bOff : Eine steigende Flanke an diesem Eingang schaltet das Licht und die Gesamtfunktion des Bausteins aus. fOut : Steuerausgang f\u00fcr Lichtaktoren (0\u2026100 %). Quelle PID-Regler fSetpointValue : Sollwert der Regelgr\u00f6\u00dfe fActualValue : Istwert der Regelgr\u00f6\u00dfe fOut : Ausgang des PID-Glieds Was fehlt noch? fKp : Reglerbeiwert tTn : Nachstellzeit tTv : Vorhaltzeit in stParams Quelle","title":"Sprachen nach IEC 61131-3"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#42-sps-programmier-sprachen-nach-iec-61131-3","text":"","title":"4.2 SPS Programmier-Sprachen nach IEC 61131-3"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#allgemeiner-aufbau-eines-sps-projekts","text":"Die Folgenden Inhalte orientieren sich an der Software Twincat 3 von Beckhoff Die Inhalte sind aber auch auf andere SPS-Programmiersysteme \u00fcbertragbar Da die Twincat 3 Software tief ins System eingreift, wird nicht empfohlen diese auf den privaten Rechnern zu installieren Die Software ist aber auf den Rechnern im Labor installiert Als Alternative, kann die Software OpenPLC Editor empfohlen werden","title":"Allgemeiner Aufbau eines SPS-Projekts"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#projektstruktur","text":"Ein Projekt besteht aus einem oder mehreren Programmen, welche in einer POU (Program Organization Unit) zusammengefasst werden","title":"Projektstruktur"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#am-beispiel-twincat","text":"Entwicklungsumgebung der Firma Beckhoff Automation f\u00fcr SPS Steuerungslogiken Kann auf der Steuerung oder anderem PC ausgef\u00fchrt werden Links sieht man die Gesamt\u00fcbersicht \u00fcber das Projekt ( Projektexplorer ) Twincat bietet ein Fester f\u00fcr die Variablendeklaration (rechts oben) und ein Fester f\u00fcr den sonstigen Code an (rechts unten)","title":"Am Beispiel TwinCat"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#programmablauf-in-verarbeitungseinheit","text":"Nach dem EVA-Prinzip \u00fcberwacht die SPS in regelm\u00e4\u00dfigen Abst\u00e4nden ( Zykluszeit ) die Werte der Eing\u00e4nge und f\u00fchrt das Hauptprogramm (.../POUs/MAIN (PRG)) aus","title":"Programmablauf in Verarbeitungseinheit"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#hauptprogramm-main-program","text":"Entsprechend der code.py bei Circuit Python gibt es eine MAIN -Programm W\u00e4hren wir im code.py einen while -Loop erstellen mussten, wir der Inhalt der MAIN immer wieder automatisch in der Zykluszeit der SPS ausgef\u00fchrt Das Hauptprogramm wird in einer Entwicklungsumgebung geschrieben Hierzu kommen verschiedene Programmiersprachen zum Einsatz Nach Pr\u00fcfung und Fehlerbeseitigung erstellt der Compiler dann den Programmcode, der auf die Steuerung geladen werden kann. liegt dann auf dem Speicher der SPS und kann ver\u00e4ndert werden","title":"Hauptprogramm (Main-Program)"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#programmiersprachen-fur-sps","text":"f\u00fcnf Programmiersprachen (nach IEC 61131) Strukturierter Text , ST (engl. Structured Text, ST) \u00e4hnlich Pascal Anweisungsliste, AWL (engl. Instruction List, IL) Kontaktplan , KOP (engl. Ladder Diagram, LD) Funktionsbausteinsprache , FBS oder FUP genannt (engl. Function Block Diagram, FBD) Ablaufsprache, AS (engl. Sequential Function Chart, SFC)","title":"Programmiersprachen f\u00fcr SPS"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#programm","text":"Programm liefert bei der Ausf\u00fchrung einen oder mehrere Werte und speichert diese in Variablen Alle Werte bleiben nach einer Ausf\u00fchrung des Programms bis zur n\u00e4chsten Ausf\u00fchrung erhalten z.B. der Status der Lampe im Hauptprogramm bis zur Ausf\u00fchrung des n\u00e4chsten Zyklus","title":"Programm"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#aufgabe-4_2_1-automatik-licht","text":"Anwendungsfall: Eine smarte Lichtsteuerung soll eine Leuchte immer anschalten, wenn es dunkel ist und eine Anwesenheit erkannt wird F\u00fcr unsere smarte Lichtsteuerung k\u00f6nnte das f\u00fcr eine Programmierung mittels Strukturiertem Text wie folgt aussehen, wenn wir statt analogen digitale Eing\u00e4nge verwenden: PROGRAM MAIN // Main Programm wird definiert VAR // Variablen werden deklariert bInAnwesenheit1 : BOOL; // der Variable f\u00fcr Anwesenheit. True = Anwesend bInDunkelheit2 : BOOL; // der Variable f\u00fcr Anwesenheit. True = Dunkel bOutLicht1 : BOOL; // der Variable f\u00fcr Licht. True = An END_VAR bOutLicht1 := bInAnwesenheit1 AND bInDunkelheit2; // Logische Verkn\u00fcpfung (nur wenn beides erf\u00fcllt ist, geht das Licht an) Welche Unterschiede zu Python fallen Ihnen auf?","title":"\u270d\ufe0f Aufgabe 4_2_1: Automatik Licht"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#losung","text":"PROGRAM MAIN // Main Programm wird definiert VAR // Variablen werden deklariert bInAnwesenheit1 : BOOL; // der Variable f\u00fcr Anwesenheit. True = Anwesend bInDunkelheit2 : BOOL; // der Variable f\u00fcr Anwesenheit. True = Dunkel bOutLicht1 : BOOL; // der Variable f\u00fcr Licht. True = An END_VAR bOutLicht1 := bInAnwesenheit1 AND bInDunkelheit2; // Logische Verkn\u00fcpfung (nur wenn beides erf\u00fcllt ist, geht das Licht an) * Kommentare mit // eingef\u00fchrt * Zeilen werden mit ; abgeschlossen * Variablen und Ihr Typ m\u00fcssen deklariert werden (Name und Datentyp werden festgelegt): <Variablenname>:<Typ> * Der Wert der Variable wird \u00fcber := gesetzt: <Variablenname>:=<Variablenwert>","title":"\u2714\ufe0f L\u00f6sung"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#wichtige-datentypen","text":"BOOL : Boolean INT : Integer (nur positiv) z.B. Bit-Werte der Eingangsklemmen UNIT : Unsigned Integer (nur positiv) REAL : Gleitkommazahl z.B. Interne Darstellung der physikalischen G\u00f6\u00dfen weitere","title":"Wichtige Datentypen"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#if-anweisungen","text":"IF-Anweisung kann man eine Bedingung abpr\u00fcfen und abh\u00e4ngig von dieser Bedingung ein Anweisungen ausf\u00fchren IF <Boolescher_Ausdruck1> THEN <IF_Anweisungen> {ELSIF <Boolescher_Ausdruck2> THEN <ELSIF_Anweisungen1> . . ELSIF <Boolescher_Ausdruck n> THEN <ELSIF_Anweisungen n-1> ELSE <ELSE_Anweisungen>} END_IF;","title":"IF-Anweisungen"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#ausdrucke-in-den-sind-optional","text":"","title":"Ausdr\u00fccke in den {} sind optional"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#beispiel","text":"IF temp < 17 THEN heizung_an := TRUE ; ELSE heizung_an := FALSE ; END_IF ; Keine Einr\u00fcckungen wie bei Python erforderlich","title":"Beispiel"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#aufgabe-4_2_2-wechselschaltung","text":"Wie k\u00f6nnen wir daf\u00fcr sorgen, dass das Licht den Zustand wechselt, wenn einer der beiden Schalter bet\u00e4tigt wird?","title":"\u270d\ufe0f Aufgabe 4_2_2: Wechselschaltung"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#losung_1","text":"IF ( bInS1 OR bInS2 ) THEN bOut1 = not ( bOut1 ) else : bOut1 = bOut1","title":"\u2714\ufe0f L\u00f6sung"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#funktionsbausteine","text":"Funktionsbaustein liefert einen oder mehrere Werte . Die Werte der Ausgabevariablen und der internen Variablen bleiben bis zur n\u00e4chsten Ausf\u00fchrung erhalten (lokalen Variablen werden nicht gel\u00f6scht) Vergleichbar eine Klasse, mit einer Methode, die immer wieder aufgerufen wird Vorsicht : bei mehrmaligem Aufruf mit denselben Eingabevariablen werden so nicht unbedingt dieselben Ausgabewerte geliefert vgl. Hysterese)","title":"Funktionsbausteine"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#funktionsbaustein","text":"Zun\u00e4chst wird eine Blaupause (Klasse) erstellt, sie beschreibt, welche Ein-, Ausgaben, und Zwischenwerte ein Funktionsbaustein enth\u00e4lt (Variablen) und welche Berechnungen diese ausf\u00fchrt Im Hauptprogramm ( MAIN ) k\u00f6nnen eine oder mehrere Objekte des Bausteins instanziiert werden (als Variable deklariert werden) Auch bei der Arbeit mit Funktionsbausteinen gilt das EVA-Prinzip","title":"Funktionsbaustein"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#warum-gibt-es-beides-funktionen-und-funktionsbausteine","text":"z.B. Anwendung von Funktionsbaustein f\u00fcr verschiedene R\u00e4ume nach 100 Bewegungen soll gel\u00fcftet werden w\u00fcrde mit Funktion eine globale Variable pro Raum ben\u00f6tigen","title":"Warum gibt es beides - Funktionen und Funktionsbausteine?"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#aufgabe-4_2_3-funktionsbaustein-counter","text":"Schreiben Sie eine Klasse f\u00fcr einen Funktionsbaustein, der eine Z\u00e4hlervariable um eins erh\u00f6ht und den aktuellen Wert zur\u00fcckgibt Zudem soll der Z\u00e4hler zur\u00fcckgesetzt werden k\u00f6nnen class Counter : def __init__ ( self ): self . count = 0","title":"\u270d\ufe0f Aufgabe 4_2_3: Funktionsbaustein Counter"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#losung_2","text":"class Counter : def __init__ ( self ): self . count = 0 def increment ( self ): self . count = self . count + 1 return self . count def reset ( self ): self . count = 0 return self . count c = Counter () c . increment () c . increment () print ( c . increment ())","title":"\u2714\ufe0f L\u00f6sung"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#verwendung-von-programm-organisationseinheiten","text":"Programme Direkte Verbindung zu Ein- und Ausgabeeinheiten Grundger\u00fcst ist das Hauptprogramm MAIN , welches zyklisch ausgef\u00fchrt wird und angibt welche Funktionen und Funktionsbausteine aufgerufen werden Funktion Wiederverwendbare Elemente Es gibt viele Standardfunktionen ohne internen Speicher Funktionsbausteine Komplexer as Funktionen K\u00f6nnen Variablen erhalten z.B. Z\u00e4hler","title":"Verwendung von Programm-Organisationseinheiten"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#strukturierter-text","text":"","title":"Strukturierter Text"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#anweisungen","text":"Wie in anderen h\u00f6heren Programmiersprachen gibt es Anweisungen die den Text strukturieren Zuweisung : Auf der linken Seite einer Zuweisung := steht ein Operand (Variable, Adresse), dem der Wert des Ausdrucks auf der rechten Seite zugewiesen wird: Var1 := Var2 * 10;","title":"Anweisungen"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#aufruf-von-funktionen-und-funktionsblocken","text":"Aufruf eines Funktionsblocks: Aufruf durch Namen der Funktion oder Instanz des Funktionsblocks und in Klammer die gew\u00fcnschten Werte der Parameter hier wird die Funktion FIND aufgerufen, um STR2 in STR1 zu finden Die \u00fcbergebenen Parameter sind beide Zeichenketten / Strings Funktionen haben einen fixen R\u00fcckgabetyp (z.B. die Position als INT)","title":"Aufruf von Funktionen und Funktionsbl\u00f6cken"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#globale-und-lokale-variablen","text":"Wichtiges Prinzip in der Programmierung Verhindert unbeabsichtigte Eingriffe Nur globale Variablen sind von \u00fcberall sichtbar lokale Variablen , k\u00f6nnen z.B. innerhalb eines Programms oder Funkion definiert werden und sind nur darin sichtbar Alle Variablen sind zun\u00e4chst nur innerhalb der jeweiligen POU sichtbar","title":"Globale und lokale Variablen"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#arrays-datenfelder-listen-gleichen-datentyps","text":"/ Deklaration VAR aCounter : ARRAY[0..9] OF INT; END_VAR //Deklaration mit Initialisierung: aCounter : ARRAY[0..9] OF INT := [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]; //Datenzugriff 1: //Der lokalen Variablen wird der Wert 20 zugewiesen. nLocalVariable := aCounter[2];","title":"Arrays - Datenfelder (Listen gleichen Datentyps)"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#weitere-anweisungen","text":"Return wird genutzt, um einen Baustein zu verlassen EXIT -Anweisung** wenn diese in einer FOR-, WHILE- oder REPEAT-Schleife vorkommt, dann wird die innerste Schleife beendet, ungeachtet der Abbruchbedingung. Aufruf einer Fuktion : Analog zu Python werden der Funktionsname genannt und in Klammern die Attribute \u00fcbergeben (z.B. SQRT(IN := 9) )","title":"Weitere Anweisungen"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#funktionsplan","text":"","title":"Funktionsplan"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#lernziele","text":"Nach dieser Einheit sind Sie in der Lage dazu - einfache bin\u00e4re Funktionspl\u00e4ne lesen und aufbauen - einfache Bausteine (Vergleiche, Mathematische Operatoren) interpretieren - die Wirkweise von Zeitbausteinen skizzieren und diese passenden Anwendungsf\u00e4llen zuzuordnen","title":"\ud83c\udfaf Lernziele"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#binarer-funktionsplan-fup","text":"Grafische Programmiersprache, nach EVA -Prinzip (links nach rechts) Jeder Baustein ist ein Funktionsbaustein (Funktionsblock) Bausteine mit Symbolen z.B. & f\u00fcr logisches und ( \\(\\land\\) ) >=1 f\u00fcr logisches oder ( \\(\\lor\\) ) Links gehen die Eing\u00e4nge in die Bausteine. Ergebnisse werden rechts weitergegeben. Variablen die gesetzt werden stehen \u00fcber den Bausteinen (vgl. Spule bei Kontaktplan, hier A0.1 ) Quelle","title":"(Bin\u00e4rer) Funktionsplan (FUP)"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#negieren-von-ein-und-ausgangen","text":"Bei bin\u00e4ren Ein- und Ausg\u00e4ngen kann der Wert durch einen Kreis negiert werden TRUE wird zu FALSE FALSE wird zu TRUE Quelle","title":"Negieren von Ein- und Ausg\u00e4ngen"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#aufgabe-4_2_4-binarer-funktionsplan","text":"E0.1 = TRUE E0.2 = TRUE Was ist A0.1 ?","title":"\u270d\ufe0f Aufgabe 4_2_4: Bin\u00e4rer Funktionsplan"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#losung_3","text":"E0.1 wird negiert E0.2 wird negiert not(E0.1) and not(E0.2) = False wird negiert Ausgang des & -Bausteins wird negiert A0.1 = True Quelle","title":"\u2714\ufe0f L\u00f6sung"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#zeitbausteine","text":"Ein guter Bewegungsmelder w\u00fcrde nicht sofort erl\u00f6schen, wenn keine Bewegung mehr registriert wird, sondern f\u00fcr ein Nachleuchten der Lampen sorgen (Nachlauf) Die k\u00f6nnte \u00fcber das Z\u00e4hlen der Zyklus-Zeiten gesteuert werden, hierzu m\u00fcssten aber alle Zyklen auf jeder Steuerung gleich lang sein Stattdessen k\u00f6nnen spezielle Bausteine , wie z.B. TOF (Timer off), Ausschaltverz\u00f6gerung eingesetzt werden.","title":"Zeitbausteine"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#tof-ausschaltverzogerung-timer-off","text":"verl\u00e4ngert Signal nach Wechsel auf Off (False) IN bin\u00e4rer Eingang PT Gesetzte Ausschaltverz\u00f6gerung Q bin\u00e4rer Ausgang mit Impuls ET Vergangene Zeit seit Erkennen des Ende des Eingangsignals Quelle","title":"TOF: Ausschaltverz\u00f6gerung (Timer Off)"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#aufgabe-4_2_5-erweiterung-um-nachlauf-von-einer-sekunde","text":"","title":"\u270d\ufe0f Aufgabe 4_2_5 Erweiterung um Nachlauf von einer Sekunde"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#losung_4","text":"","title":"\u2714\ufe0f L\u00f6sung"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#impulsbildung","text":"wandelt positive Flanke in Impuls mit fixer L\u00e4nge IN bin\u00e4rer Eingang PT Gesetzte Impulsl\u00e4nge Q bin\u00e4rer Ausgang mit Impuls ET Vergangene Zeit seit Impulsstart (Elapsed Time) Quelle","title":"Impulsbildung"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#ton-einschaltverzogerung","text":"verz\u00f6gerte Aktivierung, sofern Mindestdauer erreicht IN bin\u00e4rer Eingang PT Gesetzte Einschaltverz\u00f6gerung Q bin\u00e4rer Ausgang mit Impuls ET Vergangene Zeit seit Erkennen des Eingangsignals Quelle","title":"TON: Einschaltverz\u00f6gerung"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#tonr-zeitakkumulator","text":"Gibt aufsummierte Zeit sobald Mindestwert erreicht ET Zeit bis zur Ausgabe PT Maximalzeit bis Ausgabe IN bin\u00e4rer Start-Eingang R bin\u00e4rer Reset-Eingang Q bin\u00e4rer Ausgang zeigt wann PT erreicht Quelle","title":"TONR: Zeitakkumulator"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#aufgabe-2_4_6-zeitbausteine","text":"Zeichnen Sie das Ausgangssignal einer Ausschaltverz\u00f6gerung TOF mit PT = 2s eines Impulsgenerators TP mit PT = 0.5s","title":"\u270d\ufe0f Aufgabe 2_4_6: Zeitbausteine"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#losung_5","text":"","title":"\u2714\ufe0f L\u00f6sung"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#zahler","text":"Z\u00e4hlt Flanken (\u00c4nderungen False auf True ) CU bin\u00e4rer Eingang an dem die Flanken gez\u00e4hlt werden (Count Up) R Reset-Eingang um Z\u00e4hler zur\u00fcckzusetzen PV Oberer Grenzwert CV Ausgang der hoch z\u00e4hlt (Counter Value) Q Z\u00e4hlerstatus im Vergleich mit PV","title":"Z\u00e4hler"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#weitere-bausteine","text":"","title":"Weitere Bausteine"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#trigger-bausteine","text":"Erkennen steigende oder fallende Flanken F_TRIG f\u00fcr fallende Flanken R_TRIG f\u00fcr steigende (rising) Flanken Anstelle von zur\u00fccksetzen der Taster (Bild) Szenenwechsel wird nur bei Aktivierung eines Tasters aktiviert","title":"Trigger-Bausteine"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#speicherbausteine","text":"Zuweisungen bleiben i.d.R. nur solange bestehen wie die Eing\u00e4nge auf den vorherigen Block wirken. Zuweisungen bleiben i.d.R. nur solange wie die Eing\u00e4nge auf den vorherigen Block wirken. Speicherglieder und Flipflops erhalten den Wert , auch wenn die Setz-Bedingung nicht mehr gegeben ist. Ausgang setzen im FUP Hier wird der Wert von A0.1 gesetzt (S f\u00fcr set)","title":"Speicherbausteine"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#sr-flipflop","text":"der Ausgang Q wird abh\u00e4ngig vom Signalzustand der Eing\u00e4nge S (et) und R (eset) dauerhaft gesetzt Wenn der Signalzustand am Eingang S=1 und am Eingang R=0 ist, wird Q=1 gesetzt. S=0 und am Eingang R=1 ist, wird auf Q=0 zur\u00fcck gesetzt. bei SR-Flipfops dominiert Eingang S den Eingang R . Bei 1 an beiden Eing\u00e4ngen wird der Operanden auf \"1\" gesetzt S R Q 0 0 Q 1 0 1 0 1 0 1 1 1 Quelle","title":"SR-Flipflop"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#rs-flipflop","text":"Der Eingang R dominiert den Eingang S . Bei einem Signalzustand 1 an beiden Eing\u00e4ngen wird der Signalzustand des angegebenen Operanden auf \"0\" zur\u00fcckgesetzt. S R Q 0 0 Q 1 0 1 0 1 0 1 1 0 Quelle","title":"RS-Flipflop"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#speicherbausteine-und-variablen","text":"Ist das Programm in der Lage interne Variablen zu speichern, kann der Einsatz von Speicherbausteinen durch Zuweisungen ersetzt werden","title":"Speicherbausteine und Variablen"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#zusammenfassung-und-ausblick","text":"komplexe neuartige Probleme lassen sich h\u00e4ufig am besten \u00fcber strukturierten Text l\u00f6sen f\u00fcr viele bestehende Anwendungsf\u00e4lle stehen in verschiedenen Softwarel\u00f6sungen bereits Funktionen und Funktionsbl\u00f6cke bereit","title":"Zusammenfassung und Ausblick"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#automatiklicht","text":"bSwi : Eine steigende Flanke an diesem Eingang schaltet den Baustein und das Licht wechselweise ein und aus. bOn : Eine steigende Flanke an diesem Eingang schaltet den Baustein und das Licht gezielt ein. bOff : Eine steigende Flanke an diesem Eingang schaltet das Licht und die Gesamtfunktion des Bausteins aus. fOut : Steuerausgang f\u00fcr Lichtaktoren (0\u2026100 %). Quelle","title":"Automatiklicht"},{"location":"4_2_Sprachen_nach_IEC_61131-3/#pid-regler","text":"fSetpointValue : Sollwert der Regelgr\u00f6\u00dfe fActualValue : Istwert der Regelgr\u00f6\u00dfe fOut : Ausgang des PID-Glieds Was fehlt noch? fKp : Reglerbeiwert tTn : Nachstellzeit tTv : Vorhaltzeit in stParams Quelle","title":"PID-Regler"},{"location":"4_3_Appendix_Twincat/","text":"\ud83e\udd13 Appendix: 4.3 Twincat Installation Twincat und Erstes Projekt \ud83c\udfaf Lernziele Nach dieser Einheit sind Sie in der Lage dazu - eine Testinstanz von TwinCat 3 auf ihrem Rechner auszuf\u00fchren - ein einfaches Hallo World Programm mit Strukturiertem Text schreiben und ausf\u00fchren Installation Twincat und Erstes Projekt Download und Installation von TwinCat Handbuch Quelle und gutes Video zum nachmachen Probleml\u00f6sung, wenn Code nicht ausf\u00fchrbar AdsError: 4132 + \"HyperV\" Problem win8settick.bat im TwinCat Ordner als Admin ausf\u00fchren Was ist TwinCat Software f\u00fcr SPS Entwicklungen und Bertrieb Entwicklungsumgebung : Programm zum Entwickeln von Programmen Laufzeitumgebung : \u00dcberwachnung von kompilierten Programmen Code wird auf SPS geladen und dort ausgef\u00fchrt Alternativ kann zum Testen eine virutelle SPS auf dem Entwicklungs-PC gestartet werden Ausf\u00fchren des Programms TwinCat wird in der Regel auf einem PC gestartet Teilweise sind auch kleine PCs direkt auf die Hutschiene mit der SPS installiert Entwicklungsumgebung Zun\u00e4chst startet TwiNCat im Entwicklungsmodus Erkennbar am blauen Zahnrad Anlegen eines neuen Projektes Neues Projekt anlegen kein SPS-Projekt Anlegen eines neuen SPS-Projektes Innerhalb des Projektes wird ein neues SPS-Projekt angelegt Rechtsklick auf SPS (Neues Element hinzuf\u00fcgen) Nutzen der Vorlage (Standard PLC Project) \u00d6ffnen des Main Programms Relevant ist das MAIN-Programm unter /POU/ Dieses besteht aus einem Variablen (oben) und einem Code-Editor (mitte) Variablen Deklarieren Variablen k\u00f6nnen in Tabellen- und Textueller Ansicht angezeigt werden (rechts oben) Wichtige Datentypen BOOL : Boolean INT : Integer (nur positiv) z.B. Bit-Werte der Eingangsklemmen UNIT : Unsigned Integer (nur positiv) REAL : Gleitkommazahl z.B. Interne Darstellung der physikalischen G\u00f6\u00dfen weitere Zyklische Ausf\u00fchrung SPS hat eine feste Zykluszeit In dieser wir das Main-Programm wiederholt ausgef\u00fchrt Variablenzust\u00e4nde werden erhalten Zyklische Ausf\u00fchrung Ablauf Eing\u00e4nge werden gelesen Main-Programm wird ausgef\u00fchrt Ausg\u00e4nge werden geschrieben \u00c4nderungen nach dem Einlesen, werden erst im n\u00e4chsten Zyklus erfasst \u270d\ufe0f Aufgabe 4_3_1: Blinker Schreiben Sie ein Main Programm, das den Zustand einer LED alle 100 Zyklen wechselt. Tipps: - LedStatus := NOT(LedStatus) zum wechseln (toggeln) - Variable, die die Zyklen z\u00e4hlt - IF -Anweisung Aufgabe Programmieren Sie einen einfachen Bewegungsmelder basierend auf drei Variablen: bInAnwesenheit1 : BOOL; // der Variable f\u00fcr Anwesenheit. True = Anwesend bInDunkelheit2 : BOOL; // der Variable f\u00fcr Anwesenheit. True = Dunkel bOutLicht1 : BOOL ; // der Variable f\u00fcr Licht. True = An L\u00f6sung Wir m\u00f6chten einen Bewegungsmelder implementieren, welcher nur bei Dunkelheit und Bewegung ein Licht anschaltet. Hierzu definieren wir die Variablen als: PROGRAM MAIN // Beschreibung an welcher Stelle die Variablen g\u00fcltig sein sollen VAR // Beginn der Variablen Deklaration bInAnwesenheit1 : BOOL; // der Variable f\u00fcr Anwesenheit. True = Anwesend bInDunkelheit2 : BOOL; // der Variable f\u00fcr Anwesenheit. True = Dunkel bOutLicht1 : BOOL; // der Variable f\u00fcr Licht. True = An END_VAR Implementieren der Steuerungslogik Das Licht soll nur angehen, wenn bInAnwesenheit1 und bInDunkelheit2 auf True stehen. Standardm\u00e4\u00dfig ist das Main-Programm Strukturierter Text. Dies kann aber ge\u00e4ndert werden. L\u00f6sung ``` bOutLicht1 := bInAnwesenheit1 AND bInDunkelheit2; // Logische Verkn\u00fcpfung (nur wenn beides erf\u00fcllt ist, geht das Licht an) ```` Bef\u00fcllen des Main Programmes fertiges Programm, welches in jedem Zyklus ausgef\u00fchrt wird Kompilieren Zum Ausf\u00fchren muss der Code kompiliert werden Hierzu dient das Symbol mit der kleinen blauen Treppe Testlizenz Die Testlizenz l\u00e4uft 7 Tage und kann immer wieder erneuert werden Im Produktivbetrieb w\u00e4re regelm\u00e4\u00dfiges Erneuern sehr st\u00f6rend Testlizenz aktivieren und SPS ausw\u00e4hlen TwinCat startet im Laufzeitmodus Nun kann der Code grundlegend ausgef\u00fchrt werden Erkennbar am gr\u00fcnen Zahnrad unten rechts Auf SPS einloggen und Programm in Speicher laden Als n\u00e4chstes loggen wir uns auf eine SPS ein, um den Code dorthin zu \u00fcbertragen In unserem Fall ist das die virtuelle SPS auf unserem Rechner Meldung, das Programm bisher noch nicht besteht Werte in SPS schreiben Um nun Werte zu setzen (die nicht von au\u00dfen vorgegeben sind), gibt es folgendes Vorgehen \"Vorbereiteten Wert\" eingeben \"Wert schreiben\", um den Wert zu setzen Zyklus-Schritt umsetzen Damit die \u00c4nderung auf im Ergebnis wirksam wird, k\u00f6nnen wir manuell einen Zyklusschritt durchf\u00fchren (blauer Kreispfeil) Hierdurch wird das Main-Programm einmal mit den neuen Werten ausgef\u00fchrt alternativ kann die SPS auch im Echtzeitbetrieb betrieben werden (gr\u00fcner Pfeil) Ausloggen Nach Beendigung k\u00f6nnen wir uns wieder ausloggen und in den Entwicklungsmodus zur\u00fcckkehren \u270d\ufe0f 4_3_1Aufgabe 4_3_2: Bewegungsmelder FUP Erstellen Sie f\u00fcr die gleiche Logik ein Funktionsbausteinplan Legen Sie ein neues SPS-Projekt an (Rechtsklick) L\u00f6schen Sie das MAIN-Programm Erstellen Sie in neues POU MAIN als Funktionsbausteinsprache (FUP) Variablendeklaration \u00dcbernehmen Sie die Variablendeklaration Ziehen Sie einen Baustein aus der Toolbox in das FUP-Feld Bausteine W\u00e4hlen sie den Typ des Bausteins ( ... ) Benennen Sie den Baustein mit AND wird dies automatisch erkannt W\u00e4hlen Sie die Variablen als Eing\u00e4nge F\u00fcgen Sie eine Zuweisung am Ausgang an und vergeben Sie die Variable Im Gegensatz zu Funktionen (z.B. AND ) werden Funktionsbl\u00f6cke als Variablen mit eigenem Namen instanziiert L\u00f6sung Probleml\u00f6sung, wenn SPS nicht ausf\u00fchrbar AdsError: 4132 + \"HyperV\" Problem win8settick.bat im TwinCat Ordner als Admin ausf\u00fchren Zusammenfassung TwinCat - Entwicklung Oberste Ebene ist das Projekt (ErsteSchritteVorlesung) Darunter gibt es SPS -Projekte (1_SPS_HelloWorld) In POUs liegen die Programme Daneben Visualisierungen (VISUs) und andere Funktionn Zusammenfassung TwinCat - Ausf\u00fchrung Es muss das richtige Zielsystem ausgew\u00e4hlt werden Ansonsten wird der Code Lokal auf dem aktuellen Rechner ausgef\u00fchrt Ist ein Zielsystem mit Klemmen verbunden, so werden diese unter E/A angezeigt ePC Verbinden Wird lokal auf einem PC entwickelt, und m\u00f6chte man den Code auf der SPS ausf\u00fchren, muss man den PC und den embeddedPC der SPS mit einem Netzwerkkabel verbinden Schritte aus Video TwinCat im Configmodus starten verbinden digitale und analoge Welt Dropdown / Zielsystem w\u00e4hlen Suchen im Netzwerk: Suchen (Ethernet) / Broadcastsuche ePC ausw\u00e4hlen (MAC1-Addresse, letzte & Zeichen) Klemmen Scannen Schritte: TwinCat im Configmodus starten Men\u00fcpunkt E/A / Scannen - Nach Boxen (Klemmen) suchen - Free Run aktivieren Klemmen mit Typ werden angezeigt Funktion: Zeige Online-Daten aktivieren (Blaue Kugel mit roten Pfeilen) Channel / Input / \u00d6ffnen Datentyp der Varialben \u00fcberpr\u00fcfen Verbindung von Hardwaresignalen zu Variablen Passende Variablen in Main anlegen Deklarieren ob Eingangs oder Ausgangs-Variable ( AT%I* vs AT%Q* ) PROGRAM MAIN VAR bInTaster AT%I*: BOOL; bInTaster AT%Q*: BOOL; END_VAR Button: Konfiguration Aktivieren Klemme und Channel ausw\u00e4hlen Reiter Variable Verkn\u00fcpft mit ausw\u00e4hlen Konfiguration aktivieren \u270d\ufe0f Aufgabe 4_3_3: Funktion Lineare Transformation An einen Analog-Eingang (z.B. 0...10 V) mit einer Aufl\u00f6sung von 12 Bit ( \\(2^{12}=4096\\) m\u00f6gliche Zust\u00e4nde) ist ein Drucksensor mit Messbereich von 0...10 bar angeschlossen Durch eine Funktion sollten die vom Eingang gemessenen Integer-Werte in einen Druck in bar umgerechnet werden L\u00f6sung: FUN_LinearTransformation FUNCTION FUN_LinearTransformation : REAL // Funktionsname und Typ der R\u00fcckgabe VAR_INPUT value_to_transform : INT; // Wert der Transformiert werden soll min_eingang : REAL; // Untere Grenze der Eingabe (z.B. 0) min_ausgang : REAL; // Untere Grenze der Ausgabe (z.B. 0 bar) max_eingang : REAL; // Obere Grenze der Eingabe (z.B. 2**12) max_ausgang : REAL; // Obere Grenze der Ausgabe (z.B. 10 bar) END_VAR VAR steigung : REAL; // Steigung als Zwischenvariable END_VAR steigung := (max_ausgang-min_ausgang)/(max_eingang-min_eingang); // Berechnung der Steigung der Geraden, Wird jedes mal neu berechnet FUN_LinearTransformation := value_to_transform * steigung + min_ausgang; // Anwendungs der linearen Transformation L\u00f6sung: MAIN PROGRAM MAIN VAR aInPressure : INT; // Eingangswert von Analogem Eingang pressure_bar : REAL; // Umgerechneter Wert in physikalische Gr\u00f6\u00dfe z.B. bar END_VAR pressure_bar := FUN_LinearTransformation(value_to_transform := aInPressure, min_eingang := 0, min_ausgang := 0, max_eingang := 4096, max_ausgang := 10); Operatoren nach Bindungsst\u00e4rke Operation Symbol Bindungsst\u00e4rke Einklammern (<Ausdruck>) St\u00e4rkste Bindung Funktionsaufruf <Funktionsname>(Parameterliste) Potenzieren EXPT Negieren - Komplementbildung NOT Multiplizieren * Dividieren / Modulo MOD Addieren + Operation Symbol Bindungsst\u00e4rke Subtrahieren - Vergleiche < , > , <= , >= Gleichheit Ungleichheit = Gleichheit Ungleichheit <> Bool AND AND Bool XOR XOR Bool OR OR Schw\u00e4chste Bindung Quelle \u270d\ufe0f 4_3_4 Aufgabe: Auswertung von Ausdr\u00fccken Werten Sie die folgenden Ausdr\u00fccke aus foo := (3+2) EXPT 2; (* *) ba := 3 + 2 EXPT 2; (* *) blub := foo + 3 (* *) result := blub > 10 (* *) L\u00f6sung foo := (3+2) EXPT 2; (* 25 *) ba := 3 + 2 EXPT 2; (* 7 *) blub := foo + 3; (* 28 *) result := blub > 10; (* TRUE *) Zusammenfassungen Anweisungen Anweisungsart Beispiel Zuweisung A:=B; CV := CV + 1; C:=SIN(X); Aufruf eines Funktionsblocks CMD_TMR(IN := %IX5, PT := 300);A:=CMD_TMR.Q; RETURN RETURN; IF IF D<0.0 THEN C:=A; ELSIF D=0.0 THEN C:=B; ELSE C:=D; END_IF; CASE CASE INT1 OF 1: BOOL1 := TRUE; 2: BOOL2 := TRUE; ELSE BOOL1 := FALSE; BOOL2 := FALSE; END_CASE; FOR FOR J:=101; FOR I:=1 TO 100 BY 2 DO IF ARR[I] = 70 THEN J:=I; EXIT; END_IF; END_FOR; WHILE WHILE J<= 100 AND ARR[J] <> 70 DO J:=J+2; END_WHILE; REPEAT REPEAT J:=J+2; UNTIL J= 101 OR ARR[J] = 70 END_REPEAT; EXIT EXIT; Leere Anweisung ; \u270d\ufe0f 4_3_5: Aufgabe Heizungsanlage Im Falle eines Appartmenthauses haben Sie es mit einer sehr st\u00f6rrischen Heizungsanlage zu k\u00e4mpfen. F\u00e4llt diese aus, so startet sie h\u00e4ufig erst nach einigen Anlaufversuchen. Um \u00fcber die n\u00e4chsten Wochen zu kommen, bis eine neue Heizung installiert werden kann, programmieren Sie eine Notl\u00f6sung: Den Heizungsstatus k\u00f6nnen Sie \u00fcber die Boolesche Variable aInHeatingStatus auslesen. . Die Heizungsanlage kann mit der Funktion START_HEATING_SYSTEM() neu gestartet. Die Funktion hat keine Parameter, gibt aber den Wert TRUE zur\u00fcck, wenn der Startversuch erfolgreich war. Wenn dies nach 20 Versuchen nicht funktionieren sollte, wird es Zeit die Techniker:in zu informieren, damit diese sich dem Problem vor Ort annimmt. Hierzu wurde die Funktion NOTIFY_TECHNICIAN() bereitgestellt. Wenn es besonders kalt ist (5\u00b0C) ist das Problem besonders kritisch: anstelle des Techniker:innen, sollen in diesem Fall alle Mitarbeitenden informiert werden ( NOTIFY_ALL() ). Die Umgebungstemperatur k\u00f6nnen Sie mit der Variable aInTempOutside abrufen. Schreiben Sie ein Steuerungsprogramm als Strukturierten Text, welches in jedem Zyklus die Status der Heizungsanlage \u00fcberwacht, diese bei Bedarf neu startet und ggf. die Techniker:innen und anderen Mitarbeiter:innen informiert. Nutzen Sie dazu Schleifen und IF-Anweisungen. Gehen Sie von einer sehr langsamen Zykluszeit der Steuerung aus (ca. 5 Minute). Ein Startversuch hingegen dauert nur 2 Sekunden. Hinweise: // Abfrage des Status zu Beginn jedes Zyklus IF aInHeatingStatus = False THEN <...> // Mehrfacher Versuch des Starts FOR Versuch:=1 TO 20 BY 1 DO <...> END_FOR; // Aufruf der Startfunktion und gleichzeitiges Speichern der R\u00fcckgabe aInHeatingStatus := START_HEATING_SYSTEM() L\u00f6sung In jedem Zyklus fragen wird zu Beginn den Status der Anlage ab und werden nur aktiv, wenn diese nicht l\u00e4uft // Abfrage des Status zu Beginn jedes Zyklus IF aInHeatingStatus = False THEN <...> Dann f\u00fchren wir 20 Startversuche auf. Dazu rufen wir die Funktion START_HEATING_SYSTEM in der For-Schleife auf. FOR Versuch:=1 TO 20 BY 1 DO (* Versuch es 20 mal *) START_HEATING_SYSTEM(); (* Rufe die Funktion zum Starten auf*) END_FOR; L\u00f6sung Da wir die Versuche stoppen k\u00f6nnen, wenn die Heizung erfolgreich gestartet ist, wollen wir das Ergebnis des Startversuches in einer neuen Variable aInHeatingStatus speichern. FOR Versuch:=1 TO 20 BY 1 DO (* Versuch es 20 mal *) aInHeatingStatus := START_HEATING_SYSTEM(); (* Rufe die Funktion zum Starten auf*) END_FOR; L\u00f6sung Dazu \u00fcberpr\u00fcfen wir in jedem Schleifendurchlauf, ob das Starten geklappt hat. Wenn es geklappt hat, dann k\u00f6nnen wir die For-Schleife mit der Anweisung EXIT verlasse, ohne sie 20 mal zu durchlaufen. FOR Versuch:=1 TO 20 BY 1 DO (* Versuch es 20 mal *) aInHeatingStatus :=START_HEATING_SYSTEM(); (* Rufe die Funktion zum Starten auf und speichere ob es erfolgreich war *) IF aInHeatingStatus THEN (* Wenn es erfolgreich war *) EXIT; (* Verlasse die for-Schleife *) END_IF; END_FOR; L\u00f6sung Wenn wir beim 20. Versuch angelangt sind, und die Schleife immer noch nicht wegen Erfolgs verlassen haben, wird es Zeit den Techniker zu informieren. Die Funktion zur Information NOTIFY_TECHNICIAN wird ausgel\u00f6st, wenn wir den 20. Durchlauf erreichen. Das Pr\u00fcfen wir \u00fcber eine IF-Anweisung. Hier rufen wir eine Funktion ohne R\u00fcckgabe auf. Deswegen steht kein neuer Variablename links der Funktion. FOR Versuch:=1 TO 20 BY 1 DO (* Versuch es 20 mal *) aInHeatingStatus:=START_HEATING_SYSTEM(); (* Rufe die Funktion zum Starten auf und speichere ob es erfolgreich war *) IF aInHeatingStatus THEN (* Wenn es erfolgreich war *) EXIT; (* Verlasse die for-Schleife *) END_IF; IF Versuch = 20 THEN (* Beim 20. Versuch*) NOTIFY_TECHNICIAN(); (* Benachrichtige die Techniker:in *) END_IF; END_FOR; L\u00f6sung Um alle zu informieren, m\u00fcssen wir zus\u00e4tzlich die Au\u00dfentemperatur \u00fcberpr\u00fcfen. Hierzu k\u00f6nnen eine zweite If-Abfrage mit etwas komplizierterem Booleschen Ausdruck FOR Versuch:=1 TO 20 BY 1 DO (* Versuch es 20 mal *) aInHeatingStatus:=START_HEATING_SYSTEM(); (* Rufe die Funktion zum Starten auf und speichere ob es erfolgreich war *) IF aInHeatingStatus THEN (* Wenn es erfolgreich war *) EXIT; (* Verlasse die for-Schleife *) END_IF; IF Versuch = 20 THEN (* Beim 20. Versuch*) NOTIFY_ALL(); (* Benachrichtige alle *) END_IF; IF Versuch = 20 AND TEMP_OUTSIDE<5 THEN NOTIFY_TECHNICIAN(); (* Benachrichtige die Techniker:in *) END_IF; END_FOR; Alternativ lassen sich auch zwei If-Anweisungen schachteln FOR Versuch:=1 TO 20 BY 1 DO (* Versuch es 20 mal *) aInHeatingStatus:=START_HEATING_SYSTEM(); (* Rufe die Funktion zum Starten auf und speichere ob es erfolgreich war *) IF aInHeatingStatus THEN (* Wenn es erfolgreich war *) EXIT; (* Verlasse die for-Schleife *) END_IF; IF Versuch = 20 THEN (* Beim 20. Versuch *) NOTIFY_TECHNICIAN(); (* Benachrichtige die Techniker:in *) IF TEMP_OUTSIDE<5 THEN (* und kalter Witterung*) NOTIFY_ALL(); (* Benachrichtige all *) END_IF; END_IF; END_FOR; Gehen wir davon aus, dass der die Techniker:in sowohl auf der Liste in NOTIFY_TECHNICIAN als auch in NOTIFY_ALL steht, w\u00e4re es sch\u00f6n, wenn er/sie nur einmal informiert wird. Hierzu k\u00f6nnen wir die ELSIF Anweisung nutzen. FOR Versuch:=1 TO 20 BY 1 DO (* Versuch es 20 mal *) aInHeatingStatus:=START_HEATING_SYSTEM(); (* Rufe die Funktion zum Starten auf und speichere ob es erfolgreich war *) IF aInHeatingStatus THEN (* Wenn es erfolgreich war *) EXIT; (* Verlasse die for-Schleife *) END_IF; IF Versuch = 20 AND TEMP_OUTSIDE<5 THEN (* Beim 20. Versuch und kalter Witterung*) NOTIFY_ALL(); (* Benachrichtige all *) ELSIF Versuch = 20 THEN (* Beim 20. Versuch *) NOTIFY_TECHNICIAN(); (* Benachrichtige die Techniker:in *) END_IF; END_FOR; Erg\u00e4nzen des \u00e4u\u00dferen FOR -Loops, damit der Code nur ausgef\u00fchrt wird, wenn die Analge nicht l\u00e4uft: IF aInHeatingStatus = False THEN FOR Versuch:=1 TO 20 BY 1 DO (* Versuch es 20 mal *) aInHeatingStatus:=START_HEATING_SYSTEM(); (* Rufe die Funktion zum Starten auf und speichere ob es erfolgreich war *) IF aInHeatingStatus THEN (* Wenn es erfolgreich war *) EXIT; (* Verlasse die for-Schleife *) END_IF; IF Versuch = 20 AND TEMP_OUTSIDE<5 THEN (* Beim 20. Versuch und kalter Witterung*) NOTIFY_ALL(); (* Benachrichtige all *) ELSIF Versuch = 20 THEN (* Beim 20. Versuch *) NOTIFY_TECHNICIAN(); (* Benachrichtige die Techniker:in *) END_IF; END_FOR; END_IF;","title":"Twincat"},{"location":"4_3_Appendix_Twincat/#appendix-43-twincat","text":"","title":"\ud83e\udd13 Appendix: 4.3 Twincat"},{"location":"4_3_Appendix_Twincat/#installation-twincat-und-erstes-projekt","text":"","title":"Installation Twincat und Erstes Projekt"},{"location":"4_3_Appendix_Twincat/#lernziele","text":"Nach dieser Einheit sind Sie in der Lage dazu - eine Testinstanz von TwinCat 3 auf ihrem Rechner auszuf\u00fchren - ein einfaches Hallo World Programm mit Strukturiertem Text schreiben und ausf\u00fchren","title":"\ud83c\udfaf Lernziele"},{"location":"4_3_Appendix_Twincat/#installation-twincat-und-erstes-projekt_1","text":"Download und Installation von TwinCat Handbuch Quelle und gutes Video zum nachmachen Probleml\u00f6sung, wenn Code nicht ausf\u00fchrbar AdsError: 4132 + \"HyperV\" Problem win8settick.bat im TwinCat Ordner als Admin ausf\u00fchren","title":"Installation Twincat und Erstes Projekt"},{"location":"4_3_Appendix_Twincat/#was-ist-twincat","text":"Software f\u00fcr SPS Entwicklungen und Bertrieb Entwicklungsumgebung : Programm zum Entwickeln von Programmen Laufzeitumgebung : \u00dcberwachnung von kompilierten Programmen Code wird auf SPS geladen und dort ausgef\u00fchrt Alternativ kann zum Testen eine virutelle SPS auf dem Entwicklungs-PC gestartet werden","title":"Was ist TwinCat"},{"location":"4_3_Appendix_Twincat/#ausfuhren-des-programms","text":"TwinCat wird in der Regel auf einem PC gestartet Teilweise sind auch kleine PCs direkt auf die Hutschiene mit der SPS installiert","title":"Ausf\u00fchren des Programms"},{"location":"4_3_Appendix_Twincat/#entwicklungsumgebung","text":"Zun\u00e4chst startet TwiNCat im Entwicklungsmodus Erkennbar am blauen Zahnrad","title":"Entwicklungsumgebung"},{"location":"4_3_Appendix_Twincat/#anlegen-eines-neuen-projektes","text":"Neues Projekt anlegen kein SPS-Projekt","title":"Anlegen eines neuen Projektes"},{"location":"4_3_Appendix_Twincat/#anlegen-eines-neuen-sps-projektes","text":"Innerhalb des Projektes wird ein neues SPS-Projekt angelegt Rechtsklick auf SPS (Neues Element hinzuf\u00fcgen) Nutzen der Vorlage (Standard PLC Project)","title":"Anlegen eines neuen SPS-Projektes"},{"location":"4_3_Appendix_Twincat/#offnen-des-main-programms","text":"Relevant ist das MAIN-Programm unter /POU/ Dieses besteht aus einem Variablen (oben) und einem Code-Editor (mitte)","title":"\u00d6ffnen des Main Programms"},{"location":"4_3_Appendix_Twincat/#variablen-deklarieren","text":"Variablen k\u00f6nnen in Tabellen- und Textueller Ansicht angezeigt werden (rechts oben)","title":"Variablen Deklarieren"},{"location":"4_3_Appendix_Twincat/#wichtige-datentypen","text":"BOOL : Boolean INT : Integer (nur positiv) z.B. Bit-Werte der Eingangsklemmen UNIT : Unsigned Integer (nur positiv) REAL : Gleitkommazahl z.B. Interne Darstellung der physikalischen G\u00f6\u00dfen weitere","title":"Wichtige Datentypen"},{"location":"4_3_Appendix_Twincat/#zyklische-ausfuhrung","text":"SPS hat eine feste Zykluszeit In dieser wir das Main-Programm wiederholt ausgef\u00fchrt Variablenzust\u00e4nde werden erhalten","title":"Zyklische Ausf\u00fchrung"},{"location":"4_3_Appendix_Twincat/#zyklische-ausfuhrung_1","text":"Ablauf Eing\u00e4nge werden gelesen Main-Programm wird ausgef\u00fchrt Ausg\u00e4nge werden geschrieben \u00c4nderungen nach dem Einlesen, werden erst im n\u00e4chsten Zyklus erfasst","title":"Zyklische Ausf\u00fchrung"},{"location":"4_3_Appendix_Twincat/#aufgabe-4_3_1-blinker","text":"Schreiben Sie ein Main Programm, das den Zustand einer LED alle 100 Zyklen wechselt. Tipps: - LedStatus := NOT(LedStatus) zum wechseln (toggeln) - Variable, die die Zyklen z\u00e4hlt - IF -Anweisung","title":"\u270d\ufe0f Aufgabe 4_3_1: Blinker"},{"location":"4_3_Appendix_Twincat/#aufgabe","text":"Programmieren Sie einen einfachen Bewegungsmelder basierend auf drei Variablen: bInAnwesenheit1 : BOOL; // der Variable f\u00fcr Anwesenheit. True = Anwesend bInDunkelheit2 : BOOL; // der Variable f\u00fcr Anwesenheit. True = Dunkel bOutLicht1 : BOOL ; // der Variable f\u00fcr Licht. True = An","title":"Aufgabe"},{"location":"4_3_Appendix_Twincat/#losung","text":"Wir m\u00f6chten einen Bewegungsmelder implementieren, welcher nur bei Dunkelheit und Bewegung ein Licht anschaltet. Hierzu definieren wir die Variablen als: PROGRAM MAIN // Beschreibung an welcher Stelle die Variablen g\u00fcltig sein sollen VAR // Beginn der Variablen Deklaration bInAnwesenheit1 : BOOL; // der Variable f\u00fcr Anwesenheit. True = Anwesend bInDunkelheit2 : BOOL; // der Variable f\u00fcr Anwesenheit. True = Dunkel bOutLicht1 : BOOL; // der Variable f\u00fcr Licht. True = An END_VAR","title":"L\u00f6sung"},{"location":"4_3_Appendix_Twincat/#implementieren-der-steuerungslogik","text":"Das Licht soll nur angehen, wenn bInAnwesenheit1 und bInDunkelheit2 auf True stehen. Standardm\u00e4\u00dfig ist das Main-Programm Strukturierter Text. Dies kann aber ge\u00e4ndert werden. L\u00f6sung ``` bOutLicht1 := bInAnwesenheit1 AND bInDunkelheit2; // Logische Verkn\u00fcpfung (nur wenn beides erf\u00fcllt ist, geht das Licht an) ````","title":"Implementieren der Steuerungslogik"},{"location":"4_3_Appendix_Twincat/#befullen-des-main-programmes","text":"fertiges Programm, welches in jedem Zyklus ausgef\u00fchrt wird","title":"Bef\u00fcllen des Main Programmes"},{"location":"4_3_Appendix_Twincat/#kompilieren","text":"Zum Ausf\u00fchren muss der Code kompiliert werden Hierzu dient das Symbol mit der kleinen blauen Treppe","title":"Kompilieren"},{"location":"4_3_Appendix_Twincat/#testlizenz","text":"Die Testlizenz l\u00e4uft 7 Tage und kann immer wieder erneuert werden Im Produktivbetrieb w\u00e4re regelm\u00e4\u00dfiges Erneuern sehr st\u00f6rend","title":"Testlizenz"},{"location":"4_3_Appendix_Twincat/#testlizenz-aktivieren-und-sps-auswahlen","text":"","title":"Testlizenz aktivieren und SPS ausw\u00e4hlen"},{"location":"4_3_Appendix_Twincat/#twincat-startet-im-laufzeitmodus","text":"Nun kann der Code grundlegend ausgef\u00fchrt werden Erkennbar am gr\u00fcnen Zahnrad unten rechts","title":"TwinCat startet im Laufzeitmodus"},{"location":"4_3_Appendix_Twincat/#auf-sps-einloggen-und-programm-in-speicher-laden","text":"Als n\u00e4chstes loggen wir uns auf eine SPS ein, um den Code dorthin zu \u00fcbertragen In unserem Fall ist das die virtuelle SPS auf unserem Rechner Meldung, das Programm bisher noch nicht besteht","title":"Auf SPS einloggen und Programm in Speicher laden"},{"location":"4_3_Appendix_Twincat/#werte-in-sps-schreiben","text":"Um nun Werte zu setzen (die nicht von au\u00dfen vorgegeben sind), gibt es folgendes Vorgehen \"Vorbereiteten Wert\" eingeben \"Wert schreiben\", um den Wert zu setzen","title":"Werte in SPS schreiben"},{"location":"4_3_Appendix_Twincat/#zyklus-schritt-umsetzen","text":"Damit die \u00c4nderung auf im Ergebnis wirksam wird, k\u00f6nnen wir manuell einen Zyklusschritt durchf\u00fchren (blauer Kreispfeil) Hierdurch wird das Main-Programm einmal mit den neuen Werten ausgef\u00fchrt alternativ kann die SPS auch im Echtzeitbetrieb betrieben werden (gr\u00fcner Pfeil)","title":"Zyklus-Schritt umsetzen"},{"location":"4_3_Appendix_Twincat/#ausloggen","text":"Nach Beendigung k\u00f6nnen wir uns wieder ausloggen und in den Entwicklungsmodus zur\u00fcckkehren","title":"Ausloggen"},{"location":"4_3_Appendix_Twincat/#4_3_1aufgabe-4_3_2-bewegungsmelder-fup","text":"Erstellen Sie f\u00fcr die gleiche Logik ein Funktionsbausteinplan Legen Sie ein neues SPS-Projekt an (Rechtsklick) L\u00f6schen Sie das MAIN-Programm Erstellen Sie in neues POU MAIN als Funktionsbausteinsprache (FUP)","title":"\u270d\ufe0f 4_3_1Aufgabe 4_3_2: Bewegungsmelder FUP"},{"location":"4_3_Appendix_Twincat/#variablendeklaration","text":"\u00dcbernehmen Sie die Variablendeklaration Ziehen Sie einen Baustein aus der Toolbox in das FUP-Feld","title":"Variablendeklaration"},{"location":"4_3_Appendix_Twincat/#bausteine","text":"W\u00e4hlen sie den Typ des Bausteins ( ... ) Benennen Sie den Baustein mit AND wird dies automatisch erkannt W\u00e4hlen Sie die Variablen als Eing\u00e4nge F\u00fcgen Sie eine Zuweisung am Ausgang an und vergeben Sie die Variable Im Gegensatz zu Funktionen (z.B. AND ) werden Funktionsbl\u00f6cke als Variablen mit eigenem Namen instanziiert","title":"Bausteine"},{"location":"4_3_Appendix_Twincat/#losung_1","text":"","title":"L\u00f6sung"},{"location":"4_3_Appendix_Twincat/#problemlosung-wenn-sps-nicht-ausfuhrbar","text":"AdsError: 4132 + \"HyperV\" Problem win8settick.bat im TwinCat Ordner als Admin ausf\u00fchren","title":"Probleml\u00f6sung, wenn SPS nicht ausf\u00fchrbar"},{"location":"4_3_Appendix_Twincat/#zusammenfassung-twincat-entwicklung","text":"Oberste Ebene ist das Projekt (ErsteSchritteVorlesung) Darunter gibt es SPS -Projekte (1_SPS_HelloWorld) In POUs liegen die Programme Daneben Visualisierungen (VISUs) und andere Funktionn","title":"Zusammenfassung TwinCat - Entwicklung"},{"location":"4_3_Appendix_Twincat/#zusammenfassung-twincat-ausfuhrung","text":"Es muss das richtige Zielsystem ausgew\u00e4hlt werden Ansonsten wird der Code Lokal auf dem aktuellen Rechner ausgef\u00fchrt Ist ein Zielsystem mit Klemmen verbunden, so werden diese unter E/A angezeigt","title":"Zusammenfassung TwinCat - Ausf\u00fchrung"},{"location":"4_3_Appendix_Twincat/#epc-verbinden","text":"Wird lokal auf einem PC entwickelt, und m\u00f6chte man den Code auf der SPS ausf\u00fchren, muss man den PC und den embeddedPC der SPS mit einem Netzwerkkabel verbinden Schritte aus Video TwinCat im Configmodus starten verbinden digitale und analoge Welt Dropdown / Zielsystem w\u00e4hlen Suchen im Netzwerk: Suchen (Ethernet) / Broadcastsuche ePC ausw\u00e4hlen (MAC1-Addresse, letzte & Zeichen)","title":"ePC Verbinden"},{"location":"4_3_Appendix_Twincat/#klemmen-scannen","text":"Schritte: TwinCat im Configmodus starten Men\u00fcpunkt E/A / Scannen - Nach Boxen (Klemmen) suchen - Free Run aktivieren Klemmen mit Typ werden angezeigt Funktion: Zeige Online-Daten aktivieren (Blaue Kugel mit roten Pfeilen) Channel / Input / \u00d6ffnen Datentyp der Varialben \u00fcberpr\u00fcfen","title":"Klemmen Scannen"},{"location":"4_3_Appendix_Twincat/#verbindung-von-hardwaresignalen-zu-variablen","text":"Passende Variablen in Main anlegen Deklarieren ob Eingangs oder Ausgangs-Variable ( AT%I* vs AT%Q* ) PROGRAM MAIN VAR bInTaster AT%I*: BOOL; bInTaster AT%Q*: BOOL; END_VAR Button: Konfiguration Aktivieren Klemme und Channel ausw\u00e4hlen Reiter Variable Verkn\u00fcpft mit ausw\u00e4hlen Konfiguration aktivieren","title":"Verbindung von Hardwaresignalen zu Variablen"},{"location":"4_3_Appendix_Twincat/#aufgabe-4_3_3-funktion-lineare-transformation","text":"An einen Analog-Eingang (z.B. 0...10 V) mit einer Aufl\u00f6sung von 12 Bit ( \\(2^{12}=4096\\) m\u00f6gliche Zust\u00e4nde) ist ein Drucksensor mit Messbereich von 0...10 bar angeschlossen Durch eine Funktion sollten die vom Eingang gemessenen Integer-Werte in einen Druck in bar umgerechnet werden","title":"\u270d\ufe0f Aufgabe 4_3_3: Funktion Lineare Transformation"},{"location":"4_3_Appendix_Twincat/#losung-fun_lineartransformation","text":"FUNCTION FUN_LinearTransformation : REAL // Funktionsname und Typ der R\u00fcckgabe VAR_INPUT value_to_transform : INT; // Wert der Transformiert werden soll min_eingang : REAL; // Untere Grenze der Eingabe (z.B. 0) min_ausgang : REAL; // Untere Grenze der Ausgabe (z.B. 0 bar) max_eingang : REAL; // Obere Grenze der Eingabe (z.B. 2**12) max_ausgang : REAL; // Obere Grenze der Ausgabe (z.B. 10 bar) END_VAR VAR steigung : REAL; // Steigung als Zwischenvariable END_VAR steigung := (max_ausgang-min_ausgang)/(max_eingang-min_eingang); // Berechnung der Steigung der Geraden, Wird jedes mal neu berechnet FUN_LinearTransformation := value_to_transform * steigung + min_ausgang; // Anwendungs der linearen Transformation","title":"L\u00f6sung: FUN_LinearTransformation"},{"location":"4_3_Appendix_Twincat/#losung-main","text":"PROGRAM MAIN VAR aInPressure : INT; // Eingangswert von Analogem Eingang pressure_bar : REAL; // Umgerechneter Wert in physikalische Gr\u00f6\u00dfe z.B. bar END_VAR pressure_bar := FUN_LinearTransformation(value_to_transform := aInPressure, min_eingang := 0, min_ausgang := 0, max_eingang := 4096, max_ausgang := 10);","title":"L\u00f6sung: MAIN"},{"location":"4_3_Appendix_Twincat/#operatoren-nach-bindungsstarke","text":"Operation Symbol Bindungsst\u00e4rke Einklammern (<Ausdruck>) St\u00e4rkste Bindung Funktionsaufruf <Funktionsname>(Parameterliste) Potenzieren EXPT Negieren - Komplementbildung NOT Multiplizieren * Dividieren / Modulo MOD Addieren + Operation Symbol Bindungsst\u00e4rke Subtrahieren - Vergleiche < , > , <= , >= Gleichheit Ungleichheit = Gleichheit Ungleichheit <> Bool AND AND Bool XOR XOR Bool OR OR Schw\u00e4chste Bindung Quelle","title":"Operatoren nach Bindungsst\u00e4rke"},{"location":"4_3_Appendix_Twincat/#4_3_4-aufgabe-auswertung-von-ausdrucken","text":"Werten Sie die folgenden Ausdr\u00fccke aus foo := (3+2) EXPT 2; (* *) ba := 3 + 2 EXPT 2; (* *) blub := foo + 3 (* *) result := blub > 10 (* *)","title":"\u270d\ufe0f 4_3_4 Aufgabe: Auswertung von Ausdr\u00fccken"},{"location":"4_3_Appendix_Twincat/#losung_2","text":"foo := (3+2) EXPT 2; (* 25 *) ba := 3 + 2 EXPT 2; (* 7 *) blub := foo + 3; (* 28 *) result := blub > 10; (* TRUE *)","title":"L\u00f6sung"},{"location":"4_3_Appendix_Twincat/#zusammenfassungen-anweisungen","text":"Anweisungsart Beispiel Zuweisung A:=B; CV := CV + 1; C:=SIN(X); Aufruf eines Funktionsblocks CMD_TMR(IN := %IX5, PT := 300);A:=CMD_TMR.Q; RETURN RETURN; IF IF D<0.0 THEN C:=A; ELSIF D=0.0 THEN C:=B; ELSE C:=D; END_IF; CASE CASE INT1 OF 1: BOOL1 := TRUE; 2: BOOL2 := TRUE; ELSE BOOL1 := FALSE; BOOL2 := FALSE; END_CASE; FOR FOR J:=101; FOR I:=1 TO 100 BY 2 DO IF ARR[I] = 70 THEN J:=I; EXIT; END_IF; END_FOR; WHILE WHILE J<= 100 AND ARR[J] <> 70 DO J:=J+2; END_WHILE; REPEAT REPEAT J:=J+2; UNTIL J= 101 OR ARR[J] = 70 END_REPEAT; EXIT EXIT; Leere Anweisung ;","title":"Zusammenfassungen Anweisungen"},{"location":"4_3_Appendix_Twincat/#4_3_5-aufgabe-heizungsanlage","text":"Im Falle eines Appartmenthauses haben Sie es mit einer sehr st\u00f6rrischen Heizungsanlage zu k\u00e4mpfen. F\u00e4llt diese aus, so startet sie h\u00e4ufig erst nach einigen Anlaufversuchen. Um \u00fcber die n\u00e4chsten Wochen zu kommen, bis eine neue Heizung installiert werden kann, programmieren Sie eine Notl\u00f6sung: Den Heizungsstatus k\u00f6nnen Sie \u00fcber die Boolesche Variable aInHeatingStatus auslesen. . Die Heizungsanlage kann mit der Funktion START_HEATING_SYSTEM() neu gestartet. Die Funktion hat keine Parameter, gibt aber den Wert TRUE zur\u00fcck, wenn der Startversuch erfolgreich war. Wenn dies nach 20 Versuchen nicht funktionieren sollte, wird es Zeit die Techniker:in zu informieren, damit diese sich dem Problem vor Ort annimmt. Hierzu wurde die Funktion NOTIFY_TECHNICIAN() bereitgestellt. Wenn es besonders kalt ist (5\u00b0C) ist das Problem besonders kritisch: anstelle des Techniker:innen, sollen in diesem Fall alle Mitarbeitenden informiert werden ( NOTIFY_ALL() ). Die Umgebungstemperatur k\u00f6nnen Sie mit der Variable aInTempOutside abrufen. Schreiben Sie ein Steuerungsprogramm als Strukturierten Text, welches in jedem Zyklus die Status der Heizungsanlage \u00fcberwacht, diese bei Bedarf neu startet und ggf. die Techniker:innen und anderen Mitarbeiter:innen informiert. Nutzen Sie dazu Schleifen und IF-Anweisungen. Gehen Sie von einer sehr langsamen Zykluszeit der Steuerung aus (ca. 5 Minute). Ein Startversuch hingegen dauert nur 2 Sekunden.","title":"\u270d\ufe0f 4_3_5: Aufgabe Heizungsanlage"},{"location":"4_3_Appendix_Twincat/#hinweise","text":"// Abfrage des Status zu Beginn jedes Zyklus IF aInHeatingStatus = False THEN <...> // Mehrfacher Versuch des Starts FOR Versuch:=1 TO 20 BY 1 DO <...> END_FOR; // Aufruf der Startfunktion und gleichzeitiges Speichern der R\u00fcckgabe aInHeatingStatus := START_HEATING_SYSTEM()","title":"Hinweise:"},{"location":"4_3_Appendix_Twincat/#losung_3","text":"In jedem Zyklus fragen wird zu Beginn den Status der Anlage ab und werden nur aktiv, wenn diese nicht l\u00e4uft // Abfrage des Status zu Beginn jedes Zyklus IF aInHeatingStatus = False THEN <...> Dann f\u00fchren wir 20 Startversuche auf. Dazu rufen wir die Funktion START_HEATING_SYSTEM in der For-Schleife auf. FOR Versuch:=1 TO 20 BY 1 DO (* Versuch es 20 mal *) START_HEATING_SYSTEM(); (* Rufe die Funktion zum Starten auf*) END_FOR;","title":"L\u00f6sung"},{"location":"4_3_Appendix_Twincat/#losung_4","text":"Da wir die Versuche stoppen k\u00f6nnen, wenn die Heizung erfolgreich gestartet ist, wollen wir das Ergebnis des Startversuches in einer neuen Variable aInHeatingStatus speichern. FOR Versuch:=1 TO 20 BY 1 DO (* Versuch es 20 mal *) aInHeatingStatus := START_HEATING_SYSTEM(); (* Rufe die Funktion zum Starten auf*) END_FOR;","title":"L\u00f6sung"},{"location":"4_3_Appendix_Twincat/#losung_5","text":"Dazu \u00fcberpr\u00fcfen wir in jedem Schleifendurchlauf, ob das Starten geklappt hat. Wenn es geklappt hat, dann k\u00f6nnen wir die For-Schleife mit der Anweisung EXIT verlasse, ohne sie 20 mal zu durchlaufen. FOR Versuch:=1 TO 20 BY 1 DO (* Versuch es 20 mal *) aInHeatingStatus :=START_HEATING_SYSTEM(); (* Rufe die Funktion zum Starten auf und speichere ob es erfolgreich war *) IF aInHeatingStatus THEN (* Wenn es erfolgreich war *) EXIT; (* Verlasse die for-Schleife *) END_IF; END_FOR;","title":"L\u00f6sung"},{"location":"4_3_Appendix_Twincat/#losung_6","text":"Wenn wir beim 20. Versuch angelangt sind, und die Schleife immer noch nicht wegen Erfolgs verlassen haben, wird es Zeit den Techniker zu informieren. Die Funktion zur Information NOTIFY_TECHNICIAN wird ausgel\u00f6st, wenn wir den 20. Durchlauf erreichen. Das Pr\u00fcfen wir \u00fcber eine IF-Anweisung. Hier rufen wir eine Funktion ohne R\u00fcckgabe auf. Deswegen steht kein neuer Variablename links der Funktion. FOR Versuch:=1 TO 20 BY 1 DO (* Versuch es 20 mal *) aInHeatingStatus:=START_HEATING_SYSTEM(); (* Rufe die Funktion zum Starten auf und speichere ob es erfolgreich war *) IF aInHeatingStatus THEN (* Wenn es erfolgreich war *) EXIT; (* Verlasse die for-Schleife *) END_IF; IF Versuch = 20 THEN (* Beim 20. Versuch*) NOTIFY_TECHNICIAN(); (* Benachrichtige die Techniker:in *) END_IF; END_FOR;","title":"L\u00f6sung"},{"location":"4_3_Appendix_Twincat/#losung_7","text":"Um alle zu informieren, m\u00fcssen wir zus\u00e4tzlich die Au\u00dfentemperatur \u00fcberpr\u00fcfen. Hierzu k\u00f6nnen eine zweite If-Abfrage mit etwas komplizierterem Booleschen Ausdruck FOR Versuch:=1 TO 20 BY 1 DO (* Versuch es 20 mal *) aInHeatingStatus:=START_HEATING_SYSTEM(); (* Rufe die Funktion zum Starten auf und speichere ob es erfolgreich war *) IF aInHeatingStatus THEN (* Wenn es erfolgreich war *) EXIT; (* Verlasse die for-Schleife *) END_IF; IF Versuch = 20 THEN (* Beim 20. Versuch*) NOTIFY_ALL(); (* Benachrichtige alle *) END_IF; IF Versuch = 20 AND TEMP_OUTSIDE<5 THEN NOTIFY_TECHNICIAN(); (* Benachrichtige die Techniker:in *) END_IF; END_FOR; Alternativ lassen sich auch zwei If-Anweisungen schachteln FOR Versuch:=1 TO 20 BY 1 DO (* Versuch es 20 mal *) aInHeatingStatus:=START_HEATING_SYSTEM(); (* Rufe die Funktion zum Starten auf und speichere ob es erfolgreich war *) IF aInHeatingStatus THEN (* Wenn es erfolgreich war *) EXIT; (* Verlasse die for-Schleife *) END_IF; IF Versuch = 20 THEN (* Beim 20. Versuch *) NOTIFY_TECHNICIAN(); (* Benachrichtige die Techniker:in *) IF TEMP_OUTSIDE<5 THEN (* und kalter Witterung*) NOTIFY_ALL(); (* Benachrichtige all *) END_IF; END_IF; END_FOR; Gehen wir davon aus, dass der die Techniker:in sowohl auf der Liste in NOTIFY_TECHNICIAN als auch in NOTIFY_ALL steht, w\u00e4re es sch\u00f6n, wenn er/sie nur einmal informiert wird. Hierzu k\u00f6nnen wir die ELSIF Anweisung nutzen. FOR Versuch:=1 TO 20 BY 1 DO (* Versuch es 20 mal *) aInHeatingStatus:=START_HEATING_SYSTEM(); (* Rufe die Funktion zum Starten auf und speichere ob es erfolgreich war *) IF aInHeatingStatus THEN (* Wenn es erfolgreich war *) EXIT; (* Verlasse die for-Schleife *) END_IF; IF Versuch = 20 AND TEMP_OUTSIDE<5 THEN (* Beim 20. Versuch und kalter Witterung*) NOTIFY_ALL(); (* Benachrichtige all *) ELSIF Versuch = 20 THEN (* Beim 20. Versuch *) NOTIFY_TECHNICIAN(); (* Benachrichtige die Techniker:in *) END_IF; END_FOR; Erg\u00e4nzen des \u00e4u\u00dferen FOR -Loops, damit der Code nur ausgef\u00fchrt wird, wenn die Analge nicht l\u00e4uft: IF aInHeatingStatus = False THEN FOR Versuch:=1 TO 20 BY 1 DO (* Versuch es 20 mal *) aInHeatingStatus:=START_HEATING_SYSTEM(); (* Rufe die Funktion zum Starten auf und speichere ob es erfolgreich war *) IF aInHeatingStatus THEN (* Wenn es erfolgreich war *) EXIT; (* Verlasse die for-Schleife *) END_IF; IF Versuch = 20 AND TEMP_OUTSIDE<5 THEN (* Beim 20. Versuch und kalter Witterung*) NOTIFY_ALL(); (* Benachrichtige all *) ELSIF Versuch = 20 THEN (* Beim 20. Versuch *) NOTIFY_TECHNICIAN(); (* Benachrichtige die Techniker:in *) END_IF; END_FOR; END_IF;","title":"L\u00f6sung"},{"location":"5_1_Signalisierung/","text":"5.1 Signalisierung und Leitungscodes Unterschiede SPS und Bussysteme Quelle Feldbus Bei einer konventionellen SPS sind alle Komponenten sternf\u00f6rmig verbunden (analoges oder digitale Signale werden \u00fcbertragen) Beim Bus ein Datenkabel (Buskabel) Zentraler Aufbau mit SPS und steckbaren Schnittstellenkarten ( Master ) m\u00f6glich Quelle Vielfalt an Bussystemen Spezielle Anwendungsf\u00e4lle in Geb\u00e4uden DALI, KNX, ... Geschwindigkeit und Zuverl\u00e4ssigkeit CAN-Bus in Fahrzeugen Funk Reichweite und Energiebedarf LoRaWAN, Bluetooth Low Energy Unterscheidungsmerkmale von Bussystemen Telegramminhalt : welche Information Topologie : Verkabelung Teilnehmerhierarchie : Master, Slave, ... Adressierung : Wie erreicht man Komponenten Buszugriffsverfahren : Wer sendet wann? Signalisierung : Wie werden Telegramme \u00fcbertragen \u00dcbertragungsmedium : z.B: Kabel oder Funk Quelle Unterscheidungsmerkmale von Bussystemen Telegramminhalt : welche Information Topologie : Verkabelung Teilnehmerhierarchie : Master, Slave, ... Adressierung : Wie erreicht man Komponenten Buszugriffsverfahren : Wer sendet wann? Signalisierung : Wie werden Telegramme \u00fcbertragen \u00dcbertragungsmedium : z.B: Kabel oder Funk Bit\u00fcbertragungsschicht / Signalisierung von Telegrammen Wireless \u00fcber Wellen Frequenzmodulation Amplitudenmodulation Kabelgebundene Kodierung \u00dcber Spannungslevel Informationsgehalt von Telegrammen Steuerfeld: Priorit\u00e4t der Nachricht Quelladresse: Absender (vgl. MAC-Adresse) Zieladresse: Empf\u00e4nger (vgl. MAC-Adresse) Routing Z\u00e4hler: Z\u00e4hlt wie oft \u00fcber Koppler gesendet (verhindert Irrl\u00e4ufer) Nutzinformation: Eigentlich Information (z.B. Messwerte eines Sensor) Sicherungs-Feld: Wurden die Daten richtig \u00fcbertragen (vgl. Hash) Symbolrate und Bitrate Anzahl der \u00fcbertragenen Symbole pro Zeiteinheit In der Abbildung rechts gibt es ein Symbolalphabet \\({\\displaystyle d_{i}\\in \\{-1,1\\}}.\\) Die Bitrate ist die Anzahl der \u00fcbertragenen Bits pro Zeiteinheit (bei einem Bit pro Symbol entspricht die Bitrate der Symbolrate) \\(1 \\text{ Baud} = 1 \\frac{\\text{Symbol}}{\\text{s}}\\) Beispiele CAN-Bus: \\(5 \\text{ bis } 500.000 \\text{ Baud}\\) DMX: \\(500.000 \\text{ Baud}\\) DALI-Bus: \\(1.200 \\text{ Baud}\\) \u270d\ufe0f Aufgabe 5_1_1: Symbolrate Wie gro\u00df ist jeweils die Symbolrate und die Bitrate? \u2714\ufe0f L\u00f6sung In beiden F\u00e4llen \u00e4ndert sich die Spannung zehn mal pro Sekunde \\(\\text{Symbolrate} = 10 \\text{ Baud}\\) Links: Es gibt zwei Spannungen, jedes Symbol codiert ein Bit \\(\\text{Bitrate} = 10 \\frac{\\text{Bit}}{\\text{s}}\\) Rechts: Es gibt vier Spannungen, jedes Symbol codiert zwei Bit \\(\\text{Bitrate} = 20 \\frac{\\text{Bit}}{\\text{s}}\\) Leitungscodes Wie wird die Symbolrate ausgenutzt? z.B. Non-Return-to-Zero High Level Hohes Spannungslevel codiert 1 in jedem Schritt wird ein Bit \u00fcbertragen dazwischen gibt es keine zur\u00fcckfallen auf eine neutrale Spannung Baud-Rate entspricht Bit-Rate \\(1 \\text{ Baud} \\cdot \\frac{\\text{Bit}}{\\text{Signal}}= 1 \\frac{\\text{Bit}}{\\text{s}}\\) Weitere Leitungscodes \u270d\ufe0f Aufgabe 5_1_2: Leitungscodes Erkl\u00e4ren Sie verbal, wie die Leitungscodes funktionieren Non-Return-to-Zero Low Level Non-Return-to-Zero Inverted Return-to-Zero Welche Vor- und Nachteile haben die verschiedenen Leitungscodes? \u2714\ufe0f L\u00f6sung Non-Return-to-Zero Low Level: eine 1 wird durch eine niedrige Spannung codiert Non-Return-to-Zero Inverted: Bei jedem Auftreten einer 1 wird die Spannung invertiert Return-to-Zero: eine 1 wird durch eine hohe Spannung codiert, nach jedem Bit wird auf eine neutrale Spannung zur\u00fcckgekehrt (halbiert die Bitrate bei gleicher Baud-Rate) \u00dcbermittlung der Taktrate Signal ohne Taktrate (z.B. Non-Return-to-Zero Low Level): Ohne gemeinsame Uhr nur schwer zu entschl\u00fcsseln L\u00f6sungen: Einsatz einer Return-to-Zero-Code Kodierung Pausen mit definierter L\u00e4nge mit definiertem Rhythmus z.B. bei RS-232 Separate Leitung f\u00fcr Takt z.B. bei I\u00b2C-Bus Synchrone Daten\u00fcbertragung Neben der Datenleitung SDA gibt es eine Taktleitung SCL , mit welcher der Master vorgibt, wann SDA gelesen wird (z.B. I\u00b2C -Bus) Probleme: Taktleitung ben\u00f6tigt zus\u00e4tzliche Leitung Bei langen Leitungen kann es zu Phasenverschiebungen kommen. D.h. bis die Spannung auf der Datenleitung ,welche vom Busteilnehmer gesendet wurde, ankommt, ist der Takt beim Master schon weitergezogen Quelle Asynchrone Daten\u00fcbertragung Jeder Busteilnehmer verf\u00fcgt \u00fcber eine eigene Taktquelle ( Sample Clock ), die deutlich schneller taktet als die Daten\u00fcbertragung Durch die \u00dcbertragung eines Start- und Stop-Bits wird die Taktquelle des Senders und Empf\u00e4ngers synchronisiert (z.B. RS-232) Serielle und Parallele Busse Mit mehreren parallelen Leitungen k\u00f6nnen ebenfalls mehr Symbole bei gleicher Baud-Rate \u00fcbertragen werden Kaum Einsatz in Feldbussen (welche Ger\u00e4te im Feld verbinden), h\u00e4ufig jedoch in Computern ( PCI , ATA ) \u00dcbertragungsarten Simplex: Eine Richtung Half-Duplex: Beide Richtungen, aber nicht gleichzeitig Full-Duplex: Beide Richtungen gleichzeitig Quelle Beispiel: Universal Serial Bus (USB 1.1 und 2.0) Leitungen sind \u00fcber Schirmung gegen St\u00f6rungen abgesichert Zwei Dr\u00e4hte f\u00fcr Spannungspotentiale Zwei Dr\u00e4hte f\u00fcr Daten (Werte immer gegenl\u00e4ufig - half duplex) Kein Draht f\u00fcr Takt (spezielle NRZ-S Kodierung mit Bit Stuffing) \\(480 \\text{ Baud}\\) Quelle \ud83e\udd13 NRZ-S: Bitwechsel bei Null Bei jeder 0 im Datenbit findet ein Wechsel statt # Beispiel 1: Datenbits (logisch): 1 1 1 1 1 1 1 1 phys. Leitung bei Ausgangszustand \u201e1\u201c: 1 1 1 1 1 1 1 1 phys. Leitung bei Ausgangszustand \u201e0\u201c: 0 0 0 0 0 0 0 0 # Beispiel 2: Datenbits (logisch): 0 0 0 0 0 0 0 0 phys. Leitung bei Ausgangszustand \u201e1\u201c: 0 1 0 1 0 1 0 1 phys. Leitung bei Ausgangszustand \u201e0\u201c: 1 0 1 0 1 0 1 0 # Beispiel 3: Datenbits (logisch): 1 1 1 1 1 0 1 0 1 0 1 1 0 0 0 1 phys. Leitung bei Ausgangszustand \u201e1\u201c: 1 1 1 1 1 0 0 1 1 0 0 0 1 0 1 1 phys. Leitung bei Ausgangszustand \u201e0\u201c: 0 0 0 0 0 1 1 0 0 1 1 1 0 1 0 0","title":"Signalisierung"},{"location":"5_1_Signalisierung/#51-signalisierung-und-leitungscodes","text":"","title":"5.1 Signalisierung und Leitungscodes"},{"location":"5_1_Signalisierung/#unterschiede-sps-und-bussysteme","text":"Quelle","title":"Unterschiede SPS und Bussysteme"},{"location":"5_1_Signalisierung/#feldbus","text":"Bei einer konventionellen SPS sind alle Komponenten sternf\u00f6rmig verbunden (analoges oder digitale Signale werden \u00fcbertragen) Beim Bus ein Datenkabel (Buskabel) Zentraler Aufbau mit SPS und steckbaren Schnittstellenkarten ( Master ) m\u00f6glich Quelle","title":"Feldbus"},{"location":"5_1_Signalisierung/#vielfalt-an-bussystemen","text":"Spezielle Anwendungsf\u00e4lle in Geb\u00e4uden DALI, KNX, ... Geschwindigkeit und Zuverl\u00e4ssigkeit CAN-Bus in Fahrzeugen Funk Reichweite und Energiebedarf LoRaWAN, Bluetooth Low Energy","title":"Vielfalt an Bussystemen"},{"location":"5_1_Signalisierung/#unterscheidungsmerkmale-von-bussystemen","text":"Telegramminhalt : welche Information Topologie : Verkabelung Teilnehmerhierarchie : Master, Slave, ... Adressierung : Wie erreicht man Komponenten Buszugriffsverfahren : Wer sendet wann? Signalisierung : Wie werden Telegramme \u00fcbertragen \u00dcbertragungsmedium : z.B: Kabel oder Funk Quelle","title":"Unterscheidungsmerkmale von Bussystemen"},{"location":"5_1_Signalisierung/#unterscheidungsmerkmale-von-bussystemen_1","text":"Telegramminhalt : welche Information Topologie : Verkabelung Teilnehmerhierarchie : Master, Slave, ... Adressierung : Wie erreicht man Komponenten Buszugriffsverfahren : Wer sendet wann? Signalisierung : Wie werden Telegramme \u00fcbertragen \u00dcbertragungsmedium : z.B: Kabel oder Funk","title":"Unterscheidungsmerkmale von Bussystemen"},{"location":"5_1_Signalisierung/#bitubertragungsschicht-signalisierung-von-telegrammen","text":"Wireless \u00fcber Wellen Frequenzmodulation Amplitudenmodulation Kabelgebundene Kodierung \u00dcber Spannungslevel","title":"Bit\u00fcbertragungsschicht /  Signalisierung von Telegrammen"},{"location":"5_1_Signalisierung/#informationsgehalt-von-telegrammen","text":"Steuerfeld: Priorit\u00e4t der Nachricht Quelladresse: Absender (vgl. MAC-Adresse) Zieladresse: Empf\u00e4nger (vgl. MAC-Adresse) Routing Z\u00e4hler: Z\u00e4hlt wie oft \u00fcber Koppler gesendet (verhindert Irrl\u00e4ufer) Nutzinformation: Eigentlich Information (z.B. Messwerte eines Sensor) Sicherungs-Feld: Wurden die Daten richtig \u00fcbertragen (vgl. Hash)","title":"Informationsgehalt von Telegrammen"},{"location":"5_1_Signalisierung/#symbolrate-und-bitrate","text":"Anzahl der \u00fcbertragenen Symbole pro Zeiteinheit In der Abbildung rechts gibt es ein Symbolalphabet \\({\\displaystyle d_{i}\\in \\{-1,1\\}}.\\) Die Bitrate ist die Anzahl der \u00fcbertragenen Bits pro Zeiteinheit (bei einem Bit pro Symbol entspricht die Bitrate der Symbolrate) \\(1 \\text{ Baud} = 1 \\frac{\\text{Symbol}}{\\text{s}}\\) Beispiele CAN-Bus: \\(5 \\text{ bis } 500.000 \\text{ Baud}\\) DMX: \\(500.000 \\text{ Baud}\\) DALI-Bus: \\(1.200 \\text{ Baud}\\)","title":"Symbolrate und Bitrate"},{"location":"5_1_Signalisierung/#aufgabe-5_1_1-symbolrate","text":"Wie gro\u00df ist jeweils die Symbolrate und die Bitrate?","title":"\u270d\ufe0f Aufgabe 5_1_1: Symbolrate"},{"location":"5_1_Signalisierung/#losung","text":"In beiden F\u00e4llen \u00e4ndert sich die Spannung zehn mal pro Sekunde \\(\\text{Symbolrate} = 10 \\text{ Baud}\\) Links: Es gibt zwei Spannungen, jedes Symbol codiert ein Bit \\(\\text{Bitrate} = 10 \\frac{\\text{Bit}}{\\text{s}}\\) Rechts: Es gibt vier Spannungen, jedes Symbol codiert zwei Bit \\(\\text{Bitrate} = 20 \\frac{\\text{Bit}}{\\text{s}}\\)","title":"\u2714\ufe0f L\u00f6sung"},{"location":"5_1_Signalisierung/#leitungscodes","text":"Wie wird die Symbolrate ausgenutzt? z.B. Non-Return-to-Zero High Level Hohes Spannungslevel codiert 1 in jedem Schritt wird ein Bit \u00fcbertragen dazwischen gibt es keine zur\u00fcckfallen auf eine neutrale Spannung Baud-Rate entspricht Bit-Rate \\(1 \\text{ Baud} \\cdot \\frac{\\text{Bit}}{\\text{Signal}}= 1 \\frac{\\text{Bit}}{\\text{s}}\\)","title":"Leitungscodes"},{"location":"5_1_Signalisierung/#weitere-leitungscodes","text":"","title":"Weitere Leitungscodes"},{"location":"5_1_Signalisierung/#aufgabe-5_1_2-leitungscodes","text":"Erkl\u00e4ren Sie verbal, wie die Leitungscodes funktionieren Non-Return-to-Zero Low Level Non-Return-to-Zero Inverted Return-to-Zero Welche Vor- und Nachteile haben die verschiedenen Leitungscodes?","title":"\u270d\ufe0f Aufgabe 5_1_2: Leitungscodes"},{"location":"5_1_Signalisierung/#losung_1","text":"Non-Return-to-Zero Low Level: eine 1 wird durch eine niedrige Spannung codiert Non-Return-to-Zero Inverted: Bei jedem Auftreten einer 1 wird die Spannung invertiert Return-to-Zero: eine 1 wird durch eine hohe Spannung codiert, nach jedem Bit wird auf eine neutrale Spannung zur\u00fcckgekehrt (halbiert die Bitrate bei gleicher Baud-Rate)","title":"\u2714\ufe0f L\u00f6sung"},{"location":"5_1_Signalisierung/#ubermittlung-der-taktrate","text":"Signal ohne Taktrate (z.B. Non-Return-to-Zero Low Level): Ohne gemeinsame Uhr nur schwer zu entschl\u00fcsseln L\u00f6sungen: Einsatz einer Return-to-Zero-Code Kodierung Pausen mit definierter L\u00e4nge mit definiertem Rhythmus z.B. bei RS-232 Separate Leitung f\u00fcr Takt z.B. bei I\u00b2C-Bus","title":"\u00dcbermittlung der Taktrate"},{"location":"5_1_Signalisierung/#synchrone-datenubertragung","text":"Neben der Datenleitung SDA gibt es eine Taktleitung SCL , mit welcher der Master vorgibt, wann SDA gelesen wird (z.B. I\u00b2C -Bus) Probleme: Taktleitung ben\u00f6tigt zus\u00e4tzliche Leitung Bei langen Leitungen kann es zu Phasenverschiebungen kommen. D.h. bis die Spannung auf der Datenleitung ,welche vom Busteilnehmer gesendet wurde, ankommt, ist der Takt beim Master schon weitergezogen Quelle","title":"Synchrone Daten\u00fcbertragung"},{"location":"5_1_Signalisierung/#asynchrone-datenubertragung","text":"Jeder Busteilnehmer verf\u00fcgt \u00fcber eine eigene Taktquelle ( Sample Clock ), die deutlich schneller taktet als die Daten\u00fcbertragung Durch die \u00dcbertragung eines Start- und Stop-Bits wird die Taktquelle des Senders und Empf\u00e4ngers synchronisiert (z.B. RS-232)","title":"Asynchrone Daten\u00fcbertragung"},{"location":"5_1_Signalisierung/#serielle-und-parallele-busse","text":"Mit mehreren parallelen Leitungen k\u00f6nnen ebenfalls mehr Symbole bei gleicher Baud-Rate \u00fcbertragen werden Kaum Einsatz in Feldbussen (welche Ger\u00e4te im Feld verbinden), h\u00e4ufig jedoch in Computern ( PCI , ATA )","title":"Serielle und Parallele Busse"},{"location":"5_1_Signalisierung/#ubertragungsarten","text":"Simplex: Eine Richtung Half-Duplex: Beide Richtungen, aber nicht gleichzeitig Full-Duplex: Beide Richtungen gleichzeitig Quelle","title":"\u00dcbertragungsarten"},{"location":"5_1_Signalisierung/#beispiel-universal-serial-bus-usb-11-und-20","text":"Leitungen sind \u00fcber Schirmung gegen St\u00f6rungen abgesichert Zwei Dr\u00e4hte f\u00fcr Spannungspotentiale Zwei Dr\u00e4hte f\u00fcr Daten (Werte immer gegenl\u00e4ufig - half duplex) Kein Draht f\u00fcr Takt (spezielle NRZ-S Kodierung mit Bit Stuffing) \\(480 \\text{ Baud}\\) Quelle","title":"Beispiel: Universal Serial Bus (USB  1.1 und 2.0)"},{"location":"5_1_Signalisierung/#nrz-s-bitwechsel-bei-null","text":"Bei jeder 0 im Datenbit findet ein Wechsel statt # Beispiel 1: Datenbits (logisch): 1 1 1 1 1 1 1 1 phys. Leitung bei Ausgangszustand \u201e1\u201c: 1 1 1 1 1 1 1 1 phys. Leitung bei Ausgangszustand \u201e0\u201c: 0 0 0 0 0 0 0 0 # Beispiel 2: Datenbits (logisch): 0 0 0 0 0 0 0 0 phys. Leitung bei Ausgangszustand \u201e1\u201c: 0 1 0 1 0 1 0 1 phys. Leitung bei Ausgangszustand \u201e0\u201c: 1 0 1 0 1 0 1 0 # Beispiel 3: Datenbits (logisch): 1 1 1 1 1 0 1 0 1 0 1 1 0 0 0 1 phys. Leitung bei Ausgangszustand \u201e1\u201c: 1 1 1 1 1 0 0 1 1 0 0 0 1 0 1 1 phys. Leitung bei Ausgangszustand \u201e0\u201c: 0 0 0 0 0 1 1 0 0 1 1 1 0 1 0 0","title":"\ud83e\udd13 NRZ-S: Bitwechsel bei Null"},{"location":"5_2_Buszugriffsverfahren/","text":"img[alt~=\"center\"] { display: block; margin: 0 auto; } 5.2 Buszugriffsverfahren \ud83c\udfaf Lernziele Nach dieser Einheit sind Sie in der Lage dazu * das Vorgehen von Client-Server, Token, Summenrahmenprokoll- und CS-MA- Buszugriffsverfahren zu beschreiben * deren Vor- und Nachteile zu benennen * Laufzeiten von Nachrichten auf Buskabeln zu berechnen Quelle Herausforderung Senden mehre Busteilnehmer zeitgleich, so \u00fcberlagern sich die Spannungs-Pegel auf der Busleitung bzw. die Wellen Inhalt der Telegramme kann nicht mehr entziffert werden Im OSI-Modell Aufgabe der Sicherungs- und Vermittlungsschicht (Schicht 2&3) Client/Server (Master/Slave-Verfahren) Zentrale Bussteuereinheit ( Master , ggf. SPS) stellt Verbindung zu den passiven Teilnehmern (Slaves) her ( Kommunikationssteuerung ) Slaves antworten auf eine Datenanforderung des Masters unmittelbar Polling (zyklische Abfrage) Master mit aktivem Buszugriff geben die Ein-/Ausgabedaten an die Slaves einfaches Protokoll garantierte Buszugriffszeiten (d.h. es ist vorhersagbar, wie lange es dauert bis Information ausgetauscht werden kann) Quelle \u270d\ufe0f Aufgabe 5_2_1: Worst Case beim Polling Eine zentrale SPS fragt als Master zyklisch alle Werte von Sensoren auf einer Busleitung ab und sendet Befehle insgesamt 255 Slaves, davon 1 Taster T\u00fcr\u00f6ffner 1 Motor T\u00fcr\u00f6ffner Wie lange dauert es im schlimmsten Fall bis die T\u00fcr reagiert? Annahmen maximale Busleitungsl\u00e4nge: \\(200 \\text{ m}\\) Telegramml\u00e4nge: \\(2\\) Byte [Adresse].[Nachricht] Zykluszeit des Masters und Slaves vernachl\u00e4ssigbar (Antworten unmittelbar) Baud-Rate \\(9.600 \\text{ Baud}\\) (z.B. Dali) Manchester-Code Zykluszeit je Master + Slave: vernachl\u00e4ssigbar Signal-Laufzeit Fortpflanzung des Signals im Leiter mit Lichtgeschwindigkeit wird ebenfalls vernachl\u00e4ssigt \u2714\ufe0f L\u00f6sung Abrufen eines Slaves: \u00dcbertragungszeit (wie lange belegt das Signal die Leitung): 1 Bit pro 2 Baud: \\(4.800 \\frac{\\text{ Bit}}{\\text{s}}\\) In eine Richtung: \\(\\frac{16 \\text{ Bit}}{4800 \\text{ Bit}}\\text{s}=3.3 \\text{ ms}\\) Abrufen aller Salves ( \\(\\text{Bus-Zykluszeit}\\) ): Slaves antworten, nachdem Sie die Nachricht erhalten haben Zeit pro Slave: \\(6.6\\text{ ms}\\) Wenn Befehl direkt weitergeleitet wird, aber die Teilnehmer logisch maximal auseinander: \\(6.6 \\text{ ms} \\cdot 254 = 1.68 \\text{ s}\\) Langsam, aber: es ist garantiert, dass es nicht l\u00e4nger dauert (Echtzeitf\u00e4higes System)! Einfluss der Bus-Zykluszeit auf Komfort Kopieren Sie den folgenden Code in: https://jsfiddle.net/ <! DOCTYPE html > < html > < head > < title > Toggle Background Color with Time Delay < /title> < script > var color = \"white\" ; function changeBackground () { var time = document . getElementById ( \"timeInput\" ). value ; setTimeout ( function () { if ( color === \"white\" ) { color = \"red\" ; } else { color = \"white\" ; } document . body . style . backgroundColor = color ; }, time ); } < /script> < /head> < body > < input type = \"text\" id = \"timeInput\" placeholder = \"Enter time in ms\" > < button onclick = \"changeBackground()\" > Change Background < /button> < /body> < /html> Wahrnehmbare Verz\u00f6gerung ab \\(60 \\text{ ms}\\) ab \\(60 \\text{ ms}\\) nehmen Nutzer:innen eine Verz\u00f6gerung war Diese f\u00fchrt zu einem negativen Nutzererleben H\u00e4ufig kann innerhalb dieser Zeit keine R\u00fcckmeldung der geschalteten Aktoren erfolgen sequenceDiagram User Interface->>Steuerung: Schalte Licht an Steuerung->>LED-Controller: Schalte Licht an Note over User Interface: Wahrnehmbare Verz\u00f6gerung LED-Controller->>Steuerung: Licht ist an Steuerung->>User Interface: Licht ist an sequenceDiagram User Interface->>Steuerung: Schalte Licht an Steuerung->>User Interface: Licht ist an Steuerung->>LED-Controller: Schalte Licht an LED-Controller->>Steuerung: Licht ist an Steuerung->>User Interface: Licht ist wirklich an Aufgaben von Buszugriffsverfahren Quelle Vermeidung von Kollisionen verhindern: deterministische Verfahren wie Polling sorgen daf\u00fcr, das keine Kollisionen stattfinden erkennen: zuf\u00e4llige Verfahren lassen Kollisionen zu, k\u00f6nnen aber damit umgehen Erm\u00f6glichen von Echtzeitf\u00e4higkeit kann garantiert werden, dass die Nachrichten in benennbar Zeit ankommen? Polling: Langsam, aber maximale Zeit kann berechnet und garantiert Zuf\u00e4llige Buszugriffsverfahren: maximale Zeit kann nicht garantiert werden (i.d.R. nicht Echtzeitf\u00e4hig) Quelle Zeitraum oder die Datenl\u00e4nge f\u00fcr einen Kommunikationszyklus und damit maximale Zeitdauer, bis die Daten \u00fcbertragen ist berechenbar Damit w\u00e4re auch eine Schneckenpost echtzeitf\u00e4hig, sofern die die versprochene Zustellzeit garantiert einhalten kann zuf\u00e4llige Buszugriffsverfahren sind i. d. R. nicht echtzeitf\u00e4hig Quelle Deterministische Buszugriffsverfahren deterministisch: Master/Slave-Verfahren Polling (zyklische Abfrage der Slaves) - Nachteil: Langsam! Token Systeme Token-Systeme Als Token, Zugstab, Signalstab, Streckenstab oder Kn\u00fcppel bezeichnet man im Eisen- und Stra\u00dfenbahnwesen ein Objekt, dessen Besitz zum Befahren eines eingleisigen Streckenabschnitts berechtigt . z.B. Innsbrucker Mittelgebirgsbahn Quelle Quelle Token Ring (Logischer Ring) Vorsicht: Logischer Ablauf muss nicht der verbauten Topologie entsprechen Quelle alle Teilnehmer k\u00f6nnen die Kommunikationssteuerung \u00fcbernehmen (Multi-Master) nur Teilnehmer mit Token hat Buszugriffsrecht und agieren dann als Master garantierte Buszugriffszeiten : Sender muss Token nach bestimmter Zeit wieder freigeben einfache Realisierung Kombination mit Master-Slave m\u00f6glich (Token Passing) Quelle \ud83e\udde0 Summenrahmenprotokoll Der Master gibt alle Daten in einem Summenrahmen an alle Slaves Im Summenrahmen ist eine Rahmen f\u00fcr die Inputs und Outputs aller Slaves gegeben garantierte Buszugriffszeiten (deterministischer Prozess) sehr effiziente Busauslastung Quelle Summenrahmenprotokoll Beispiel EtherCat Quelle Ein- und Ausgangsklemmen werden \u00fcber Ethercat angesprochen Hardware wie Ethernet, jedoch mit Summenrahmenprotokoll Quelle Zusammenfassung deterministischer Buszugriffsverfahren Sender vor dem Sendebeginn eindeutig bestimmt Buszuteilung (Sendeerlaubnis) zentral von einer Leitstation (Master/Slave-Verfahren) oder dezentral durch mehrere Steuereinheiten (Tokenbus, Tokenring) Quelle Zuf\u00e4llige Buszugriffsverfahren die sende-willigen Teilnehmer greifen nur bei Bedarf (i.e., zuf\u00e4llig) auf das \u00dcbertragungsmedium zu z.B. bei Taster-Bet\u00e4tigung im Beleuchtungssystem Medium darf nicht anderweitig von einem anderen Teilnehmer belegt sein ( Carrier Sense , CS) Ist dies der Fall, muss die Sendung auf einen sp\u00e4teren Zeitpunkt verschoben werden ( Multiple Access , MA) \ud83e\udde0 Carrier Sense Multiple Access (CS/MA) falls Busleitung belegt , erneuter Versuch zu sp\u00e4teren Zeitpunkt es ist allerdings ungewiss, ob Busleitung beim n\u00e4chsten Versuch frei ist es kann keine maximale Zeit zur Datenbereitstellung garantiert ( keine Echtzeitf\u00e4hig ). \ud83e\udde0 Bus-Kollision Zwei Sender beginnen etwa gleichzeitig mit der Sendung Sendungen kollidieren und zerst\u00f6ren sich gegenseitig ( \u00dcberlagerung der Wellen) Wird erkannt, wenn der Empf\u00e4nger die \u00fcbertragenen Daten auf Fehler \u00fcberpr\u00fcft ( Pr\u00fcfsumme ) Voraussetzung: Sender empfangen ihre eigenen Signale w\u00e4hrend der Sendung. ist es zur Kollision gekommen und die \u00dcbertragung wird sofort eingestellt. ( Collision Detection , CSMA/CD) Kollisionserkennung a: Sendebeginn zum Zeitpunkt \\(t\\) , b: Kollision zum Zeitpunkt \\(t+t_s\\) mit \\(t_s\\) Signallaufzeit, c: Zustand zum Zeitpunkt \\(t + t_S + \\Delta t\\) , d: Zustand zum Zeitpunkt \\(t + 2 t_s\\) Kollisionserkennung der Sender \\(n\\) erkennt die Kollision nach \\(t+t_s\\) Sender \\(1\\) erst zum Zeitpunkt \\(t+ 2 t_s\\) . Pakete die k\u00fcrzer sind als \\(t + 2 t_s\\) werden nicht immer durch die Kollisionserkennung erkannt Aufl\u00f6sen einer Bus-Kollision Nach der Kollisionserkennung \u00fcbertr\u00e4gt der Sender ein kurzes St\u00f6rsignal ( jam ), mit dem er alle anderen Teilnehmer \u00fcber die erkannte Kollision informiert (Broadcast). Alle sende-willigen Teilnehmer stellen dann ihre Sendung f\u00fcr eine zuf\u00e4llige Zeitdauer , die einem ganzzahligen Vielfachen der maximalen doppelten Signallaufzeit entspricht, zur\u00fcck und versuchen dann erneut den Zugriff. Quelle Zeitverhalten mit steigender Busauslastung steigt die Wahrscheinlichkeit einer Kollision Verz\u00f6gerung bis zum Zustellerfolg aller Nachrichten am Beispiel ETHERNET (CSMA/CD) Quelle \u270d\ufe0f Aufgabe 5_2_2: Bewertung eines Buszugriffsverfahrens f\u00fcr sicherheitskritische Anwendungen Welche Ans\u00e4tze gibt es bei einem Bussystem, die Leuchten in einer Notsituation garantiert auf den Zustand leuchtend zuschalten? Annahme, der defekte Schalter sendet dauerhaft den Zustand aus auf den Bus, wenn er sie Chance dazu hat \u2714\ufe0f L\u00f6sung Wenn der defekte Schalter wirklich dauerhaft sendet, dann wird der Bus durch den defekten Schalter blockiert Beim Master-Slave Verfahren w\u00fcrde der Master den defekten Schalter erkennen und die Leuchten auf leuchtend schalten und in der Folge den defekten Schalter nicht mehr ansprechen","title":"Buszugriffsverfahren"},{"location":"5_2_Buszugriffsverfahren/#52-buszugriffsverfahren","text":"","title":"5.2 Buszugriffsverfahren"},{"location":"5_2_Buszugriffsverfahren/#lernziele","text":"Nach dieser Einheit sind Sie in der Lage dazu * das Vorgehen von Client-Server, Token, Summenrahmenprokoll- und CS-MA- Buszugriffsverfahren zu beschreiben * deren Vor- und Nachteile zu benennen * Laufzeiten von Nachrichten auf Buskabeln zu berechnen Quelle","title":"\ud83c\udfaf Lernziele"},{"location":"5_2_Buszugriffsverfahren/#herausforderung","text":"Senden mehre Busteilnehmer zeitgleich, so \u00fcberlagern sich die Spannungs-Pegel auf der Busleitung bzw. die Wellen Inhalt der Telegramme kann nicht mehr entziffert werden Im OSI-Modell Aufgabe der Sicherungs- und Vermittlungsschicht (Schicht 2&3)","title":"Herausforderung"},{"location":"5_2_Buszugriffsverfahren/#clientserver-masterslave-verfahren","text":"Zentrale Bussteuereinheit ( Master , ggf. SPS) stellt Verbindung zu den passiven Teilnehmern (Slaves) her ( Kommunikationssteuerung ) Slaves antworten auf eine Datenanforderung des Masters unmittelbar Polling (zyklische Abfrage) Master mit aktivem Buszugriff geben die Ein-/Ausgabedaten an die Slaves einfaches Protokoll garantierte Buszugriffszeiten (d.h. es ist vorhersagbar, wie lange es dauert bis Information ausgetauscht werden kann) Quelle","title":"Client/Server (Master/Slave-Verfahren)"},{"location":"5_2_Buszugriffsverfahren/#aufgabe-5_2_1-worst-case-beim-polling","text":"Eine zentrale SPS fragt als Master zyklisch alle Werte von Sensoren auf einer Busleitung ab und sendet Befehle insgesamt 255 Slaves, davon 1 Taster T\u00fcr\u00f6ffner 1 Motor T\u00fcr\u00f6ffner Wie lange dauert es im schlimmsten Fall bis die T\u00fcr reagiert?","title":"\u270d\ufe0f Aufgabe 5_2_1: Worst Case beim Polling"},{"location":"5_2_Buszugriffsverfahren/#annahmen","text":"maximale Busleitungsl\u00e4nge: \\(200 \\text{ m}\\) Telegramml\u00e4nge: \\(2\\) Byte [Adresse].[Nachricht] Zykluszeit des Masters und Slaves vernachl\u00e4ssigbar (Antworten unmittelbar) Baud-Rate \\(9.600 \\text{ Baud}\\) (z.B. Dali) Manchester-Code Zykluszeit je Master + Slave: vernachl\u00e4ssigbar Signal-Laufzeit Fortpflanzung des Signals im Leiter mit Lichtgeschwindigkeit wird ebenfalls vernachl\u00e4ssigt","title":"Annahmen"},{"location":"5_2_Buszugriffsverfahren/#losung","text":"Abrufen eines Slaves: \u00dcbertragungszeit (wie lange belegt das Signal die Leitung): 1 Bit pro 2 Baud: \\(4.800 \\frac{\\text{ Bit}}{\\text{s}}\\) In eine Richtung: \\(\\frac{16 \\text{ Bit}}{4800 \\text{ Bit}}\\text{s}=3.3 \\text{ ms}\\) Abrufen aller Salves ( \\(\\text{Bus-Zykluszeit}\\) ): Slaves antworten, nachdem Sie die Nachricht erhalten haben Zeit pro Slave: \\(6.6\\text{ ms}\\) Wenn Befehl direkt weitergeleitet wird, aber die Teilnehmer logisch maximal auseinander: \\(6.6 \\text{ ms} \\cdot 254 = 1.68 \\text{ s}\\) Langsam, aber: es ist garantiert, dass es nicht l\u00e4nger dauert (Echtzeitf\u00e4higes System)!","title":"\u2714\ufe0f L\u00f6sung"},{"location":"5_2_Buszugriffsverfahren/#einfluss-der-bus-zykluszeit-auf-komfort","text":"Kopieren Sie den folgenden Code in: https://jsfiddle.net/ <! DOCTYPE html > < html > < head > < title > Toggle Background Color with Time Delay < /title> < script > var color = \"white\" ; function changeBackground () { var time = document . getElementById ( \"timeInput\" ). value ; setTimeout ( function () { if ( color === \"white\" ) { color = \"red\" ; } else { color = \"white\" ; } document . body . style . backgroundColor = color ; }, time ); } < /script> < /head> < body > < input type = \"text\" id = \"timeInput\" placeholder = \"Enter time in ms\" > < button onclick = \"changeBackground()\" > Change Background < /button> < /body> < /html>","title":"Einfluss der Bus-Zykluszeit auf Komfort"},{"location":"5_2_Buszugriffsverfahren/#wahrnehmbare-verzogerung-ab-60-text-ms","text":"ab \\(60 \\text{ ms}\\) nehmen Nutzer:innen eine Verz\u00f6gerung war Diese f\u00fchrt zu einem negativen Nutzererleben H\u00e4ufig kann innerhalb dieser Zeit keine R\u00fcckmeldung der geschalteten Aktoren erfolgen sequenceDiagram User Interface->>Steuerung: Schalte Licht an Steuerung->>LED-Controller: Schalte Licht an Note over User Interface: Wahrnehmbare Verz\u00f6gerung LED-Controller->>Steuerung: Licht ist an Steuerung->>User Interface: Licht ist an sequenceDiagram User Interface->>Steuerung: Schalte Licht an Steuerung->>User Interface: Licht ist an Steuerung->>LED-Controller: Schalte Licht an LED-Controller->>Steuerung: Licht ist an Steuerung->>User Interface: Licht ist wirklich an","title":"Wahrnehmbare Verz\u00f6gerung ab \\(60 \\text{ ms}\\)"},{"location":"5_2_Buszugriffsverfahren/#aufgaben-von-buszugriffsverfahren","text":"Quelle","title":"Aufgaben von Buszugriffsverfahren"},{"location":"5_2_Buszugriffsverfahren/#vermeidung-von-kollisionen","text":"verhindern: deterministische Verfahren wie Polling sorgen daf\u00fcr, das keine Kollisionen stattfinden erkennen: zuf\u00e4llige Verfahren lassen Kollisionen zu, k\u00f6nnen aber damit umgehen","title":"Vermeidung von Kollisionen"},{"location":"5_2_Buszugriffsverfahren/#ermoglichen-von-echtzeitfahigkeit","text":"kann garantiert werden, dass die Nachrichten in benennbar Zeit ankommen? Polling: Langsam, aber maximale Zeit kann berechnet und garantiert Zuf\u00e4llige Buszugriffsverfahren: maximale Zeit kann nicht garantiert werden (i.d.R. nicht Echtzeitf\u00e4hig) Quelle Zeitraum oder die Datenl\u00e4nge f\u00fcr einen Kommunikationszyklus und damit maximale Zeitdauer, bis die Daten \u00fcbertragen ist berechenbar Damit w\u00e4re auch eine Schneckenpost echtzeitf\u00e4hig, sofern die die versprochene Zustellzeit garantiert einhalten kann zuf\u00e4llige Buszugriffsverfahren sind i. d. R. nicht echtzeitf\u00e4hig Quelle","title":"Erm\u00f6glichen von Echtzeitf\u00e4higkeit"},{"location":"5_2_Buszugriffsverfahren/#deterministische-buszugriffsverfahren","text":"deterministisch: Master/Slave-Verfahren Polling (zyklische Abfrage der Slaves) - Nachteil: Langsam! Token Systeme","title":"Deterministische Buszugriffsverfahren"},{"location":"5_2_Buszugriffsverfahren/#token-systeme","text":"Als Token, Zugstab, Signalstab, Streckenstab oder Kn\u00fcppel bezeichnet man im Eisen- und Stra\u00dfenbahnwesen ein Objekt, dessen Besitz zum Befahren eines eingleisigen Streckenabschnitts berechtigt . z.B. Innsbrucker Mittelgebirgsbahn Quelle Quelle","title":"Token-Systeme"},{"location":"5_2_Buszugriffsverfahren/#token-ring-logischer-ring","text":"Vorsicht: Logischer Ablauf muss nicht der verbauten Topologie entsprechen Quelle alle Teilnehmer k\u00f6nnen die Kommunikationssteuerung \u00fcbernehmen (Multi-Master) nur Teilnehmer mit Token hat Buszugriffsrecht und agieren dann als Master garantierte Buszugriffszeiten : Sender muss Token nach bestimmter Zeit wieder freigeben einfache Realisierung Kombination mit Master-Slave m\u00f6glich (Token Passing) Quelle","title":"Token Ring (Logischer Ring)"},{"location":"5_2_Buszugriffsverfahren/#summenrahmenprotokoll","text":"Der Master gibt alle Daten in einem Summenrahmen an alle Slaves Im Summenrahmen ist eine Rahmen f\u00fcr die Inputs und Outputs aller Slaves gegeben garantierte Buszugriffszeiten (deterministischer Prozess) sehr effiziente Busauslastung","title":"\ud83e\udde0 Summenrahmenprotokoll"},{"location":"5_2_Buszugriffsverfahren/#quelle","text":"","title":"Quelle"},{"location":"5_2_Buszugriffsverfahren/#summenrahmenprotokoll-beispiel-ethercat","text":"Quelle Ein- und Ausgangsklemmen werden \u00fcber Ethercat angesprochen Hardware wie Ethernet, jedoch mit Summenrahmenprotokoll Quelle","title":"Summenrahmenprotokoll Beispiel EtherCat"},{"location":"5_2_Buszugriffsverfahren/#zusammenfassung-deterministischer-buszugriffsverfahren","text":"Sender vor dem Sendebeginn eindeutig bestimmt Buszuteilung (Sendeerlaubnis) zentral von einer Leitstation (Master/Slave-Verfahren) oder dezentral durch mehrere Steuereinheiten (Tokenbus, Tokenring) Quelle","title":"Zusammenfassung deterministischer Buszugriffsverfahren"},{"location":"5_2_Buszugriffsverfahren/#zufallige-buszugriffsverfahren","text":"die sende-willigen Teilnehmer greifen nur bei Bedarf (i.e., zuf\u00e4llig) auf das \u00dcbertragungsmedium zu z.B. bei Taster-Bet\u00e4tigung im Beleuchtungssystem Medium darf nicht anderweitig von einem anderen Teilnehmer belegt sein ( Carrier Sense , CS) Ist dies der Fall, muss die Sendung auf einen sp\u00e4teren Zeitpunkt verschoben werden ( Multiple Access , MA)","title":"Zuf\u00e4llige Buszugriffsverfahren"},{"location":"5_2_Buszugriffsverfahren/#carrier-sense-multiple-access-csma","text":"falls Busleitung belegt , erneuter Versuch zu sp\u00e4teren Zeitpunkt es ist allerdings ungewiss, ob Busleitung beim n\u00e4chsten Versuch frei ist es kann keine maximale Zeit zur Datenbereitstellung garantiert ( keine Echtzeitf\u00e4hig ).","title":"\ud83e\udde0 Carrier Sense Multiple Access (CS/MA)"},{"location":"5_2_Buszugriffsverfahren/#bus-kollision","text":"Zwei Sender beginnen etwa gleichzeitig mit der Sendung Sendungen kollidieren und zerst\u00f6ren sich gegenseitig ( \u00dcberlagerung der Wellen) Wird erkannt, wenn der Empf\u00e4nger die \u00fcbertragenen Daten auf Fehler \u00fcberpr\u00fcft ( Pr\u00fcfsumme ) Voraussetzung: Sender empfangen ihre eigenen Signale w\u00e4hrend der Sendung. ist es zur Kollision gekommen und die \u00dcbertragung wird sofort eingestellt. ( Collision Detection , CSMA/CD)","title":"\ud83e\udde0 Bus-Kollision"},{"location":"5_2_Buszugriffsverfahren/#kollisionserkennung","text":"a: Sendebeginn zum Zeitpunkt \\(t\\) , b: Kollision zum Zeitpunkt \\(t+t_s\\) mit \\(t_s\\) Signallaufzeit, c: Zustand zum Zeitpunkt \\(t + t_S + \\Delta t\\) , d: Zustand zum Zeitpunkt \\(t + 2 t_s\\)","title":"Kollisionserkennung"},{"location":"5_2_Buszugriffsverfahren/#kollisionserkennung_1","text":"der Sender \\(n\\) erkennt die Kollision nach \\(t+t_s\\) Sender \\(1\\) erst zum Zeitpunkt \\(t+ 2 t_s\\) . Pakete die k\u00fcrzer sind als \\(t + 2 t_s\\) werden nicht immer durch die Kollisionserkennung erkannt","title":"Kollisionserkennung"},{"location":"5_2_Buszugriffsverfahren/#auflosen-einer-bus-kollision","text":"Nach der Kollisionserkennung \u00fcbertr\u00e4gt der Sender ein kurzes St\u00f6rsignal ( jam ), mit dem er alle anderen Teilnehmer \u00fcber die erkannte Kollision informiert (Broadcast). Alle sende-willigen Teilnehmer stellen dann ihre Sendung f\u00fcr eine zuf\u00e4llige Zeitdauer , die einem ganzzahligen Vielfachen der maximalen doppelten Signallaufzeit entspricht, zur\u00fcck und versuchen dann erneut den Zugriff. Quelle","title":"Aufl\u00f6sen einer Bus-Kollision"},{"location":"5_2_Buszugriffsverfahren/#zeitverhalten","text":"mit steigender Busauslastung steigt die Wahrscheinlichkeit einer Kollision Verz\u00f6gerung bis zum Zustellerfolg aller Nachrichten am Beispiel ETHERNET (CSMA/CD) Quelle","title":"Zeitverhalten"},{"location":"5_2_Buszugriffsverfahren/#aufgabe-5_2_2-bewertung-eines-buszugriffsverfahrens-fur-sicherheitskritische-anwendungen","text":"Welche Ans\u00e4tze gibt es bei einem Bussystem, die Leuchten in einer Notsituation garantiert auf den Zustand leuchtend zuschalten? Annahme, der defekte Schalter sendet dauerhaft den Zustand aus auf den Bus, wenn er sie Chance dazu hat","title":"\u270d\ufe0f Aufgabe 5_2_2:  Bewertung eines Buszugriffsverfahrens f\u00fcr sicherheitskritische Anwendungen"},{"location":"5_2_Buszugriffsverfahren/#losung_1","text":"Wenn der defekte Schalter wirklich dauerhaft sendet, dann wird der Bus durch den defekten Schalter blockiert Beim Master-Slave Verfahren w\u00fcrde der Master den defekten Schalter erkennen und die Leuchten auf leuchtend schalten und in der Folge den defekten Schalter nicht mehr ansprechen","title":"\u2714\ufe0f L\u00f6sung"},{"location":"5_3_Uebertragungssicherheit/","text":"img[alt~=\"center\"] { display: block; margin: 0 auto; } 5.3 \u00dcbertragungssicherheit \ud83c\udfaf Lernziele Nach dieser Einheit sind Sie in der Lage dazu * verschiedene Fehlertypen bei der Daten\u00fcbertragung unterscheiden * Ma\u00dfnahmen zur Erkennung und Behebung von \u00dcbertragungsfehlern beschreiben * die Hamming-Distanz verschiedener Codes ermitteln \ud83e\udde0 Informationsgehalt von Telegrammen Unterscheidet sich je nach Bussystem, \u00fcblich sind unter anderem: Steuerfeld : Priorit\u00e4t der Nachricht Quelladresse : Absender (vgl. MAC-Adresse) Zieladresse : Empf\u00e4nger (vgl. MAC-Adresse) Routing Z\u00e4hler : Z\u00e4hlt wie oft \u00fcber Koppler gesendet Nutzinformation : Eigentlich Information (z.B. Messwerte eines Sensor) Sicherungs-Feld : Wurden die Daten richtig \u00fcbertragen (vgl. Hash) Datensicherung Gesendet: 010000010000001110000000 Empfangen 1: 010000110000001110000000 Empfangen 2: 01000010000001110000000 - Bit k\u00f6nnen aus verschiedenen Gr\u00fcnden verloren gehen (z.B. St\u00f6rung durch Elektromagnetische Felder, Probleme mit der Taktung, etc.) * wie stellt man sicher, dass keine Daten verloren gehen oder korrumpiert werden? * OSI-Schicht 1: technische Vorkehrungen die Wahrscheinlichkeit von St\u00f6rungen, z. B. durch geschirmte Kabel, Glasfaserkabel, potentialfreie \u00dcbertragung. * OSI-Schicht 2: \u00dcberwachung der Nachricht auf Fehler und Gegenma\u00dfnahmen \ud83e\udde0 Fehlerarten Wir betrachten im Folgenden stets transparente ( bitorientierte ) Codes. (d.h. jede Bitkombination ist erlaubt und sinnvoll) Bitfolge allein l\u00e4sst nicht auf einen eventuellen Fehler schlie\u00dfen Es gibt drei Arten von Fehlern Fehlerma\u00dfe Bitfehlerrate \\(p\\) \\(p = \\frac{Anzahl \\ der \\ fehlerhaften \\ Bits}{Gesamtzahl \\ der \\ gesendeten \\ Bits}\\) Der ung\u00fcnstigste Wert \\(p = 0.5\\) . Jedes zweite Bit ist dann im Mittel gest\u00f6rt, die Nachricht also wertlos w\u00e4re \\(p=1\\) : 001 : 110 realistischer Wert \\(p = 10^{-4}\\) Erkennen von \u00dcbertragungsfehlern Ob Fehler erkennbar sind, h\u00e4ngt auch davon ab, wie die Information codiert wurde Code: z.B. Deutsche Sprache Fehler ist offensichtlich: Mein , Tein Fehler ist nicht erkennbar: Mein , Dein Fehler ist erkennbar und korrigierbar: Gxb\u00e4ude , Geb\u00e4ude Codes k\u00f6nnen so definiert, werden, dass das Auftreten einzelner \u00dcbertragungsfehler offensichtlich wird. 00 : Schalter ein 01 : nicht definiert 10 : nicht definiert 11 : Schalter aus Die Schalterstellung kann nicht verwechselt werden (bei einem Ein-Bit-Fehler) Hamming-Abstand Unter dem Hamming-Abstand \\(H\\) eines Codes versteht man das Minimum aller Abst\u00e4nde zwischen verschiedenen W\u00f6rtern innerhalb des Codes Abstand : An wie vielen Stellen muss ein Wort ver\u00e4ndert werden \\(H(\\{ 00,11\\})=2\\) \\(H(\\{ 00,01,10,11\\})=1\\) \\(H(\\{ 00110,00100\\})=1\\) \\(H(\\{ '12345','13349'\\})=2\\) \\(H(\\{ 'Haus','Baum', 'Tier'\\})=2\\) Quelle Anwendung des Hamming-Abstand zur Fehlererkennung Ein Code besteht aus folgenden drei W\u00f6rtern: aus , ein , sie Der kleinste der drei Abst\u00e4nde ist 2, also ist der Hamming-Abstand des Codes ebenfalls gleich \\(h=2\\) (zwischen ein , sie ). Bei Codes mit Hamming-Abstand h=2 k\u00f6nnen alle 1 -Bit-Fehler erkannt werden. D.h. der ver\u00e4nderte Code kann mit keinem anderen Wort verwechselt werden ( _ie , s_e , si_ ) Ein 2 -Bit-Fehler kann nicht immer erkannt werden ( ein , _i_ , sie ) \u270d\ufe0f Aufgabe 5_3_1: Drehschalter Drehschalter vier Einstellm\u00f6glichkeiten werden als bin\u00e4re Zahl (Codewort) an einen Empf\u00e4nger \u00fcbermittelt: 00 , 01 , 10 , 11 Empf\u00e4nger erh\u00e4lt das Codewort, hat sonst keine M\u00f6glichkeit, die Schalterstellung zu \u00fcberpr\u00fcfen Quelle 00 , 01 , 10 , 11 Hamming-Abstand zwischen den vier Worten ist jeweils 1, d. h. falls durch einen Fehler nur ein Bit umgekehrt wird, erh\u00e4lt der Empf\u00e4nger zwar ein anderes, aber ebenso g\u00fcltiges Codewort Angenommen es treten nur Einfachfehler auf (es wird also maximal ein Bit geflippt) Kann man einen bin\u00e4ren Code entwickeln, der es nicht nur erm\u00f6glicht Fehler zu erkennen, sondern diese auch zu beheben? \u2714\ufe0f L\u00f6sung Um Einfachfehler zu korrigieren ben\u00f6tigt man einen Code, der einen Hamming-Abstand \u2265 3 hat: z. B. 11000000 , 00110000 , 00001100 , 00000011 . Einfachfehler k\u00f6nnen nur erkannt und behoben werden: 10000000 --> 11000000 11100000 --> 11000000 10110000 --> 00110000 Parit\u00e4tsbit zur Fehlererkennung Wir senden eine Zahl mit 4 Bit, z. B. 0010 ( \\(2_{10}\\) ) Zahl der positiven Bits im Bin\u00e4rcode ist ungerade Parit\u00e4tsbit E=1 (even = True) wird hinzugef\u00fcgt (Parit\u00e4ts-/ Evenbit ist 1, wenn einegerade Zahl von Bit \u00fcbertagen werden) und mit \u00fcbertragen Alle ungeraden Anzahlen an Fehlern werden erkannt: Original: 0010 - E=1 - erwartet E=1 1 Fehler: 0011 - E=1 - erwartet E=0 1 Fehler: 0010 - E=0 - erwartet E=1 2 Fehler: 1010 - E=1 - erwartet E=1 Blocksicherung Anstelle nur nach allen X-Bits eine Parit\u00e4tsbit einzuf\u00fcgen wird auch ein spaltenweises Parit\u00e4tsbit Quelle \u25b6\ufe0f 3Blue1Brown: A discovery-oriented introduction to error correction code","title":"\u00dcbertragungssicherheit"},{"location":"5_3_Uebertragungssicherheit/#53-ubertragungssicherheit","text":"","title":"5.3 \u00dcbertragungssicherheit"},{"location":"5_3_Uebertragungssicherheit/#lernziele","text":"Nach dieser Einheit sind Sie in der Lage dazu * verschiedene Fehlertypen bei der Daten\u00fcbertragung unterscheiden * Ma\u00dfnahmen zur Erkennung und Behebung von \u00dcbertragungsfehlern beschreiben * die Hamming-Distanz verschiedener Codes ermitteln","title":"\ud83c\udfaf Lernziele"},{"location":"5_3_Uebertragungssicherheit/#informationsgehalt-von-telegrammen","text":"Unterscheidet sich je nach Bussystem, \u00fcblich sind unter anderem: Steuerfeld : Priorit\u00e4t der Nachricht Quelladresse : Absender (vgl. MAC-Adresse) Zieladresse : Empf\u00e4nger (vgl. MAC-Adresse) Routing Z\u00e4hler : Z\u00e4hlt wie oft \u00fcber Koppler gesendet Nutzinformation : Eigentlich Information (z.B. Messwerte eines Sensor) Sicherungs-Feld : Wurden die Daten richtig \u00fcbertragen (vgl. Hash)","title":"\ud83e\udde0 Informationsgehalt von Telegrammen"},{"location":"5_3_Uebertragungssicherheit/#datensicherung","text":"Gesendet: 010000010000001110000000 Empfangen 1: 010000110000001110000000 Empfangen 2: 01000010000001110000000 - Bit k\u00f6nnen aus verschiedenen Gr\u00fcnden verloren gehen (z.B. St\u00f6rung durch Elektromagnetische Felder, Probleme mit der Taktung, etc.) * wie stellt man sicher, dass keine Daten verloren gehen oder korrumpiert werden? * OSI-Schicht 1: technische Vorkehrungen die Wahrscheinlichkeit von St\u00f6rungen, z. B. durch geschirmte Kabel, Glasfaserkabel, potentialfreie \u00dcbertragung. * OSI-Schicht 2: \u00dcberwachung der Nachricht auf Fehler und Gegenma\u00dfnahmen","title":"Datensicherung"},{"location":"5_3_Uebertragungssicherheit/#fehlerarten","text":"Wir betrachten im Folgenden stets transparente ( bitorientierte ) Codes. (d.h. jede Bitkombination ist erlaubt und sinnvoll) Bitfolge allein l\u00e4sst nicht auf einen eventuellen Fehler schlie\u00dfen Es gibt drei Arten von Fehlern","title":"\ud83e\udde0 Fehlerarten"},{"location":"5_3_Uebertragungssicherheit/#fehlermae","text":"Bitfehlerrate \\(p\\) \\(p = \\frac{Anzahl \\ der \\ fehlerhaften \\ Bits}{Gesamtzahl \\ der \\ gesendeten \\ Bits}\\) Der ung\u00fcnstigste Wert \\(p = 0.5\\) . Jedes zweite Bit ist dann im Mittel gest\u00f6rt, die Nachricht also wertlos w\u00e4re \\(p=1\\) : 001 : 110 realistischer Wert \\(p = 10^{-4}\\)","title":"Fehlerma\u00dfe"},{"location":"5_3_Uebertragungssicherheit/#erkennen-von-ubertragungsfehlern","text":"Ob Fehler erkennbar sind, h\u00e4ngt auch davon ab, wie die Information codiert wurde Code: z.B. Deutsche Sprache Fehler ist offensichtlich: Mein , Tein Fehler ist nicht erkennbar: Mein , Dein Fehler ist erkennbar und korrigierbar: Gxb\u00e4ude , Geb\u00e4ude Codes k\u00f6nnen so definiert, werden, dass das Auftreten einzelner \u00dcbertragungsfehler offensichtlich wird. 00 : Schalter ein 01 : nicht definiert 10 : nicht definiert 11 : Schalter aus Die Schalterstellung kann nicht verwechselt werden (bei einem Ein-Bit-Fehler)","title":"Erkennen von \u00dcbertragungsfehlern"},{"location":"5_3_Uebertragungssicherheit/#hamming-abstand","text":"Unter dem Hamming-Abstand \\(H\\) eines Codes versteht man das Minimum aller Abst\u00e4nde zwischen verschiedenen W\u00f6rtern innerhalb des Codes Abstand : An wie vielen Stellen muss ein Wort ver\u00e4ndert werden \\(H(\\{ 00,11\\})=2\\) \\(H(\\{ 00,01,10,11\\})=1\\) \\(H(\\{ 00110,00100\\})=1\\) \\(H(\\{ '12345','13349'\\})=2\\) \\(H(\\{ 'Haus','Baum', 'Tier'\\})=2\\) Quelle","title":"Hamming-Abstand"},{"location":"5_3_Uebertragungssicherheit/#anwendung-des-hamming-abstand-zur-fehlererkennung","text":"Ein Code besteht aus folgenden drei W\u00f6rtern: aus , ein , sie Der kleinste der drei Abst\u00e4nde ist 2, also ist der Hamming-Abstand des Codes ebenfalls gleich \\(h=2\\) (zwischen ein , sie ). Bei Codes mit Hamming-Abstand h=2 k\u00f6nnen alle 1 -Bit-Fehler erkannt werden. D.h. der ver\u00e4nderte Code kann mit keinem anderen Wort verwechselt werden ( _ie , s_e , si_ ) Ein 2 -Bit-Fehler kann nicht immer erkannt werden ( ein , _i_ , sie )","title":"Anwendung des Hamming-Abstand zur Fehlererkennung"},{"location":"5_3_Uebertragungssicherheit/#aufgabe-5_3_1-drehschalter","text":"Drehschalter vier Einstellm\u00f6glichkeiten werden als bin\u00e4re Zahl (Codewort) an einen Empf\u00e4nger \u00fcbermittelt: 00 , 01 , 10 , 11 Empf\u00e4nger erh\u00e4lt das Codewort, hat sonst keine M\u00f6glichkeit, die Schalterstellung zu \u00fcberpr\u00fcfen Quelle 00 , 01 , 10 , 11 Hamming-Abstand zwischen den vier Worten ist jeweils 1, d. h. falls durch einen Fehler nur ein Bit umgekehrt wird, erh\u00e4lt der Empf\u00e4nger zwar ein anderes, aber ebenso g\u00fcltiges Codewort Angenommen es treten nur Einfachfehler auf (es wird also maximal ein Bit geflippt) Kann man einen bin\u00e4ren Code entwickeln, der es nicht nur erm\u00f6glicht Fehler zu erkennen, sondern diese auch zu beheben?","title":"\u270d\ufe0f Aufgabe 5_3_1: Drehschalter"},{"location":"5_3_Uebertragungssicherheit/#losung","text":"Um Einfachfehler zu korrigieren ben\u00f6tigt man einen Code, der einen Hamming-Abstand \u2265 3 hat: z. B. 11000000 , 00110000 , 00001100 , 00000011 . Einfachfehler k\u00f6nnen nur erkannt und behoben werden: 10000000 --> 11000000 11100000 --> 11000000 10110000 --> 00110000","title":"\u2714\ufe0f L\u00f6sung"},{"location":"5_3_Uebertragungssicherheit/#paritatsbit-zur-fehlererkennung","text":"Wir senden eine Zahl mit 4 Bit, z. B. 0010 ( \\(2_{10}\\) ) Zahl der positiven Bits im Bin\u00e4rcode ist ungerade Parit\u00e4tsbit E=1 (even = True) wird hinzugef\u00fcgt (Parit\u00e4ts-/ Evenbit ist 1, wenn einegerade Zahl von Bit \u00fcbertagen werden) und mit \u00fcbertragen Alle ungeraden Anzahlen an Fehlern werden erkannt: Original: 0010 - E=1 - erwartet E=1 1 Fehler: 0011 - E=1 - erwartet E=0 1 Fehler: 0010 - E=0 - erwartet E=1 2 Fehler: 1010 - E=1 - erwartet E=1","title":"Parit\u00e4tsbit zur Fehlererkennung"},{"location":"5_3_Uebertragungssicherheit/#blocksicherung","text":"Anstelle nur nach allen X-Bits eine Parit\u00e4tsbit einzuf\u00fcgen wird auch ein spaltenweises Parit\u00e4tsbit Quelle \u25b6\ufe0f 3Blue1Brown: A discovery-oriented introduction to error correction code","title":"Blocksicherung"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/","text":"5.4 Bussysteme in der Ge\u00e4udeautomation Digital Addressable Lighting Interface (DALI) \ud83c\udfaf Lernziele Nach dieser Einheit sind Sie in der Lage dazu - Komponenten zum Aufbau eines DALI-Systems ausw\u00e4hlen - die Grundlagen von Szenen und Gruppensteuerung beschreiben - geeigneten Leitungsdurchmesser/L\u00e4nge einer DALI-Installation bestimmen DALI Grund-Komponenten Stromversorgung (DALI PS1) - Alternativ \u00fcber Klemme oder Netzteil Steuerkontroller (links): Mikrocontoller mit Buszugriff mit Tastern oder anderen Schnittstellen verbunden LED oder Leuchten-Treiber (rechts): Mikrocontoller und Versorger der Leuchtmittel mit Energie DALI-USB: Schnittstelle zur Programmierung ggf. ersetzt durch SPS zur Steuerung des Bussystems Quelle Protokoll f\u00fcr lichttechnische Betriebsger\u00e4te kein gesamtheitliches Bussystem f\u00fcr Geb\u00e4udesystemtechnik dezentrales Lichtmanagement f\u00fcr max. 64 Teilnehmer (Betriebsger\u00e4te) mit frei definierbaren 16 Gruppen und 16 Szenen \u00fcber Gateways auch in die Geb\u00e4udesystemtechnik (KNX, BACnet, etc,) integrierbar Gruppen Mehrere Leuchtmittel werden zusammengefasst und k\u00f6nnen \u00fcber eine gemeinsame Gruppen-Adresse angesprochen Quelle Szenen Vordefinierte Einstellungen f\u00fcr verschiedene Gruppen und Leuchtmittel f\u00fcr bestimmte Situationen Quelle Technische Grundlagen Separates Kabel mit zwei Signaleitern und Spannungsversorgung Spannung der Busleitung \\(9,5 - 22,4 \\text{ V}\\) Systemstrom max. \\(250 \\text{ mA}\\) (zur Versorgung keiner Betriebsger\u00e4te z.B. Steuerger\u00e4te f\u00fcr Schalter) Daten\u00fcbertragungsgeschwindigkeit \\(1200 \\text{ Baud}\\) Maximale einfache Leitungsl\u00e4nge \\(300 \\text{ m}\\) (bei \\(1.5 \\text{ mm\u00b2}\\) ) Aufbau Quelle Merkmale von DALI Installation: Versorgungs- und Steueradern k\u00f6nnen zusammen im selben Kabel verlegt werden. Die Verdrahtung kann in Reihe, sternf\u00f6rmig oder in einer gemischten Form erfolgen. Keine Polarit\u00e4t: Die Polarit\u00e4t (DA+/DA-) der DALI-Steuerleitung muss nicht beachtet werden Verteilte Intelligenz : Jeder Controller arbeitet als \"Master\" und kontrolliert dabei die Kommunikation auf ( Multi-Master ) der Steuerleitung. Gewisse Parameter sind dabei direkt im DALI-Betriebsger\u00e4t abgelegt (z.B. Szenenwerte, Gruppenadresse). Quelle Technische Hintergr\u00fcnde Kodierung: Manchester-Codierung High Pegel (idle): \\(9.5 \\text{ bis } 22.5 \\text{ V}\\) Low Pegel: \\(-6.5 \\text{ bis } 6.5 \\text{ V}\\) Buszugriff: Multi-Master CS/MA - CA Echtzeitf\u00e4hig? nein Quelle Telegramm-Format Quelle FF: Forward Frame eines Masters BF: Backward Frame Antwort eines Slaves 16-und-24-Bit-Telegramme: Ger\u00e4te zu konfigurieren, Parameter abzufragen oder Steuerbefehle oder Ereignisse Quelle 1-1-01110... Quelle Stromversorgung Versorgt den gesamten DALI-DALI-Kreis mit 24 V Gleichstrom z.B. Leuchtmittel >5 W, Steuercontroller Steuermodule Bieten Eing\u00e4nge f\u00fcr Taster (Lichtschalter) K\u00f6nnen Logik f\u00fcr die Steuerung basierend auf den Eingaben ausf\u00fchren Steuermodule Betriebsarten Betriebsart Beschreibung MC Einfachtaster und/oder Doppeltaster und/oder Schalter SC-A Einfachtaster f\u00fcr Szenenaufruf GC-A Einfachtaster und/oder Doppeltaster f\u00fcr Leuchtengruppen ein/aus/gedimmt TuWh Doppeltaster f\u00fcr Intensit\u00e4t und Farbtemperatur von \"Tunable White\" Quelle Touchpanele Erm\u00f6glichen komplexere Eingaben als einfache Taster Ausgaben m\u00f6glich: z.B. aktuelle Szene mit mit Licht hinterlegen Sensoren Erfassen Umweltparameter, wie Helligkeit und Bewegungen Betriebsger\u00e4te Steuerung und/oder Stromversorgung von Leuchtmitteln (z.B. LEDs) Teilweise Transformatoren und Gleichrichter f\u00fcr \\(230V / AC\\) Mehrere Betriebsger\u00e4te k\u00f6nnen zu einer Gruppe zusammengefasst werden Technischer Rahmen einer Installation Max. 64 DALI-Betriebsger\u00e4te ( \\(2^6\\) Adressen) Max. 16 DALI-Gruppen ( \\(2^4\\) Adressen) Max. 16 DALI-Szenen ( \\(2^4\\) Adressen) Maximaler Strom der Stromversorgung (DALI PS1: \\(200 \\text{ mA}\\) bzw. DALI PS2 \\(240 \\text{ mA}\\) ). Max. Leitungsl\u00e4nge aus Spannungsabfall ( \\(2 \\text{ V}\\) d.h. \\(300 \\text{ m}\\) bei \\(1,5 \\text{ mm\u00b2}\\) ) Stromaufnahme berechnen Ist die Stromversorgung stark genug f\u00fcr alle Betriebsmittel? Hierbei sind nur die Controller gemeint, die durch die DALI-Leitung versorgt werden Quelle 1. Stromaufnahme absch\u00e4tzen Jedes Ger\u00e4t im DALI-Kreis nimmt \u00fcber den DALI-Kreis Strom auf (parallel) Die Stromaufnahme der Steuer- und Betriebsger\u00e4te aus Datenblatt (ca. \\(2 \\text{ mA}\\) ). maximalen Strom der Stromversorgung z.B. DALI PS1 ( \\(200 \\text{ mA}\\) ) Beispiel: DALI-Kreis mit 24 dimmbaren LED Treibern (LCA), 6 DALI XC Gesamtstrom = Summe Stromaufnahme DALI Betriebsger\u00e4te + Summe Stromaufnahme DALI Steuerger\u00e4te Gesamtstrom = 24 x Vorschaltger\u00e4te + 6 x DALI XC Gesamtstrom = \\(24 x 2 \\text{ mA} + 6 x 6 \\text{ mA} = 84 \\text{ mA}\\) 2. Maximale Kabell\u00e4nge berechnen Spannungsabfall durch Kabel darf \\(2 \\text{ V}\\) nicht \u00fcberschreiten Berechnung des Spannungsabfalls: \\(U_v = R I = \\frac{2 \\cdot l }{\\gamma \\cdot S}\\cdot I\\) \\(U_v\\) Spannungsabfall in V \\(I\\) Strom in A \\(S\\) Querschnitt in \\(mm^2\\) \\(l\\) Leitungsl\u00e4nge in m \\(\\gamma\\) Elektrische Leitf\u00e4higkeit in \\(\\frac{m}{\\Omega \\cdot mm }\\) , bei Kupferleitungen: \\(56\\frac{m}{\\Omega \\cdot mm }\\) Beispiel: DALI-Kreis mit einer Leitungsl\u00e4nge von \\(300 m\\) und einem Drahtquerschnitt von \\(1.5 mm^2\\) und maximalem Strom von 250 mA \\(U_v = \\frac{2 \\cdot l \\cdot I}{\\gamma \\cdot S} = \\frac{2 \\cdot 300 m \\cdot 0.25 A}{56 \\frac{m}{\\Omega mm^2} \\cdot 1.5 mm^2} = 1.786 V\\) Spannungsabfall \u00fcber Kabel ist kleiner als \\(2V\\) Verdrahtung handels\u00fcbliches Installationsmaterial 2 Adern f\u00fcr DALI-Steuerkreis Quelle Anschluss auf Polarit\u00e4t der DALI-Leitung muss nicht beachtet werden DALI-Signal ist nicht SELV . Es gelten die Installationsvorschriften f\u00fcr Niederspannung. Quelle Safety Extra Low Voltage = Sicherheitskleinspannung) bezeichnet Spannungen, die aufgrund ihrer geringen Spannungsh\u00f6he und Isolierung besonderen Schutz gegen elektrischen Schlag bieten Konfiguration Bussysteme werden in der Regel nicht programmiert, sondern anhand von bestehenden Bausteinen einer SPS oder hersteller-spezifischer Software konfiguriert Jedem Ger\u00e4t werden bestimmte Eigenschaftswerte zugewiesen Steuer-Controller: F\u00fcr welche Funktion ist der Schalter zust\u00e4ndig (Szenen, Gruppen, Dimmen) F\u00fcr welche Leuchtmittel und Gruppen ist der Schalter genau zust\u00e4ndig LED-Controller: Zuordnung zu Szenen und Gruppen Zuordnung von Leuchtwerten Software-seitige Konfiguration Je nach Bussystem stellen verschiedene Anbieter, verschiedene Softwarel\u00f6sungen bereit. Individualadressen und Gruppen jeder DALI Teilnehmer hat eine (von 64) Individualadressen Mit der Individualadresse kann jedes einzelne Betriebsger\u00e4t identifiziert und angesteuert werden. Mehrkanaligen Betriebsger\u00e4ten sind ggf. mehrere Adressen zuzuordnen (z.B. Dimmen + Farbe oder Warm- + Kaltwei\u00df ) Zus\u00e4tzlich zu den Individualadressen bis zu 16 Gruppenadressen Szenen bis zu 16 Lichtszenen (Einstellung verschiedener Beleuchtungssituationen) jedem Vorschaltger\u00e4t kann ein individueller Lichtwert je Szene hinterlegt werden Lichtszenen unabh\u00e4ngig von der Gruppenzuordnung Quelle Farbsteuerung M\u00f6gliche Farbkan\u00e4le RGB: Drei Kan\u00e4le f\u00fcr rote, gr\u00fcne und blaue LEDs RGBW: RGB + wei\u00dfen Lichtquelle (4) RGBWW: Wei\u00df-Wei\u00df (tunable white) f\u00fcr die W\u00e4rme-Steuerung des wei\u00dfen Lichts (2) Ansteuerung: DT6: Jeder Farbkanal hat eine eigene DALI-Adresse . Statt 64 k\u00f6nnen bei RGBW nur nuch 16 Leuchtmittel gesteuert werden DT8: Nur eine Adresse pro Ger\u00e4t Anwendungsbeispiel Besprechungszimmer Besprechungszimmer f\u00fcr ca. 10 Personen 6 LED Langfeldleuchten und 2 LED Downlights . je eine Gruppe f\u00fcr Langfeldleuchten und Downlights Bedienung an T\u00fcr: DALI XC (SC Modus) mit den Szenen \u201e Beleuchtung ein \" und \u201e Beleuchtung aus \" an Fensterfront 2 DALI XC (SC und GC): Aufrufen von vier Szenen und das individuelle Dimmen der beiden Leuchtengruppen . Quelle St\u00fcckliste Pos. St\u00fcck Artikelbezeichnung 1 1 DALI Stromversorgung DALI PS1 / DALI PS2 2 2 DALI XC in SC Modus (Szenenkontroller) DALI XC 3 1 DALI XC in GC Modus (Gruppenkontroller) DALI XC 4 6 DALI LED Betriegsger\u00e4t f\u00fcr Langfeldleuchte LCAI one4all 5 2 DALI LED Betriebsger\u00e4t f\u00fcr LED Downlights LCAI one4all Quelle Checkliste DALI Bedingung Im Objekt geplant / vorhanden OK? Max. 64 DALI Betriebsger\u00e4te 8 DALI Betriebsger\u00e4te Max. 16 Gruppen 2 Gruppen Max. 16 Szenen 4 Szenen Strom DALI-Kreis < Nennstrom Power Supply 34 mA Leitungsl\u00e4nge < 300 m (bei 1,5mm\u00b2) ca. 20m 5 Adern zu jeder Leuchte 5 x 1,5mm\u00b2 DALI LED Betriebsger\u00e4t in Leuchte Tridonic LCAI one4all Quelle Gruppierung Komponente Zuordnung Downlights Gruppe 1 Langfeldleuchten Gruppe 2 an Fensterfront DALI XC (GC): individuelle Dimmen der beiden Leuchtengruppen . 4 Taster, je zwei f\u00fcr jede Gruppe Quelle Szenenzuordnung an T\u00fcr: DALI XC (SC Modus) mit den Szenen \u201e Beleuchtung ein \" und \u201e Beleuchtung aus \" an Fensterfront 1 DALI XC (SC): Aufrufen von vier Szenen individuelle Dimmen der beiden Leuchtengruppen . Bedienstelle T\u00fcr Bedienstelle Leinwand G1 G2 Szene 1 Licht aus Licht aus 0 % 0% Szene 2 Licht 100 % Licht 100 % 100% 100% Szene 3 nicht verdrahtet Pr\u00e4sentation 50% 20 % Szene 4 nicht verdrahtet Besprechung 0% 100% Quelle Inbetriebnahme Die Programmierung kann auf zwei Arten erfolgen Schalter im Programmiermodus PC-Anbindung mit Software Quelle Ergebnis Quelle DALI 2 abw\u00e4rtskompatibel Input Devices (Sensoren) kommunizieren nicht mehr direkt mit DALI-Treibern an Leuchtmitteln Application controller verarbeiten zuerst (Multimaster Prinzip) Kollisions-Erkennung Ausfallsicherheit da Bussysteme aus mehreren Komponenten bestehen, wird das Fehlermanagement komplexer Single-Point-of-Failure: Ein Teil des Systems, dessen Ausfall zum Totalversagen f\u00fchren kann Neben redundanter Auslegung kann eine Fehler-Analyse helfen resiliente Systeme zu entwerfen Einfluss-Analyse was-w\u00e4re-wenn ? F\u00fcr jede Komponente wird untersucht: was passiert, wenn diese Komponente ausf\u00e4llt Was w\u00e4re der gew\u00fcnschte Zustand des Systems? (i.d.R. festgelegt durch die Aktoren) Beispiel: Beleuchtung in Treppenh\u00e4usern Licht sollte nicht ohne Bedarf brennen Licht kann \u00fcber Taster, Bewegungsmelder oder GLT aktiviert werden In der GLT kann der Systemzustand \u00fcberwacht werden im Falle eines Notfalls muss das Licht in jedem Fall brennen Buskomponenten Komponente \\ Aktoren 1 Beleuchtung Notausgang 2 Anzeige Geb\u00e4udeleittechnik Wie wird 1 erreicht? Wie wird 2 erreicht? LED AN Defekte Lampe wird angezeigt Vorschaltger\u00e4t AN Defektes Vorschaltger\u00e4t wird angezeigt Stromversorgung AN Ausfall wird angezeigt Busleitung AN St\u00f6rung wird angezeigt Komponente \\ Aktoren 1 Beleuchtung Notausgang 2 Anzeige Geb\u00e4udeleittechnik Wie wird 1 erreicht? Wie wird 2 erreicht? Steuercontroller AN Defekter Steuercontroller wird angezeigt Taster AN Defekter Taster wird angezeigt Bewegungsmelder AN Defekter Taster wird angezeigt Komponente \\ Aktoren 1 Beleuchtung Notausgang 2 Anzeige Geb\u00e4udeleittechnik Wie wird 1 erreicht? Wie wird 2 erreicht? LED AN Defekte Lampe wird angezeigt 1: Nur durch Redundanz m\u00f6glich 2: Das Vorschaltger\u00e4t muss in der Lage sein den Ausfall der LED zu erkennen und an die GLT \u00fcbermitteln Komponente \\ Aktoren 1 Beleuchtung Notausgang 2 Anzeige Geb\u00e4udeleittechnik Wie wird 1 erreicht? Wie wird 2 erreicht? Vorschaltger\u00e4t AN Defektes Vorschaltger\u00e4t wird angezeigt 1: i.d.R. Nicht m\u00f6glich 2: Regelm\u00e4\u00dfiges ansprechen des Vorschaltger\u00e4t durch GLT. Meldung bei nicht erreichen Komponente \\ Aktoren 1 Beleuchtung Notausgang 2 Anzeige Geb\u00e4udeleittechnik Wie wird 1 erreicht? Wie wird 2 erreicht? Stromversorgung AN Ausfall wird angezeigt * 1: i.d.R. Nicht m\u00f6glich * 2: Regelm\u00e4\u00dfiges Ansprechen des Vorschaltger\u00e4t durch GLT. Meldung bei nicht erreichen Komponente \\ Aktoren 1 Beleuchtung Notausgang 2 Anzeige Geb\u00e4udeleittechnik Wie wird 1 erreicht? Wie wird 2 erreicht? Busleitung AN St\u00f6rung wird angezeigt 1: Bei Fehlersignal auf Busleitung schaltet das Vorschaltger\u00e4t an 2: Regelm\u00e4\u00dfiges Ansprechen des Gateways durch GLT. Meldung bei Problemen Komponente \\ Aktoren 1 Beleuchtung Notausgang 2 Anzeige Geb\u00e4udeleittechnik Wie wird 1 erreicht? Wie wird 2 erreicht? Steuercontroller AN Defekter Steuercontroller wird angezeigt 1: Bei Ausbleiben eines Steuerbefehls an Vorschaltger\u00e4t f\u00fcr l\u00e4nger als konfigurierte Zeit wird dies als Befehl zum Anschalten interpretiert 2: Regelm\u00e4\u00dfiges Ansprechen des Steuercontrollers durch GLT. Meldung bei nicht erreichen Komponente \\ Aktoren 1 Beleuchtung Notausgang 2 Anzeige Geb\u00e4udeleittechnik Wie wird 1 erreicht? Wie wird 2 erreicht? Bewegungsmelder / Taster AN Vermuteter Defekt wird angezeigt 1: Bei Ausbleiben eines Steuerbefehls an Vorschaltger\u00e4t f\u00fcr l\u00e4nger als konfigurierte Zeit wird dies als Befehl zum Anschalten interpretiert 2: Bei l\u00e4ngerem Ausbleiben eines Steuerbefehls der Steuercontroller wird eine Warnung angezeigt KNX Lernziele Studierende k\u00f6nnen das Einsatzgebiet eines KNX-Systems beschreiben Studierenden k\u00f6nnen typische Aktoren und Sensoren eines KNX-Systems benennen \ud83e\udde0 KNX Eigenschaften ein Feldbus zur Geb\u00e4udeautomation Fokus zun\u00e4chst auf Raumautomation Nachfolger des Europ\u00e4ischen Installationsbus (EIB) Einf\u00fchrende Erkl\u00e4rung Quelle \ud83e\udde0 Feldbus-Systeme zur Geb\u00e4udeautomation KNX trennt die Ger\u00e4testeuerung und Stromversorgung Stromversorgung mit Wechselspannung (rot) Steuerungsnetz (=EIB/KNX-Bus - gr\u00fcn) mit \\(30 \\text{V DC}\\) Quelle \ud83e\udde0 Sensor-Aktor-Prinzip Quelle Sensoren erkennen Ereignisse im Geb\u00e4ude (Tastenbet\u00e4tigung, Bewegung, \u00dcber-/Unterschreitung eines Temperaturwerts etc.) und wandeln diese in Telegramme (Datenpakete) um Aktoren empfangen Telegramme und wandeln diese in Aktionen um Multi-Master-System: Alle Sensoren sind Master CSMA/CA (f\u00fcr Funk\u00fcbertragungen) bzw. CSMA/CR-Prinzip (f\u00fcr kabelgebundene \u00dcbertragungen) \ud83e\udde0 KNX Ablauf findet ein Ereignis statt, sendet der Sensor die Nutzinformation (z.B. Schalter wurde geschaltet oder Windgeschwindigkeit betr\u00e4gt 8km/h) alle Aktoren h\u00f6ren die Busleitung ab und regieren, wenn Sie angesprochen wurden mit der vorprogrammierten Handlung Vorteil: Dezentralit\u00e4t - keinen Totalausfall Nachteil: gesteigerte Programmieraufwand. Jeder Teilnehmer muss mit einem Programmierger\u00e4t adressiert sowie mit der Applikation, den Parametern und Gruppenadressen programmiert werden. Sensoren und Aktoren Quelle \ud83e\udde0 Dezentralit\u00e4t bei KNX ist kein zentrales Steuerger\u00e4t notwendig Intelligenz \u00fcber alle Teilnehmer verteilt (jedes Ger\u00e4t hat mindestens einen Mikroprozessor) Ausfallsicherheit Zentrale Ger\u00e4te , wie SPS m\u00f6glich Maximalgr\u00f6\u00dfe Mindestens ein Sensor und Aktor theoretisch mehr als 50.000 Teilnehmer m\u00f6glich Erweiterung einer Anlage muss einer vorgeschriebenen Topologie folgen (vgl. Subnetting bei TCP/IP-Netzen) \u00dcbertragungsmedien KNX Twisted Pair (KNX TP): verdrillte Zweidrahtdatenleitung (Busleitung) KNX Powerline (KNX PL, \"D-Lan\"): \u00dcbertragung \u00fcber das vorhandene 230 V-Netz KNX Radio Frequency (KNX RF): \u00dcbertragung \u00fcber Funk KNX IP: \u00dcbertragung \u00fcber Ethernet KNX Zweidraht (TP) Busleitung versorgt alle Busteilnehmer mit Daten und Betriebsspannung ( \\(24 \\text{V DC}\\) ). Die Spannungsversorgungen speisen 30 V in das System ein. Busteilnehmer arbeiten bei Spannungen zwischen \\(21 \\text{ bis }30 \\text{V}\\) fehlerfrei. Telegrammaufbau - KNX-TP Kontrollfeld die Priorit\u00e4t , ob ein Telegramm wiederholt wurde Adressfeld physikalische Adresse des Senders und Empf\u00e4ngers (Physikalische Adresse oder Gruppenadresse ) Datenfeld bis 16 Byte Nutzdaten Sicherungsfeld f\u00fcr Parit\u00e4tspr\u00fcfungen zuf\u00e4lliger Buszugriff: CSMA/CA-Verfahren (Carrier Sense Multiple Access / Collision Avoidance ) Kopplung bei komplexeren Aufbauten h\u00e4ufig hierarchische Topologien Ethernet als leistungsf\u00e4higer Backbone und f\u00fcr komplexe (KNX IP) Ger\u00e4te KNX TP, KNX PL und KNX RF f\u00fcr Anbindung verteilter Sensoren und Aktoren \ud83e\udd13 Hierarchie Linie: kleinste Installationseinheit bei KNX TP mit Spannungsversorgung und 64 Busteilnehmer Linien sind durch Drosseln voneinader getrennt bis 15 Bereiche k\u00f6nnen \u00fcber Bereichskoppler an einer Bereichslinie zu einem Gesamtsystem erweitert werden \ud83e\udd13 Physikalische Adressen jedes Ger\u00e4t hat eine Nummer Bereich.Linie.Ger\u00e4t Beispiele: 1.5.0: Systemkoppler, der die f\u00fcnfte PL-Linie mit der TP-Hauptlinie im ersten Bereich koppelt. 2.3.20: Busteilnehmer mit der laufenden Nummer 20 in der dritten Linie des zweiten Bereichs Quelle \ud83e\udd13 Gruppenadressen Aktoren und Sensoren k\u00f6nnen Gruppen zugeordnet werden Hierbei gibt es drei Ebenen also z. B.: [Keller \u2013 Abstellraum \u2013 Rauchwarnmelder \u2013 Testalarm] [EG \u2013 K\u00fcche \u2013 Rollladen \u2013 Auf/Ab] [Garage \u2013 Werkbank \u2013 Wandlicht \u2013 Status] Quelle Einbau KNX im Schaltschrank Quelle Einbau Sensoren und mechanische Aktoren mechanische Aktoren und Sensoren werden im Feld verbaut Quelle \ud83e\udde0 Konfiguration KNX kommerzielle, herstellerunabh\u00e4ngige Engineering Tool Software ETS\u00ae erlaubt die Planung, Projektierung und Inbetriebnahme Quelle \ud83e\udd13 Produkte importieren damit angeschlossene Produkte bekannt sind Katalog im knxprod-Format wird importiert knxprod-Dateien i.d.R. auf Herstellerwebsite Quelle Gruppenadresse zuweisen Quelle Werte und Funktionen zuweisen Quelle Zukunft von KNX Trend zu Vernetzung auf IP-Ebene Datenraten nicht f\u00fcr Multimedia geeignet Gewachsenes \u00d6kosystem mit vielen Anbietern (Netzwerkeffekte) Lebensdauer von Geb\u00e4udeautomatsierung eher lang \u25b6\ufe0f voltus: KNX-Grundlagen Building Automation and Control networks (BACnet) \ud83e\udde0 BACnet entwickelt durch American Society of Heating, Refrigeration, and Air Conditioning Engineers Inc Fokus zun\u00e4chst auf Heizungs-, L\u00fcftungs- und Klimatechnik Verbindung von Feldebene - F\u00fchler und Antriebe Automations - (DDC-Ger\u00e4te, Controller) Managementebene (Geb\u00e4udeleittechnik) Quelle Quelle Quelle Anwendungsgebiet BACnet Protokoll kann auf beliebigen Betriebssystemen und Hardware-Plattformen implementiert werden standardisiert auch komplexe Transaktionen (z.B. Alarm-Routing, Historisierung, \u00dcberwachung des Ger\u00e4testatus, Zeit- und Kalenderfunktionen, Datensicherung etc.) kein Plug-And-Play System wie KNX keine fertigen Objekte mit standardisierter Funktion Quelle Objektorientierung Reale Ger\u00e4te und konzeptuelle Objekte k\u00f6nnen mittels Objekten abgebildet werden Output-Objekttypen: physikalische Ausg\u00e4nge wie einen 0-10V-Ausgang oder einen Prozentsatz eines Ventil-Aktors. Input-Objekttypen: physischen Hardware-Eingang, der mit dem Ger\u00e4t verbunden ist, z. B. ein Temperatur- oder Helligkeitssensor Value-Objekttypen: virtuelle Informationen wie einen Sollwert oder einen Regelparameter darzustellen. Objektorientierung am Beispiel bin\u00e4rer Eingang Bisher: Ein Eingang - eine Variable/Wert: bInAnwesenheitErkannt : BOOL ; bInAnwesenheitErkannt := True ; Mit BACnet werden Objekte detaillierter beschrieben: bInAnwesenheitErkannt = { \"Object_Identifier\" : 0 , \"Object_Name\" : \"Anwesenheitssensor\" , \"Present_Value\" : True , \"Out_of_Service \" : False } Objekt-Typen Konformit\u00e4tsklassen m\u00fcssen gewisse Objekte bereitstellen Quelle Darstellung eines BACnet-Objects (Analog Value) in Twincat Quelle Darstellung eines BACnet-Objects (Analog Value) als Funktionsbaustein Quelle Weitere Objekt-Typen aus ISO-Norm 16484-5 Access Credential, Access Door, Access Point, Access Rights Access User, Access Zone, Accumulator, Alert Enrollment Analog Input, Analog Output, Analog Value, Averaging Binary Input, Binary Lighting Output, Binary Output, Binary Value BitString Value, Calendar, Channel, CharacterString Value Command, Credential Data Input, Date Pattern Value Date Value, DateTime Pattern Value, DateTime Value Device, Elevator Group, Escalator, Event Enrollment Event Log, File, Global Group, Group, Integer Value, Large Analog Value Life Safety Point, Life Safety Zone, Lift, Lighting Output Load Control, Loop, Multi-state Input, Multi-state Output Multi-state Value, Network Port, Network Security, Notification Class Notification Forwarder, Octetstring Value, Positive Integer Value, Program Pulse Converter, Schedule, Structured View, Time Pattern Value Time Value, Timer, Trend Log, Trend Log Multiple BACnet Dienste (Services) ca. 40 Services beschreiben, wie Ger\u00e4te Informationen austauschen f\u00fcnf Bereiche Objektzugriff Filetransfer Alarm- und Event-Funktionen Remote Device Management Virtual Terminal Je nach Ger\u00e4teprofil sind gewisse Dienste vorgeschrieben Ein Sensor (Ger\u00e4teprofil) sollte einen Alarm (Dienst) ausl\u00f6sen k\u00f6nnen Der Alarm k\u00f6nnte auf einen Analogwert oder dem Mittwert eines Analogwertes basieren Quelle \"Bus\"-Eigenschaften 22 Bit f\u00fcr Adressierung (ca. 4 Mio Adressen ) Twisted Pair (max \\(1200 \\text{ m}\\) ) oder Ethernet m\u00f6glich Master/Slave mit Token Passing Server-Client Prinzip jeder Teilnehmer kann Services der anderen als Client aufrufen Weitere Bussysteme im der Geb\u00e4udeautomatisierung Modbus De-facto-Standard f\u00fcr SPS in der Automatisierung Master-Salve-Architektur Teilweise auch in Geb\u00e4udeautomatisierung eingesetzt Quelle M-Bus Europ\u00e4ischer Standard (genormt in EN 13757) f\u00fcr ein Kommunikationssystem zur Z\u00e4hlerdaten\u00fcbertragung Typische Anwendungen: Gasz\u00e4hler, Stromz\u00e4hler, W\u00e4rmez\u00e4hler, Wasserz\u00e4hler, Rauchmelder \\(300 \\text{ bis } 9600 \\text{ Baud}\\) Master-Slave-Architektur S\u00e4mtliche Hersteller von M-Bus-Z\u00e4hlern bieten den Download der Spezifikation der \u00fcbertragenen M-Bus-Daten ihrer Z\u00e4hler an. Local Operating Network (LON) neutralen Informationsaustausch zwischen Anlagen und Ger\u00e4ten von verschiedensten Herstellern Logikknoten (Nodes) in Sensoren, Aktoren und Controller Dezentrales Multi-Master System basierend auf den Aktionen der Nodes Programmierung \u00fcber LonTool Quelle Local Control Network (LCN) propriet\u00e4res Geb\u00e4udeautomationssystem f\u00fcr Wohn- und Zweckbauten (Issendorff KG) dezentral \u00fcber identische LCN-Module eine LCN-Programmiersoftware LCN-PRO Quelle Standard Motor Interface (SMI) kein volles Geb\u00e4udebussystem Erg\u00e4nzung als Schnittstelle zu Rollladen- und Sonnenschutzantriebe Fensterantriebe Software SMI-easyMonitor Quelle Funktionsweise von Innen- und Au\u00dfenbeschattung Lamellen-Nachf\u00fchrung (Blendschutz und Energieoptimierung) Verschattungs-Korrektur (Energieoptimierung) Witterungsautomatik (Produktschutz) Thermoautomatik (Energieoptimierung) Zeitprogramme (Automatisierung von repetitiven Aufgaben) Schockautomatik (Einbruchschutz) Quelle DMX (Lichttechnik) B\u00fchnenbeleuchtung auch in der Architekturbeleuchtung verdrillten, geschirmten, zweiadrigen Steuerleitung als Strang Teilnehmer und Adressierung viele Teilnehmer ggf. unter Verwendung von mehreren Repeatern Adressierung erfolgt am Betriebsger\u00e4t (Dip-Schalter oder Software) Quelle Auswahl funk-basierter Feldbussysteme h\u00e4ufig genutzte Frequenzb\u00e4nder liegen bei 433 MHz (Babyphone, Rauchmelder), 868 MHz (Alarmanlagen) und 2,4 GHz (WLan). Frequenz korreliert positiv mit \u00dcbertragungsrate und negativ mit Reichweite Quelle ZigBee (Connectivity Standards Alliance) f\u00fcr geringe Datenmengen geringer Energieverbrauch Anwendungen in Wohn- und Nichtwohngeb\u00e4uden Sensorabst\u00e4nde bis \\(100 \\text{ m}\\) Ad-hoc-Netzwerk \u00fcber ZigBee-Router Steuerung von Audio-Video-Technik, Waschmaschinen, Kaffeeautomaten evtl. Weiterentwicklung in Matter Bluetooth (Low Energy) Industriestandard f\u00fcr kurze Funkdistanz (WPAN) Smartphone-Steuerung, Audiotechnik Ad-hoc-Netzwerk \u00fcber Bluetooth Mesh Verschiedene Auspr\u00e4gungen (Reichweite, Energieverbrauch, etc.) Quelle Enocean hersteller\u00fcbergreifenden Standard mit batterieloser bidirektionaler Funktechnik kosten- und zeitsparende Installation Sensoren und Schalter (Piezoelektrizit\u00e4t) beziehen Energie aus Umgebung Sensoren f\u00fcr Temperatur, Helligkeit, Bewegung Aktoren als Schalter, Relais, Dimmer Quelle Weitere Z-Wave funkbasierter Standard f\u00fcr Wohngeb\u00e4ude Steuerung von Heizung, L\u00fcftung, Klimaanlagen, Beleuchtung, Sicherheitstechnik WirelessHART Kommunikation f\u00fcr industrielle Feldger\u00e4te, Anwendung f\u00fcr gro\u00dfe Distanzen WirelessKNX einfache Nachr\u00fcstung von KNX-Komponenten \u00fcber Funk-Buskoppler Wireless M-Bus europ\u00e4ischer Standard f\u00fcr drahtlose Kommunikation zwischen Z\u00e4hlern f\u00fcr Strom, Gas, W\u00e4rme, Wasser WLAN einbindung einzelner Produkte. Hoher Energieverbrauch. Long Range Wide Area Network (LoRaWAN) energieffizientes Senden kleiner Datenmengen \u00fcber gro\u00dfe Strecken","title":"Bussysteme in der Geb\u00e4udeautomation"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#54-bussysteme-in-der-geaudeautomation","text":"","title":"5.4 Bussysteme in der Ge\u00e4udeautomation"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#digital-addressable-lighting-interface-dali","text":"","title":"Digital Addressable Lighting Interface (DALI)"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#lernziele","text":"Nach dieser Einheit sind Sie in der Lage dazu - Komponenten zum Aufbau eines DALI-Systems ausw\u00e4hlen - die Grundlagen von Szenen und Gruppensteuerung beschreiben - geeigneten Leitungsdurchmesser/L\u00e4nge einer DALI-Installation bestimmen","title":"\ud83c\udfaf Lernziele"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#dali-grund-komponenten","text":"Stromversorgung (DALI PS1) - Alternativ \u00fcber Klemme oder Netzteil Steuerkontroller (links): Mikrocontoller mit Buszugriff mit Tastern oder anderen Schnittstellen verbunden LED oder Leuchten-Treiber (rechts): Mikrocontoller und Versorger der Leuchtmittel mit Energie DALI-USB: Schnittstelle zur Programmierung ggf. ersetzt durch SPS zur Steuerung des Bussystems Quelle Protokoll f\u00fcr lichttechnische Betriebsger\u00e4te kein gesamtheitliches Bussystem f\u00fcr Geb\u00e4udesystemtechnik dezentrales Lichtmanagement f\u00fcr max. 64 Teilnehmer (Betriebsger\u00e4te) mit frei definierbaren 16 Gruppen und 16 Szenen \u00fcber Gateways auch in die Geb\u00e4udesystemtechnik (KNX, BACnet, etc,) integrierbar","title":"DALI Grund-Komponenten"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#gruppen","text":"Mehrere Leuchtmittel werden zusammengefasst und k\u00f6nnen \u00fcber eine gemeinsame Gruppen-Adresse angesprochen Quelle","title":"Gruppen"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#szenen","text":"Vordefinierte Einstellungen f\u00fcr verschiedene Gruppen und Leuchtmittel f\u00fcr bestimmte Situationen Quelle","title":"Szenen"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#technische-grundlagen","text":"Separates Kabel mit zwei Signaleitern und Spannungsversorgung Spannung der Busleitung \\(9,5 - 22,4 \\text{ V}\\) Systemstrom max. \\(250 \\text{ mA}\\) (zur Versorgung keiner Betriebsger\u00e4te z.B. Steuerger\u00e4te f\u00fcr Schalter) Daten\u00fcbertragungsgeschwindigkeit \\(1200 \\text{ Baud}\\) Maximale einfache Leitungsl\u00e4nge \\(300 \\text{ m}\\) (bei \\(1.5 \\text{ mm\u00b2}\\) )","title":"Technische Grundlagen"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#aufbau","text":"Quelle","title":"Aufbau"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#merkmale-von-dali","text":"Installation: Versorgungs- und Steueradern k\u00f6nnen zusammen im selben Kabel verlegt werden. Die Verdrahtung kann in Reihe, sternf\u00f6rmig oder in einer gemischten Form erfolgen. Keine Polarit\u00e4t: Die Polarit\u00e4t (DA+/DA-) der DALI-Steuerleitung muss nicht beachtet werden Verteilte Intelligenz : Jeder Controller arbeitet als \"Master\" und kontrolliert dabei die Kommunikation auf ( Multi-Master ) der Steuerleitung. Gewisse Parameter sind dabei direkt im DALI-Betriebsger\u00e4t abgelegt (z.B. Szenenwerte, Gruppenadresse). Quelle","title":"Merkmale von DALI"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#technische-hintergrunde","text":"Kodierung: Manchester-Codierung High Pegel (idle): \\(9.5 \\text{ bis } 22.5 \\text{ V}\\) Low Pegel: \\(-6.5 \\text{ bis } 6.5 \\text{ V}\\) Buszugriff: Multi-Master CS/MA - CA Echtzeitf\u00e4hig? nein Quelle","title":"Technische Hintergr\u00fcnde"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#telegramm-format","text":"Quelle FF: Forward Frame eines Masters BF: Backward Frame Antwort eines Slaves 16-und-24-Bit-Telegramme: Ger\u00e4te zu konfigurieren, Parameter abzufragen oder Steuerbefehle oder Ereignisse Quelle 1-1-01110... Quelle","title":"Telegramm-Format"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#stromversorgung","text":"Versorgt den gesamten DALI-DALI-Kreis mit 24 V Gleichstrom z.B. Leuchtmittel >5 W, Steuercontroller","title":"Stromversorgung"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#steuermodule","text":"Bieten Eing\u00e4nge f\u00fcr Taster (Lichtschalter) K\u00f6nnen Logik f\u00fcr die Steuerung basierend auf den Eingaben ausf\u00fchren","title":"Steuermodule"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#steuermodule-betriebsarten","text":"Betriebsart Beschreibung MC Einfachtaster und/oder Doppeltaster und/oder Schalter SC-A Einfachtaster f\u00fcr Szenenaufruf GC-A Einfachtaster und/oder Doppeltaster f\u00fcr Leuchtengruppen ein/aus/gedimmt TuWh Doppeltaster f\u00fcr Intensit\u00e4t und Farbtemperatur von \"Tunable White\" Quelle","title":"Steuermodule Betriebsarten"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#touchpanele","text":"Erm\u00f6glichen komplexere Eingaben als einfache Taster Ausgaben m\u00f6glich: z.B. aktuelle Szene mit mit Licht hinterlegen","title":"Touchpanele"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#sensoren","text":"Erfassen Umweltparameter, wie Helligkeit und Bewegungen","title":"Sensoren"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#betriebsgerate","text":"Steuerung und/oder Stromversorgung von Leuchtmitteln (z.B. LEDs) Teilweise Transformatoren und Gleichrichter f\u00fcr \\(230V / AC\\) Mehrere Betriebsger\u00e4te k\u00f6nnen zu einer Gruppe zusammengefasst werden","title":"Betriebsger\u00e4te"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#technischer-rahmen-einer-installation","text":"Max. 64 DALI-Betriebsger\u00e4te ( \\(2^6\\) Adressen) Max. 16 DALI-Gruppen ( \\(2^4\\) Adressen) Max. 16 DALI-Szenen ( \\(2^4\\) Adressen) Maximaler Strom der Stromversorgung (DALI PS1: \\(200 \\text{ mA}\\) bzw. DALI PS2 \\(240 \\text{ mA}\\) ). Max. Leitungsl\u00e4nge aus Spannungsabfall ( \\(2 \\text{ V}\\) d.h. \\(300 \\text{ m}\\) bei \\(1,5 \\text{ mm\u00b2}\\) )","title":"Technischer Rahmen einer Installation"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#stromaufnahme-berechnen","text":"Ist die Stromversorgung stark genug f\u00fcr alle Betriebsmittel? Hierbei sind nur die Controller gemeint, die durch die DALI-Leitung versorgt werden Quelle","title":"Stromaufnahme berechnen"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#1-stromaufnahme-abschatzen","text":"Jedes Ger\u00e4t im DALI-Kreis nimmt \u00fcber den DALI-Kreis Strom auf (parallel) Die Stromaufnahme der Steuer- und Betriebsger\u00e4te aus Datenblatt (ca. \\(2 \\text{ mA}\\) ). maximalen Strom der Stromversorgung z.B. DALI PS1 ( \\(200 \\text{ mA}\\) ) Beispiel: DALI-Kreis mit 24 dimmbaren LED Treibern (LCA), 6 DALI XC Gesamtstrom = Summe Stromaufnahme DALI Betriebsger\u00e4te + Summe Stromaufnahme DALI Steuerger\u00e4te Gesamtstrom = 24 x Vorschaltger\u00e4te + 6 x DALI XC Gesamtstrom = \\(24 x 2 \\text{ mA} + 6 x 6 \\text{ mA} = 84 \\text{ mA}\\)","title":"1. Stromaufnahme absch\u00e4tzen"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#2-maximale-kabellange-berechnen","text":"Spannungsabfall durch Kabel darf \\(2 \\text{ V}\\) nicht \u00fcberschreiten Berechnung des Spannungsabfalls: \\(U_v = R I = \\frac{2 \\cdot l }{\\gamma \\cdot S}\\cdot I\\) \\(U_v\\) Spannungsabfall in V \\(I\\) Strom in A \\(S\\) Querschnitt in \\(mm^2\\) \\(l\\) Leitungsl\u00e4nge in m \\(\\gamma\\) Elektrische Leitf\u00e4higkeit in \\(\\frac{m}{\\Omega \\cdot mm }\\) , bei Kupferleitungen: \\(56\\frac{m}{\\Omega \\cdot mm }\\) Beispiel: DALI-Kreis mit einer Leitungsl\u00e4nge von \\(300 m\\) und einem Drahtquerschnitt von \\(1.5 mm^2\\) und maximalem Strom von 250 mA \\(U_v = \\frac{2 \\cdot l \\cdot I}{\\gamma \\cdot S} = \\frac{2 \\cdot 300 m \\cdot 0.25 A}{56 \\frac{m}{\\Omega mm^2} \\cdot 1.5 mm^2} = 1.786 V\\) Spannungsabfall \u00fcber Kabel ist kleiner als \\(2V\\)","title":"2. Maximale Kabell\u00e4nge berechnen"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#verdrahtung","text":"handels\u00fcbliches Installationsmaterial 2 Adern f\u00fcr DALI-Steuerkreis Quelle","title":"Verdrahtung"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#anschluss","text":"auf Polarit\u00e4t der DALI-Leitung muss nicht beachtet werden DALI-Signal ist nicht SELV . Es gelten die Installationsvorschriften f\u00fcr Niederspannung. Quelle Safety Extra Low Voltage = Sicherheitskleinspannung) bezeichnet Spannungen, die aufgrund ihrer geringen Spannungsh\u00f6he und Isolierung besonderen Schutz gegen elektrischen Schlag bieten","title":"Anschluss"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#konfiguration","text":"Bussysteme werden in der Regel nicht programmiert, sondern anhand von bestehenden Bausteinen einer SPS oder hersteller-spezifischer Software konfiguriert Jedem Ger\u00e4t werden bestimmte Eigenschaftswerte zugewiesen Steuer-Controller: F\u00fcr welche Funktion ist der Schalter zust\u00e4ndig (Szenen, Gruppen, Dimmen) F\u00fcr welche Leuchtmittel und Gruppen ist der Schalter genau zust\u00e4ndig LED-Controller: Zuordnung zu Szenen und Gruppen Zuordnung von Leuchtwerten","title":"Konfiguration"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#software-seitige-konfiguration","text":"Je nach Bussystem stellen verschiedene Anbieter, verschiedene Softwarel\u00f6sungen bereit.","title":"Software-seitige Konfiguration"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#individualadressen-und-gruppen","text":"jeder DALI Teilnehmer hat eine (von 64) Individualadressen Mit der Individualadresse kann jedes einzelne Betriebsger\u00e4t identifiziert und angesteuert werden. Mehrkanaligen Betriebsger\u00e4ten sind ggf. mehrere Adressen zuzuordnen (z.B. Dimmen + Farbe oder Warm- + Kaltwei\u00df ) Zus\u00e4tzlich zu den Individualadressen bis zu 16 Gruppenadressen","title":"Individualadressen und Gruppen"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#szenen_1","text":"bis zu 16 Lichtszenen (Einstellung verschiedener Beleuchtungssituationen) jedem Vorschaltger\u00e4t kann ein individueller Lichtwert je Szene hinterlegt werden Lichtszenen unabh\u00e4ngig von der Gruppenzuordnung Quelle","title":"Szenen"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#farbsteuerung","text":"M\u00f6gliche Farbkan\u00e4le RGB: Drei Kan\u00e4le f\u00fcr rote, gr\u00fcne und blaue LEDs RGBW: RGB + wei\u00dfen Lichtquelle (4) RGBWW: Wei\u00df-Wei\u00df (tunable white) f\u00fcr die W\u00e4rme-Steuerung des wei\u00dfen Lichts (2) Ansteuerung: DT6: Jeder Farbkanal hat eine eigene DALI-Adresse . Statt 64 k\u00f6nnen bei RGBW nur nuch 16 Leuchtmittel gesteuert werden DT8: Nur eine Adresse pro Ger\u00e4t","title":"Farbsteuerung"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#anwendungsbeispiel-besprechungszimmer","text":"Besprechungszimmer f\u00fcr ca. 10 Personen 6 LED Langfeldleuchten und 2 LED Downlights . je eine Gruppe f\u00fcr Langfeldleuchten und Downlights Bedienung an T\u00fcr: DALI XC (SC Modus) mit den Szenen \u201e Beleuchtung ein \" und \u201e Beleuchtung aus \" an Fensterfront 2 DALI XC (SC und GC): Aufrufen von vier Szenen und das individuelle Dimmen der beiden Leuchtengruppen . Quelle","title":"Anwendungsbeispiel Besprechungszimmer"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#stuckliste","text":"Pos. St\u00fcck Artikelbezeichnung 1 1 DALI Stromversorgung DALI PS1 / DALI PS2 2 2 DALI XC in SC Modus (Szenenkontroller) DALI XC 3 1 DALI XC in GC Modus (Gruppenkontroller) DALI XC 4 6 DALI LED Betriegsger\u00e4t f\u00fcr Langfeldleuchte LCAI one4all 5 2 DALI LED Betriebsger\u00e4t f\u00fcr LED Downlights LCAI one4all Quelle","title":"St\u00fcckliste"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#checkliste","text":"DALI Bedingung Im Objekt geplant / vorhanden OK? Max. 64 DALI Betriebsger\u00e4te 8 DALI Betriebsger\u00e4te Max. 16 Gruppen 2 Gruppen Max. 16 Szenen 4 Szenen Strom DALI-Kreis < Nennstrom Power Supply 34 mA Leitungsl\u00e4nge < 300 m (bei 1,5mm\u00b2) ca. 20m 5 Adern zu jeder Leuchte 5 x 1,5mm\u00b2 DALI LED Betriebsger\u00e4t in Leuchte Tridonic LCAI one4all Quelle","title":"Checkliste"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#gruppierung","text":"Komponente Zuordnung Downlights Gruppe 1 Langfeldleuchten Gruppe 2 an Fensterfront DALI XC (GC): individuelle Dimmen der beiden Leuchtengruppen . 4 Taster, je zwei f\u00fcr jede Gruppe Quelle","title":"Gruppierung"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#szenenzuordnung","text":"an T\u00fcr: DALI XC (SC Modus) mit den Szenen \u201e Beleuchtung ein \" und \u201e Beleuchtung aus \" an Fensterfront 1 DALI XC (SC): Aufrufen von vier Szenen individuelle Dimmen der beiden Leuchtengruppen . Bedienstelle T\u00fcr Bedienstelle Leinwand G1 G2 Szene 1 Licht aus Licht aus 0 % 0% Szene 2 Licht 100 % Licht 100 % 100% 100% Szene 3 nicht verdrahtet Pr\u00e4sentation 50% 20 % Szene 4 nicht verdrahtet Besprechung 0% 100% Quelle","title":"Szenenzuordnung"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#inbetriebnahme","text":"Die Programmierung kann auf zwei Arten erfolgen Schalter im Programmiermodus PC-Anbindung mit Software","title":"Inbetriebnahme"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#quelle","text":"","title":"Quelle"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#ergebnis","text":"Quelle","title":"Ergebnis"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#dali-2","text":"abw\u00e4rtskompatibel Input Devices (Sensoren) kommunizieren nicht mehr direkt mit DALI-Treibern an Leuchtmitteln Application controller verarbeiten zuerst (Multimaster Prinzip) Kollisions-Erkennung","title":"DALI 2"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#ausfallsicherheit","text":"da Bussysteme aus mehreren Komponenten bestehen, wird das Fehlermanagement komplexer Single-Point-of-Failure: Ein Teil des Systems, dessen Ausfall zum Totalversagen f\u00fchren kann Neben redundanter Auslegung kann eine Fehler-Analyse helfen resiliente Systeme zu entwerfen","title":"Ausfallsicherheit"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#einfluss-analyse","text":"was-w\u00e4re-wenn ? F\u00fcr jede Komponente wird untersucht: was passiert, wenn diese Komponente ausf\u00e4llt Was w\u00e4re der gew\u00fcnschte Zustand des Systems? (i.d.R. festgelegt durch die Aktoren)","title":"Einfluss-Analyse"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#beispiel-beleuchtung-in-treppenhausern","text":"Licht sollte nicht ohne Bedarf brennen Licht kann \u00fcber Taster, Bewegungsmelder oder GLT aktiviert werden In der GLT kann der Systemzustand \u00fcberwacht werden im Falle eines Notfalls muss das Licht in jedem Fall brennen","title":"Beispiel: Beleuchtung in Treppenh\u00e4usern"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#buskomponenten","text":"Komponente \\ Aktoren 1 Beleuchtung Notausgang 2 Anzeige Geb\u00e4udeleittechnik Wie wird 1 erreicht? Wie wird 2 erreicht? LED AN Defekte Lampe wird angezeigt Vorschaltger\u00e4t AN Defektes Vorschaltger\u00e4t wird angezeigt Stromversorgung AN Ausfall wird angezeigt Busleitung AN St\u00f6rung wird angezeigt Komponente \\ Aktoren 1 Beleuchtung Notausgang 2 Anzeige Geb\u00e4udeleittechnik Wie wird 1 erreicht? Wie wird 2 erreicht? Steuercontroller AN Defekter Steuercontroller wird angezeigt Taster AN Defekter Taster wird angezeigt Bewegungsmelder AN Defekter Taster wird angezeigt Komponente \\ Aktoren 1 Beleuchtung Notausgang 2 Anzeige Geb\u00e4udeleittechnik Wie wird 1 erreicht? Wie wird 2 erreicht? LED AN Defekte Lampe wird angezeigt 1: Nur durch Redundanz m\u00f6glich 2: Das Vorschaltger\u00e4t muss in der Lage sein den Ausfall der LED zu erkennen und an die GLT \u00fcbermitteln Komponente \\ Aktoren 1 Beleuchtung Notausgang 2 Anzeige Geb\u00e4udeleittechnik Wie wird 1 erreicht? Wie wird 2 erreicht? Vorschaltger\u00e4t AN Defektes Vorschaltger\u00e4t wird angezeigt 1: i.d.R. Nicht m\u00f6glich 2: Regelm\u00e4\u00dfiges ansprechen des Vorschaltger\u00e4t durch GLT. Meldung bei nicht erreichen Komponente \\ Aktoren 1 Beleuchtung Notausgang 2 Anzeige Geb\u00e4udeleittechnik Wie wird 1 erreicht? Wie wird 2 erreicht? Stromversorgung AN Ausfall wird angezeigt * 1: i.d.R. Nicht m\u00f6glich * 2: Regelm\u00e4\u00dfiges Ansprechen des Vorschaltger\u00e4t durch GLT. Meldung bei nicht erreichen Komponente \\ Aktoren 1 Beleuchtung Notausgang 2 Anzeige Geb\u00e4udeleittechnik Wie wird 1 erreicht? Wie wird 2 erreicht? Busleitung AN St\u00f6rung wird angezeigt 1: Bei Fehlersignal auf Busleitung schaltet das Vorschaltger\u00e4t an 2: Regelm\u00e4\u00dfiges Ansprechen des Gateways durch GLT. Meldung bei Problemen Komponente \\ Aktoren 1 Beleuchtung Notausgang 2 Anzeige Geb\u00e4udeleittechnik Wie wird 1 erreicht? Wie wird 2 erreicht? Steuercontroller AN Defekter Steuercontroller wird angezeigt 1: Bei Ausbleiben eines Steuerbefehls an Vorschaltger\u00e4t f\u00fcr l\u00e4nger als konfigurierte Zeit wird dies als Befehl zum Anschalten interpretiert 2: Regelm\u00e4\u00dfiges Ansprechen des Steuercontrollers durch GLT. Meldung bei nicht erreichen Komponente \\ Aktoren 1 Beleuchtung Notausgang 2 Anzeige Geb\u00e4udeleittechnik Wie wird 1 erreicht? Wie wird 2 erreicht? Bewegungsmelder / Taster AN Vermuteter Defekt wird angezeigt 1: Bei Ausbleiben eines Steuerbefehls an Vorschaltger\u00e4t f\u00fcr l\u00e4nger als konfigurierte Zeit wird dies als Befehl zum Anschalten interpretiert 2: Bei l\u00e4ngerem Ausbleiben eines Steuerbefehls der Steuercontroller wird eine Warnung angezeigt","title":"Buskomponenten"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#knx","text":"","title":"KNX"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#lernziele_1","text":"Studierende k\u00f6nnen das Einsatzgebiet eines KNX-Systems beschreiben Studierenden k\u00f6nnen typische Aktoren und Sensoren eines KNX-Systems benennen","title":"Lernziele"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#knx-eigenschaften","text":"ein Feldbus zur Geb\u00e4udeautomation Fokus zun\u00e4chst auf Raumautomation Nachfolger des Europ\u00e4ischen Installationsbus (EIB) Einf\u00fchrende Erkl\u00e4rung Quelle","title":"\ud83e\udde0 KNX Eigenschaften"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#feldbus-systeme-zur-gebaudeautomation","text":"KNX trennt die Ger\u00e4testeuerung und Stromversorgung Stromversorgung mit Wechselspannung (rot) Steuerungsnetz (=EIB/KNX-Bus - gr\u00fcn) mit \\(30 \\text{V DC}\\) Quelle","title":"\ud83e\udde0 Feldbus-Systeme zur Geb\u00e4udeautomation"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#sensor-aktor-prinzip","text":"Quelle Sensoren erkennen Ereignisse im Geb\u00e4ude (Tastenbet\u00e4tigung, Bewegung, \u00dcber-/Unterschreitung eines Temperaturwerts etc.) und wandeln diese in Telegramme (Datenpakete) um Aktoren empfangen Telegramme und wandeln diese in Aktionen um Multi-Master-System: Alle Sensoren sind Master CSMA/CA (f\u00fcr Funk\u00fcbertragungen) bzw. CSMA/CR-Prinzip (f\u00fcr kabelgebundene \u00dcbertragungen)","title":"\ud83e\udde0 Sensor-Aktor-Prinzip"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#knx-ablauf","text":"findet ein Ereignis statt, sendet der Sensor die Nutzinformation (z.B. Schalter wurde geschaltet oder Windgeschwindigkeit betr\u00e4gt 8km/h) alle Aktoren h\u00f6ren die Busleitung ab und regieren, wenn Sie angesprochen wurden mit der vorprogrammierten Handlung Vorteil: Dezentralit\u00e4t - keinen Totalausfall Nachteil: gesteigerte Programmieraufwand. Jeder Teilnehmer muss mit einem Programmierger\u00e4t adressiert sowie mit der Applikation, den Parametern und Gruppenadressen programmiert werden.","title":"\ud83e\udde0 KNX Ablauf"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#sensoren-und-aktoren","text":"Quelle","title":"Sensoren und Aktoren"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#dezentralitat","text":"bei KNX ist kein zentrales Steuerger\u00e4t notwendig Intelligenz \u00fcber alle Teilnehmer verteilt (jedes Ger\u00e4t hat mindestens einen Mikroprozessor) Ausfallsicherheit Zentrale Ger\u00e4te , wie SPS m\u00f6glich","title":"\ud83e\udde0 Dezentralit\u00e4t"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#maximalgroe","text":"Mindestens ein Sensor und Aktor theoretisch mehr als 50.000 Teilnehmer m\u00f6glich Erweiterung einer Anlage muss einer vorgeschriebenen Topologie folgen (vgl. Subnetting bei TCP/IP-Netzen)","title":"Maximalgr\u00f6\u00dfe"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#ubertragungsmedien","text":"KNX Twisted Pair (KNX TP): verdrillte Zweidrahtdatenleitung (Busleitung) KNX Powerline (KNX PL, \"D-Lan\"): \u00dcbertragung \u00fcber das vorhandene 230 V-Netz KNX Radio Frequency (KNX RF): \u00dcbertragung \u00fcber Funk KNX IP: \u00dcbertragung \u00fcber Ethernet","title":"\u00dcbertragungsmedien"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#knx-zweidraht-tp","text":"Busleitung versorgt alle Busteilnehmer mit Daten und Betriebsspannung ( \\(24 \\text{V DC}\\) ). Die Spannungsversorgungen speisen 30 V in das System ein. Busteilnehmer arbeiten bei Spannungen zwischen \\(21 \\text{ bis }30 \\text{V}\\) fehlerfrei.","title":"KNX Zweidraht (TP)"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#telegrammaufbau-knx-tp","text":"Kontrollfeld die Priorit\u00e4t , ob ein Telegramm wiederholt wurde Adressfeld physikalische Adresse des Senders und Empf\u00e4ngers (Physikalische Adresse oder Gruppenadresse ) Datenfeld bis 16 Byte Nutzdaten Sicherungsfeld f\u00fcr Parit\u00e4tspr\u00fcfungen zuf\u00e4lliger Buszugriff: CSMA/CA-Verfahren (Carrier Sense Multiple Access / Collision Avoidance )","title":"Telegrammaufbau - KNX-TP"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#kopplung-bei-komplexeren-aufbauten","text":"h\u00e4ufig hierarchische Topologien Ethernet als leistungsf\u00e4higer Backbone und f\u00fcr komplexe (KNX IP) Ger\u00e4te KNX TP, KNX PL und KNX RF f\u00fcr Anbindung verteilter Sensoren und Aktoren","title":"Kopplung bei komplexeren Aufbauten"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#hierarchie","text":"Linie: kleinste Installationseinheit bei KNX TP mit Spannungsversorgung und 64 Busteilnehmer Linien sind durch Drosseln voneinader getrennt bis 15 Bereiche k\u00f6nnen \u00fcber Bereichskoppler an einer Bereichslinie zu einem Gesamtsystem erweitert werden","title":"\ud83e\udd13 Hierarchie"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#physikalische-adressen","text":"jedes Ger\u00e4t hat eine Nummer Bereich.Linie.Ger\u00e4t Beispiele: 1.5.0: Systemkoppler, der die f\u00fcnfte PL-Linie mit der TP-Hauptlinie im ersten Bereich koppelt. 2.3.20: Busteilnehmer mit der laufenden Nummer 20 in der dritten Linie des zweiten Bereichs Quelle","title":"\ud83e\udd13 Physikalische Adressen"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#gruppenadressen","text":"Aktoren und Sensoren k\u00f6nnen Gruppen zugeordnet werden Hierbei gibt es drei Ebenen also z. B.: [Keller \u2013 Abstellraum \u2013 Rauchwarnmelder \u2013 Testalarm] [EG \u2013 K\u00fcche \u2013 Rollladen \u2013 Auf/Ab] [Garage \u2013 Werkbank \u2013 Wandlicht \u2013 Status] Quelle","title":"\ud83e\udd13 Gruppenadressen"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#einbau-knx-im-schaltschrank","text":"Quelle","title":"Einbau KNX im Schaltschrank"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#einbau-sensoren-und-mechanische-aktoren","text":"mechanische Aktoren und Sensoren werden im Feld verbaut Quelle","title":"Einbau Sensoren und mechanische Aktoren"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#konfiguration-knx","text":"kommerzielle, herstellerunabh\u00e4ngige Engineering Tool Software ETS\u00ae erlaubt die Planung, Projektierung und Inbetriebnahme Quelle","title":"\ud83e\udde0 Konfiguration KNX"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#produkte-importieren","text":"damit angeschlossene Produkte bekannt sind Katalog im knxprod-Format wird importiert knxprod-Dateien i.d.R. auf Herstellerwebsite Quelle","title":"\ud83e\udd13 Produkte importieren"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#gruppenadresse-zuweisen","text":"Quelle","title":"Gruppenadresse zuweisen"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#werte-und-funktionen-zuweisen","text":"Quelle","title":"Werte und Funktionen zuweisen"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#zukunft-von-knx","text":"Trend zu Vernetzung auf IP-Ebene Datenraten nicht f\u00fcr Multimedia geeignet Gewachsenes \u00d6kosystem mit vielen Anbietern (Netzwerkeffekte) Lebensdauer von Geb\u00e4udeautomatsierung eher lang \u25b6\ufe0f voltus: KNX-Grundlagen","title":"Zukunft von KNX"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#building-automation-and-control-networks-bacnet","text":"","title":"Building Automation and Control networks (BACnet)"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#bacnet","text":"entwickelt durch American Society of Heating, Refrigeration, and Air Conditioning Engineers Inc Fokus zun\u00e4chst auf Heizungs-, L\u00fcftungs- und Klimatechnik Verbindung von Feldebene - F\u00fchler und Antriebe Automations - (DDC-Ger\u00e4te, Controller) Managementebene (Geb\u00e4udeleittechnik) Quelle Quelle Quelle","title":"\ud83e\udde0 BACnet"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#anwendungsgebiet-bacnet","text":"Protokoll kann auf beliebigen Betriebssystemen und Hardware-Plattformen implementiert werden standardisiert auch komplexe Transaktionen (z.B. Alarm-Routing, Historisierung, \u00dcberwachung des Ger\u00e4testatus, Zeit- und Kalenderfunktionen, Datensicherung etc.) kein Plug-And-Play System wie KNX keine fertigen Objekte mit standardisierter Funktion Quelle","title":"Anwendungsgebiet BACnet"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#objektorientierung","text":"Reale Ger\u00e4te und konzeptuelle Objekte k\u00f6nnen mittels Objekten abgebildet werden Output-Objekttypen: physikalische Ausg\u00e4nge wie einen 0-10V-Ausgang oder einen Prozentsatz eines Ventil-Aktors. Input-Objekttypen: physischen Hardware-Eingang, der mit dem Ger\u00e4t verbunden ist, z. B. ein Temperatur- oder Helligkeitssensor Value-Objekttypen: virtuelle Informationen wie einen Sollwert oder einen Regelparameter darzustellen.","title":"Objektorientierung"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#objektorientierung-am-beispiel-binarer-eingang","text":"Bisher: Ein Eingang - eine Variable/Wert: bInAnwesenheitErkannt : BOOL ; bInAnwesenheitErkannt := True ; Mit BACnet werden Objekte detaillierter beschrieben: bInAnwesenheitErkannt = { \"Object_Identifier\" : 0 , \"Object_Name\" : \"Anwesenheitssensor\" , \"Present_Value\" : True , \"Out_of_Service \" : False }","title":"Objektorientierung am Beispiel bin\u00e4rer Eingang"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#objekt-typen","text":"Konformit\u00e4tsklassen m\u00fcssen gewisse Objekte bereitstellen Quelle","title":"Objekt-Typen"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#darstellung-eines-bacnet-objects-analog-value-in-twincat","text":"Quelle","title":"Darstellung eines BACnet-Objects (Analog Value) in Twincat"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#darstellung-eines-bacnet-objects-analog-value-als-funktionsbaustein","text":"Quelle","title":"Darstellung eines BACnet-Objects (Analog Value) als Funktionsbaustein"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#weitere-objekt-typen-aus-iso-norm-16484-5","text":"Access Credential, Access Door, Access Point, Access Rights Access User, Access Zone, Accumulator, Alert Enrollment Analog Input, Analog Output, Analog Value, Averaging Binary Input, Binary Lighting Output, Binary Output, Binary Value BitString Value, Calendar, Channel, CharacterString Value Command, Credential Data Input, Date Pattern Value Date Value, DateTime Pattern Value, DateTime Value Device, Elevator Group, Escalator, Event Enrollment Event Log, File, Global Group, Group, Integer Value, Large Analog Value Life Safety Point, Life Safety Zone, Lift, Lighting Output Load Control, Loop, Multi-state Input, Multi-state Output Multi-state Value, Network Port, Network Security, Notification Class Notification Forwarder, Octetstring Value, Positive Integer Value, Program Pulse Converter, Schedule, Structured View, Time Pattern Value Time Value, Timer, Trend Log, Trend Log Multiple","title":"Weitere Objekt-Typen aus ISO-Norm 16484-5"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#bacnet-dienste-services","text":"ca. 40 Services beschreiben, wie Ger\u00e4te Informationen austauschen f\u00fcnf Bereiche Objektzugriff Filetransfer Alarm- und Event-Funktionen Remote Device Management Virtual Terminal Je nach Ger\u00e4teprofil sind gewisse Dienste vorgeschrieben Ein Sensor (Ger\u00e4teprofil) sollte einen Alarm (Dienst) ausl\u00f6sen k\u00f6nnen Der Alarm k\u00f6nnte auf einen Analogwert oder dem Mittwert eines Analogwertes basieren Quelle","title":"BACnet Dienste (Services)"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#bus-eigenschaften","text":"22 Bit f\u00fcr Adressierung (ca. 4 Mio Adressen ) Twisted Pair (max \\(1200 \\text{ m}\\) ) oder Ethernet m\u00f6glich Master/Slave mit Token Passing Server-Client Prinzip jeder Teilnehmer kann Services der anderen als Client aufrufen","title":"\"Bus\"-Eigenschaften"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#weitere-bussysteme-im-der-gebaudeautomatisierung","text":"","title":"Weitere Bussysteme im der Geb\u00e4udeautomatisierung"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#modbus","text":"De-facto-Standard f\u00fcr SPS in der Automatisierung Master-Salve-Architektur Teilweise auch in Geb\u00e4udeautomatisierung eingesetzt Quelle","title":"Modbus"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#m-bus","text":"Europ\u00e4ischer Standard (genormt in EN 13757) f\u00fcr ein Kommunikationssystem zur Z\u00e4hlerdaten\u00fcbertragung Typische Anwendungen: Gasz\u00e4hler, Stromz\u00e4hler, W\u00e4rmez\u00e4hler, Wasserz\u00e4hler, Rauchmelder \\(300 \\text{ bis } 9600 \\text{ Baud}\\) Master-Slave-Architektur S\u00e4mtliche Hersteller von M-Bus-Z\u00e4hlern bieten den Download der Spezifikation der \u00fcbertragenen M-Bus-Daten ihrer Z\u00e4hler an.","title":"M-Bus"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#local-operating-network-lon","text":"neutralen Informationsaustausch zwischen Anlagen und Ger\u00e4ten von verschiedensten Herstellern Logikknoten (Nodes) in Sensoren, Aktoren und Controller Dezentrales Multi-Master System basierend auf den Aktionen der Nodes Programmierung \u00fcber LonTool Quelle","title":"Local Operating Network (LON)"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#local-control-network-lcn","text":"propriet\u00e4res Geb\u00e4udeautomationssystem f\u00fcr Wohn- und Zweckbauten (Issendorff KG) dezentral \u00fcber identische LCN-Module eine LCN-Programmiersoftware LCN-PRO Quelle","title":"Local Control Network (LCN)"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#standard-motor-interface-smi","text":"kein volles Geb\u00e4udebussystem Erg\u00e4nzung als Schnittstelle zu Rollladen- und Sonnenschutzantriebe Fensterantriebe Software SMI-easyMonitor Quelle","title":"Standard Motor Interface (SMI)"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#funktionsweise-von-innen-und-auenbeschattung","text":"Lamellen-Nachf\u00fchrung (Blendschutz und Energieoptimierung) Verschattungs-Korrektur (Energieoptimierung) Witterungsautomatik (Produktschutz) Thermoautomatik (Energieoptimierung) Zeitprogramme (Automatisierung von repetitiven Aufgaben) Schockautomatik (Einbruchschutz) Quelle","title":"Funktionsweise von Innen- und Au\u00dfenbeschattung"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#dmx-lichttechnik","text":"B\u00fchnenbeleuchtung auch in der Architekturbeleuchtung verdrillten, geschirmten, zweiadrigen Steuerleitung als Strang","title":"DMX (Lichttechnik)"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#teilnehmer-und-adressierung","text":"viele Teilnehmer ggf. unter Verwendung von mehreren Repeatern Adressierung erfolgt am Betriebsger\u00e4t (Dip-Schalter oder Software) Quelle","title":"Teilnehmer und Adressierung"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#auswahl-funk-basierter-feldbussysteme","text":"h\u00e4ufig genutzte Frequenzb\u00e4nder liegen bei 433 MHz (Babyphone, Rauchmelder), 868 MHz (Alarmanlagen) und 2,4 GHz (WLan). Frequenz korreliert positiv mit \u00dcbertragungsrate und negativ mit Reichweite Quelle","title":"Auswahl funk-basierter Feldbussysteme"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#zigbee-connectivity-standards-alliance","text":"f\u00fcr geringe Datenmengen geringer Energieverbrauch Anwendungen in Wohn- und Nichtwohngeb\u00e4uden Sensorabst\u00e4nde bis \\(100 \\text{ m}\\) Ad-hoc-Netzwerk \u00fcber ZigBee-Router Steuerung von Audio-Video-Technik, Waschmaschinen, Kaffeeautomaten evtl. Weiterentwicklung in Matter","title":"ZigBee (Connectivity Standards Alliance)"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#bluetooth-low-energy","text":"Industriestandard f\u00fcr kurze Funkdistanz (WPAN) Smartphone-Steuerung, Audiotechnik Ad-hoc-Netzwerk \u00fcber Bluetooth Mesh Verschiedene Auspr\u00e4gungen (Reichweite, Energieverbrauch, etc.) Quelle","title":"Bluetooth (Low Energy)"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#enocean","text":"hersteller\u00fcbergreifenden Standard mit batterieloser bidirektionaler Funktechnik kosten- und zeitsparende Installation Sensoren und Schalter (Piezoelektrizit\u00e4t) beziehen Energie aus Umgebung Sensoren f\u00fcr Temperatur, Helligkeit, Bewegung Aktoren als Schalter, Relais, Dimmer Quelle","title":"Enocean"},{"location":"5_4_Bussysteme_in_der_Gebudeautomation/#weitere","text":"Z-Wave funkbasierter Standard f\u00fcr Wohngeb\u00e4ude Steuerung von Heizung, L\u00fcftung, Klimaanlagen, Beleuchtung, Sicherheitstechnik WirelessHART Kommunikation f\u00fcr industrielle Feldger\u00e4te, Anwendung f\u00fcr gro\u00dfe Distanzen WirelessKNX einfache Nachr\u00fcstung von KNX-Komponenten \u00fcber Funk-Buskoppler Wireless M-Bus europ\u00e4ischer Standard f\u00fcr drahtlose Kommunikation zwischen Z\u00e4hlern f\u00fcr Strom, Gas, W\u00e4rme, Wasser WLAN einbindung einzelner Produkte. Hoher Energieverbrauch. Long Range Wide Area Network (LoRaWAN) energieffizientes Senden kleiner Datenmengen \u00fcber gro\u00dfe Strecken","title":"Weitere"},{"location":"6_1_Smart_Metering/","text":"Smart Metering Globale Aspekte der Energieversorgung Wie viele \"Energie-Sklaven\" ben\u00f6tigen wir? the energy slave is a unit of measurement that allows us to better understand and evaluate the consequences of our life choices. An energy slave works to produce energy 24 hours a day. He produces an average power output of 100 W (875 kWh/year) Quelle Quelle \ud83e\udde0 Prim\u00e4renergiebedarf misst den gesamten Energiebedarf (eines Landes). Er umfasst den Verbrauch des Energiesektors selbst, Verluste bei der Umwandlung (z.B. von \u00d6l oder Gas in Elektrizit\u00e4t) und Verteilung von Energie sowie den Endverbrauch durch die Endverbraucher. Ausgeschlossen sind Energietr\u00e4ger, die f\u00fcr nichtenergetische Zwecke verwendet werden (z.B. Erd\u00f6l, das nicht zur Verbrennung, sondern zur Herstellung von Kunststoffen verwendet wird). Quelle Quelle Quelle \ud83e\udd13 Tonne of oil equivalent? (toe) ist eine Energieeinheit, die als die Energiemenge definiert ist, die bei der Verbrennung einer Tonne Roh\u00f6l freigesetzt wird. Sie betr\u00e4gt etwa 42 Gigajoule oder 11,630 MWh Quelle Wie viele \"Energie-Sklaven\" ben\u00f6tigen wir? \\(\\text{No. of Energy Slaves}\\) \\(= 3.7 \\frac{\\text{toe}}{\\text{a}} \\cdot 11.630 \\frac{\\text{MWh}}{\\text{toe}} \\cdot 1000\\frac{\\text{kWh}}{\\text{MWh}} \\cdot \\frac{1}{875}\\frac{\\text{a}}{\\text{kWh}}\\) \\(= 3.7 \\cdot 11.630 \\cdot 1000 \\cdot \\frac{1}{875}\\) \\(= 49.2\\) * Jeder Europ\u00e4er ben\u00f6tigt mehr als 50 virtuelle Energiesklaven, die Tag und Nacht arbeiten! Wasserkocher \\(P = 3.7 \\cdot \\frac{11,630}{8760}\\frac{kWh}{h}=4.9kW\\) als w\u00fcrden mehrere Wasserkocher kontinuierlich durchlaufen Is it bad to have too many energy slaves / kettles? Quelle \u00d6konomie Kosten: Energieerzeugung ist teuer This forecast was from before Russia's attack on Ukraine Quelle Endenergieverbrauch nach Sektoren Quelle Nachfrageseite: Endverbrauch nach Sektoren Privathaushalte : Heizen, Kochen, K\u00fchlen, usw. Verkehr : Transport von Personen und G\u00fctern Gewerblich : Verkauf von Waren und Dienstleistungen Industrie : Herstellung von Waren, in der Regel aus Rohstoffen. Landwirtschaft : Energieverbrauch: D\u00fcngemittel, Licht, W\u00e4rme, Maschinen Gesamt Prim\u00e4renergieversorgung der Welt nach Quellen Quelle \ud83e\udd13 Gesamt Prim\u00e4renergieversorgung im Jahr ? Quelle Sch\u00e4tzungen der Waldrodung in Mitteleuropa (Deutschland, Nordostfrankreich) anhand arch\u00e4ologischer Holzreste 200 v. Chr. bis 400 v. Chr. (dekadische Daten; jeder Punkt des Diagramms steht f\u00fcr die Intensit\u00e4t des Holzeinschlags). Quelle Energiepolitisches Zieldreieck Zusammenfassung Der gr\u00f6\u00dfte Teil der Prim\u00e4renergie weltweit stammt immer noch aus nicht erneuerbaren Energiequellen Sichere, erschwingliche Energie ist eine der wichtigsten Triebfedern der menschlichen Entwicklung Energie wird in allen Sektoren ben\u00f6tigt (Haushalt, Transport, Produktion) Nur ein kleiner Teil der Energie wird in elektrische umgewandelt Eine kurze Einf\u00fchrung in die Energiewirtschaft Energiekosten und Erl\u00f6se Quelle Stadtwerke-Welt (mit Beginn der Elektrifizierung 19 Jhd.) Ein Stadtwerk betreibt Netz und Stromerzeugung in seinem Netzgebiet Monopolstellung der Stadtwerke Europ\u00e4ische Energiemarktintegration Entwicklung eines gemeinsamen Europ\u00e4ischen Stromnetzes (Ausfallsicherheit) und Binnenmarktes Aus integrierten Stadtwerken (und Energiekonzernen) werden getrennte Netzbetreiber und Energieversorgungs-unternehmen (EVU) Europ\u00e4ische Energiemarktintegration Alle Marktteilnehmer handeln Energiemengen frei miteinander Netz wird von neutralen Netzbetreibern verantwortet Handel von Strom kann bilateral oder auf der Europ\u00e4ischen Stromb\u00f6rse (EEX) stattfinden Netzrestriktionen werden innerhalb einzelner L\u00e4nder vom Markt ignoriert Solange keine Netzrestriktionen an den Gren-Kuppel-Stellen bestehen haben L\u00e4nder den gleichen Strompreis Eine \u00e4hnliche Logik gilt f\u00fcr den Gas-Markt Trennung von Nat\u00fcrlichem Monopol (Netz) und Markt (Energie) Beim Stromnetz handelt es sich um ein nat\u00fcrliches Monopol (ebenso Gas und Eisenbahn) Kein Mitbewerber kann ein Parallelnetz aufbauen, und dieses g\u00fcnstiger anbieten Idee: Netz und Energie werden getrennt behandelt Dies soll den Europ\u00e4ischen Austausch f\u00f6rdern und Kosten senken Quelle Elektrische Energie aus Strom ist ein Homogenes Gut Eine kWh Strom kann \u00fcberall im Europ\u00e4ischen Stromnetz eingespeist werden Eingespeiste und entnommene Energie k\u00f6nnen nicht nachverfolgt werden Das Netz wird nicht beachtet (Kupferplatte, Zonales Preissystem) Quelle \u00d6kostrom EVU, dies \u00d6kostrom anbieten haben folgende M\u00f6glichkeiten \u00d6kostrom selbst produzieren per Liefervertrag einkaufen handelbare Erzeugungszertifikate erwerben Mengengleiche \u00d6kostromversorgung: Ausgleich \u00fcbers Jahr Zeitgleiche \u00d6kostromversorgung: Ausgleich in jeder Viertelstunde Rollen auf dem Energiemarkt (vereinfacht) Rollen auf dem Energiemarkt (vereinfacht) Ein Unternehmen kann gleichzeitig unterschiedliche Rollen einnehmen Stromanbieter: Gro\u00dfe Erzeuger vom elektrischem Strom (Kraftwerksparks) verkaufen Energiemengen Stromnachfrager: Energieversorgungsunternehmen (EVU) kaufen Energiemengen Endverbraucher: Haushalte und Gewerbe, beziehen Strom von den Energieversorgungsunternehmen und rechen \u00fcber Tarife ab (nur sehr gro\u00dfe Firmen handeln selbst auf der Stromb\u00f6rse) Netzbetreiber: Greifen nicht in den Handel mit Strom ein Angebot und Nachfrage Stromanbieter bieten zu marginalen Kosten an: Was immer es kostet eine MWh elektrischen Strom zu produzieren Erneuerbare Erzeuger haben marginale Kosten von 0 \u20ac/MWh Gaskraftwerke sind teuer Kapitalkosten werden nicht eingepreist (sunk costs) Stromnachfrager sind unelastisch: EVU m\u00fcssen beschaffen, was Haushalte und Gewerbe beziehen Quelle Merit Order Modell Quelle Merit Order Modell Die Aufreihung des Angebots wird als Merit Order bezeichnet In jeder Viertelstunde wird die der Einsatz der Erzeuger nach der Merit Order festgelegt Es muss immer genau so viel Strom abgenommen, wie eingespeist werden Die Nachfrage kann kurzfristig als nicht-elastisch (preis-unabh\u00e4ngig) angenommen werden Der Schnittpunkt zwischen Angebot und nachfrage bestimmt den Preis All abgerufenen Kraftwerke erhalten den Preis, den das letzte Kraftwerk erzielt Quelle Preis-Schwankung Intraday Quelle Preis-Schwankung Intraday Je nach Last und Erzeugungssituation stellen sich unterschiedliche Preise ein EVU haben ein Interesse den Verbrauch ihrer Kund:innen in Richtung der g\u00fcnstigen Stunden zu verschieben Zeit-dynamische Tarife Unterbrechbare Lasten Das w\u00fcrde die Elastizit\u00e4t/Flexibilit\u00e4t der Nachfrage erh\u00f6hen EVUs m\u00fcssen in teuren Stunden weniger Strom beziehen Geschieht dies nicht im ausreichenden Ma\u00dfe Strompreis steigt Mehr Emissionen Lastabschaltungen Struktur des Stromnetz Quelle Quelle \u00dcbertragungsnetz Maschen-Topologie Engp\u00e4sse bei starken lokalen Ungleichgewichten Marktergebnis kann nicht umgesetzt werden: Redispatch Weitere Aufgaben der \u00dcbertragungsnetzbetreiber Frequenzhaltung Systemreserve Verteilnetz Ring- oder Strang-Topologie Engp\u00e4sse bei hohen Gleichzeitigkeiten W\u00e4rmepumpen \"Zahnarzt-Allee\" \ud83d\udd25_\ud83d\ude97\ud83d\ude97\ud83d\ude97\ud83d\ude97\ud83d\ude97 PV-R\u00fcckspeisung \ud83d\udd25_\u26a1\u26a1\u26a1\u26a1\u26a1 Nachfrage: Relevanz der elektrischen Energieversorgung Quelle Nachfrage: Zunehmende Elektrifizierung Quelle Nachfrage: Emissionsvermeidung durch Elektrifizierung Quelle Angebot: Anstieg volatiler Erneuerbarer Energien Quelle \ud83e\udde0 Fazit Strom als \"wertvollster\" Energietr\u00e4ger, da geringe Umwandlungsverluste zunehmend h\u00f6herer Teil an Energiedienstleistungen wird aus Strom gedeckt Stromangebot wird zeitlich flexibel (Photovoltaik und Wind nicht immer verf\u00fcgbar - Dunkelflaute) Nicht nur Menge des Strombezugs, sondern auch dessen Zeitpunkt ist entscheidend EVU und Netzbetreiber ben\u00f6tigen Daten \u00fcber Erzeugung und Verbrauch zu Planung und Optimierung EVU und Netzbetreiber haben Anreize den Verbrauch der Endverbraucher steuernd zu beeinflussen Smart Metering Herk\u00f6mmliche Z\u00e4hler integrierende Messung keine Messzeitreihe Visuelles Ablesen eines Momentanwerts Standardlastprofile auf historischen Daten basierende Annahmen \u00fcber typische Verbrauchsmuster gemittelt (enthalten keine Lastspitzen) dienen der Planung (z.B. Auslegung des Netzes, Beschaffung von Strom an der Stromb\u00f6rse) zunehmend unpr\u00e4zise Quelle Intelligente Z\u00e4hler (Smart Meter) sind Gas-, Wasser- oder Stromz\u00e4hler , die digital Daten auszeichnen, senden und ggf. auch empfangen (Busteilnehmer) Basisfunktionen: Messung Datenspeicherung Kommunikation Komponenten eines Smart Meters (AT) Quelle Kommunikation zwischen verschiedenen Rollen Komponenten eines Intelligentes Messsystems (D) Strikte Trennung in zwei kompatible Komponenten: Modernen Messeinrichtung erfasst Energiefluss digital Smart Meter Gateway Kommunikations-Schnittstelle , welche die Z\u00e4hlerwerte speichern, Daten verarbeiten und mit einem Netzwerk kommuniziert (Kommunikationsmodul) Quelle Kommunikationsmodul Anbindung \u00fcber diverse Bus-Systeme (Power-Line-Communication, Mobilfunk, M-Bus, TCP/IP, ...) erm\u00f6glicht Fernauslesung : Energieversorgungsunternehmen kann Stromverbrauch aus der Ferne ablesen Privatsph\u00e4re : Bedenken, dass auf Verhalten und Anwesenheit geschlossen werden kann Kommunikationsmodul: Einf\u00fchrung neuer Stromtarife Zeitvariable Tarife : Strom kostet mehr zu Hochlastzeiten (abends, W\u00e4rmepumpen) Last-variable Tarife : Strom kostet in Abh\u00e4ngigkeit der bezogenen Leistung Zeit-dynamische Tarife : Strompreise k\u00f6nnen sich flexibel ver\u00e4ndern (z.B. alle 15 Minuten) Quelle Gesetzliches EU Richtlinie 2006 : allen Mitgliedstaaten, soweit technisch machbar, finanziell vertretbar und im Vergleich zu den potentiellen Energieeinsparungen angemessen, alle Endkunden in den Bereichen Strom, Erdgas, Fernheizung und/oder -k\u00fchlung und Warmbrauchwasser individuelle Z\u00e4hler tats\u00e4chlichen Energieverbrauch des Endkunden und die tats\u00e4chliche Nutzungszeit anzeigt m\u00f6gliche L\u00f6sung: M-Bus Sensor + Display Kundenschnittstelle (Home Area Network) in \u00d6sterreich nicht fix definiert Spannung, Wirkleistung, Blindleistung aller Phasen h\u00e4ufig MBUS, aber auch andere Bussysteme teilweise verschl\u00fcsselt Quelle Stand Smart Meter Rollout Europa 2020 Land Durchdringung in % Bemerkung Spanien 100 Irland 100 D\u00e4nemark 100 Finnland 100 Malta 100 Italien 99 Treiber Stromklau? Luxemburg 95 \u00d6sterreich 95 Prakmatisch Frankreich 95 Land Durchdringung in % Bemerkung Griechenland 80 Polen 80 Rum\u00e4nien 80 Deutschland 23 Overengineering Lettland 23 Quelle Eichrecht abrechnungs-relevante Z\u00e4hler m\u00fcssen eich-rechtlich zugelassen sein Ma\u00df- und Eichgesetz (MEG) Mengenmessger\u00e4te f\u00fcr Gas, Mengenmessger\u00e4te f\u00fcr sauberes Wasser aus Versorgungsleitungen, Mengenmessger\u00e4te f\u00fcr thermische Energie (W\u00e4rmez\u00e4hler, K\u00e4ltez\u00e4hler), Elektrizit\u00e4tsz\u00e4hler Z\u00e4hler muss bei in Verkehr bringen der Europ\u00e4ischen Messger\u00e4te-Richtlinie MID entsprechen Regelm\u00e4\u00dfig \u00fcberpr\u00fcft (geeicht) werden Quelle \ud83e\udd13 Smart Meter \u00d6sterreich Quelle \ud83e\udd13 Besonderheit Deutschland Technische Richtlinie 03109-1 Anforderungen an die Interoperabilit\u00e4t der Kommunikationseinheit eines intelligenten Messsystems Bundesamt f\u00fcr Sicherheit in der Informationstechni k \u2013 BSI definierte umfassende Anforderungen, welche von der Herstellern umgesetzt werden mussten z.B. \u00dcbertragung \u00fcber asymmetrische Verschl\u00fcsselung und Zertifizierung Standardisierte Basisfunktionen (Tarifanwendungsf\u00e4lle) Smart Meter Deutschland soll \u00d6kosystem zum Vernetzung verschiedenster Akteure spielen Zus\u00e4tzlich zur Kommunikationsmodul (WAN) und Kundenschnittstellen (HAN) k\u00f6nnen noch weitere Z\u00e4hler integriert werden (LMN) Quelle Tarifanwendungsf\u00e4lle Quelle Kritik an Deutschem System Sp\u00e4te Markteinf\u00fchrung hohe Kosten (>100 \u20ac/a) \u00dcberreglementierung Kein Freitraum f\u00fcr Tarifentwicklung Anforderungen EVU \u00fcber WAN-Schnittstelle: Abrechnung auf 15 Minuten-Basis ausreichend Liegenschaftsbetreiber \u00fcber HAN-Schnittstelle: Mess- und Regelung in Geb\u00e4udeleittechnik erfordert h\u00f6here Aufl\u00f6sung ( Parallelstruktur ) Einbauempfehlung Deutschland Quelle","title":"Smart Metering"},{"location":"6_1_Smart_Metering/#smart-metering","text":"","title":"Smart Metering"},{"location":"6_1_Smart_Metering/#globale-aspekte-der-energieversorgung","text":"","title":"Globale Aspekte der Energieversorgung"},{"location":"6_1_Smart_Metering/#wie-viele-energie-sklaven-benotigen-wir","text":"the energy slave is a unit of measurement that allows us to better understand and evaluate the consequences of our life choices. An energy slave works to produce energy 24 hours a day. He produces an average power output of 100 W (875 kWh/year) Quelle Quelle","title":"Wie viele \"Energie-Sklaven\" ben\u00f6tigen wir?"},{"location":"6_1_Smart_Metering/#primarenergiebedarf","text":"misst den gesamten Energiebedarf (eines Landes). Er umfasst den Verbrauch des Energiesektors selbst, Verluste bei der Umwandlung (z.B. von \u00d6l oder Gas in Elektrizit\u00e4t) und Verteilung von Energie sowie den Endverbrauch durch die Endverbraucher. Ausgeschlossen sind Energietr\u00e4ger, die f\u00fcr nichtenergetische Zwecke verwendet werden (z.B. Erd\u00f6l, das nicht zur Verbrennung, sondern zur Herstellung von Kunststoffen verwendet wird). Quelle Quelle Quelle","title":"\ud83e\udde0 Prim\u00e4renergiebedarf"},{"location":"6_1_Smart_Metering/#tonne-of-oil-equivalent","text":"(toe) ist eine Energieeinheit, die als die Energiemenge definiert ist, die bei der Verbrennung einer Tonne Roh\u00f6l freigesetzt wird. Sie betr\u00e4gt etwa 42 Gigajoule oder 11,630 MWh Quelle","title":"\ud83e\udd13 Tonne of oil equivalent?"},{"location":"6_1_Smart_Metering/#wie-viele-energie-sklaven-benotigen-wir_1","text":"\\(\\text{No. of Energy Slaves}\\) \\(= 3.7 \\frac{\\text{toe}}{\\text{a}} \\cdot 11.630 \\frac{\\text{MWh}}{\\text{toe}} \\cdot 1000\\frac{\\text{kWh}}{\\text{MWh}} \\cdot \\frac{1}{875}\\frac{\\text{a}}{\\text{kWh}}\\) \\(= 3.7 \\cdot 11.630 \\cdot 1000 \\cdot \\frac{1}{875}\\) \\(= 49.2\\) * Jeder Europ\u00e4er ben\u00f6tigt mehr als 50 virtuelle Energiesklaven, die Tag und Nacht arbeiten!","title":"Wie viele \"Energie-Sklaven\" ben\u00f6tigen wir?"},{"location":"6_1_Smart_Metering/#wasserkocher","text":"\\(P = 3.7 \\cdot \\frac{11,630}{8760}\\frac{kWh}{h}=4.9kW\\) als w\u00fcrden mehrere Wasserkocher kontinuierlich durchlaufen Is it bad to have too many energy slaves / kettles? Quelle","title":"Wasserkocher"},{"location":"6_1_Smart_Metering/#okonomie","text":"Kosten: Energieerzeugung ist teuer This forecast was from before Russia's attack on Ukraine Quelle","title":"\u00d6konomie"},{"location":"6_1_Smart_Metering/#endenergieverbrauch-nach-sektoren","text":"Quelle","title":"Endenergieverbrauch nach Sektoren"},{"location":"6_1_Smart_Metering/#nachfrageseite-endverbrauch-nach-sektoren","text":"Privathaushalte : Heizen, Kochen, K\u00fchlen, usw. Verkehr : Transport von Personen und G\u00fctern Gewerblich : Verkauf von Waren und Dienstleistungen Industrie : Herstellung von Waren, in der Regel aus Rohstoffen. Landwirtschaft : Energieverbrauch: D\u00fcngemittel, Licht, W\u00e4rme, Maschinen","title":"Nachfrageseite: Endverbrauch nach Sektoren"},{"location":"6_1_Smart_Metering/#gesamt-primarenergieversorgung-der-welt-nach-quellen","text":"Quelle","title":"Gesamt Prim\u00e4renergieversorgung der Welt nach Quellen"},{"location":"6_1_Smart_Metering/#gesamt-primarenergieversorgung-im-jahr","text":"Quelle Sch\u00e4tzungen der Waldrodung in Mitteleuropa (Deutschland, Nordostfrankreich) anhand arch\u00e4ologischer Holzreste 200 v. Chr. bis 400 v. Chr. (dekadische Daten; jeder Punkt des Diagramms steht f\u00fcr die Intensit\u00e4t des Holzeinschlags). Quelle","title":"\ud83e\udd13 Gesamt Prim\u00e4renergieversorgung im Jahr ?"},{"location":"6_1_Smart_Metering/#energiepolitisches-zieldreieck","text":"","title":"Energiepolitisches Zieldreieck"},{"location":"6_1_Smart_Metering/#zusammenfassung","text":"Der gr\u00f6\u00dfte Teil der Prim\u00e4renergie weltweit stammt immer noch aus nicht erneuerbaren Energiequellen Sichere, erschwingliche Energie ist eine der wichtigsten Triebfedern der menschlichen Entwicklung Energie wird in allen Sektoren ben\u00f6tigt (Haushalt, Transport, Produktion) Nur ein kleiner Teil der Energie wird in elektrische umgewandelt","title":"Zusammenfassung"},{"location":"6_1_Smart_Metering/#eine-kurze-einfuhrung-in-die-energiewirtschaft","text":"","title":"Eine kurze Einf\u00fchrung in die Energiewirtschaft"},{"location":"6_1_Smart_Metering/#energiekosten-und-erlose","text":"Quelle","title":"Energiekosten und Erl\u00f6se"},{"location":"6_1_Smart_Metering/#stadtwerke-welt-mit-beginn-der-elektrifizierung-19-jhd","text":"Ein Stadtwerk betreibt Netz und Stromerzeugung in seinem Netzgebiet Monopolstellung der Stadtwerke","title":"Stadtwerke-Welt (mit Beginn der Elektrifizierung 19 Jhd.)"},{"location":"6_1_Smart_Metering/#europaische-energiemarktintegration","text":"Entwicklung eines gemeinsamen Europ\u00e4ischen Stromnetzes (Ausfallsicherheit) und Binnenmarktes Aus integrierten Stadtwerken (und Energiekonzernen) werden getrennte Netzbetreiber und Energieversorgungs-unternehmen (EVU)","title":"Europ\u00e4ische Energiemarktintegration"},{"location":"6_1_Smart_Metering/#europaische-energiemarktintegration_1","text":"Alle Marktteilnehmer handeln Energiemengen frei miteinander Netz wird von neutralen Netzbetreibern verantwortet Handel von Strom kann bilateral oder auf der Europ\u00e4ischen Stromb\u00f6rse (EEX) stattfinden Netzrestriktionen werden innerhalb einzelner L\u00e4nder vom Markt ignoriert Solange keine Netzrestriktionen an den Gren-Kuppel-Stellen bestehen haben L\u00e4nder den gleichen Strompreis Eine \u00e4hnliche Logik gilt f\u00fcr den Gas-Markt","title":"Europ\u00e4ische Energiemarktintegration"},{"location":"6_1_Smart_Metering/#trennung-von-naturlichem-monopol-netz-und-markt-energie","text":"Beim Stromnetz handelt es sich um ein nat\u00fcrliches Monopol (ebenso Gas und Eisenbahn) Kein Mitbewerber kann ein Parallelnetz aufbauen, und dieses g\u00fcnstiger anbieten Idee: Netz und Energie werden getrennt behandelt Dies soll den Europ\u00e4ischen Austausch f\u00f6rdern und Kosten senken Quelle","title":"Trennung von Nat\u00fcrlichem Monopol (Netz) und Markt (Energie)"},{"location":"6_1_Smart_Metering/#elektrische-energie-aus-strom-ist-ein-homogenes-gut","text":"Eine kWh Strom kann \u00fcberall im Europ\u00e4ischen Stromnetz eingespeist werden Eingespeiste und entnommene Energie k\u00f6nnen nicht nachverfolgt werden Das Netz wird nicht beachtet (Kupferplatte, Zonales Preissystem) Quelle","title":"Elektrische Energie aus Strom ist ein Homogenes Gut"},{"location":"6_1_Smart_Metering/#okostrom","text":"EVU, dies \u00d6kostrom anbieten haben folgende M\u00f6glichkeiten \u00d6kostrom selbst produzieren per Liefervertrag einkaufen handelbare Erzeugungszertifikate erwerben Mengengleiche \u00d6kostromversorgung: Ausgleich \u00fcbers Jahr Zeitgleiche \u00d6kostromversorgung: Ausgleich in jeder Viertelstunde","title":"\u00d6kostrom"},{"location":"6_1_Smart_Metering/#rollen-auf-dem-energiemarkt-vereinfacht","text":"","title":"Rollen auf dem Energiemarkt (vereinfacht)"},{"location":"6_1_Smart_Metering/#rollen-auf-dem-energiemarkt-vereinfacht_1","text":"Ein Unternehmen kann gleichzeitig unterschiedliche Rollen einnehmen Stromanbieter: Gro\u00dfe Erzeuger vom elektrischem Strom (Kraftwerksparks) verkaufen Energiemengen Stromnachfrager: Energieversorgungsunternehmen (EVU) kaufen Energiemengen Endverbraucher: Haushalte und Gewerbe, beziehen Strom von den Energieversorgungsunternehmen und rechen \u00fcber Tarife ab (nur sehr gro\u00dfe Firmen handeln selbst auf der Stromb\u00f6rse) Netzbetreiber: Greifen nicht in den Handel mit Strom ein","title":"Rollen auf dem Energiemarkt (vereinfacht)"},{"location":"6_1_Smart_Metering/#angebot-und-nachfrage","text":"Stromanbieter bieten zu marginalen Kosten an: Was immer es kostet eine MWh elektrischen Strom zu produzieren Erneuerbare Erzeuger haben marginale Kosten von 0 \u20ac/MWh Gaskraftwerke sind teuer Kapitalkosten werden nicht eingepreist (sunk costs) Stromnachfrager sind unelastisch: EVU m\u00fcssen beschaffen, was Haushalte und Gewerbe beziehen Quelle","title":"Angebot und Nachfrage"},{"location":"6_1_Smart_Metering/#merit-order-modell","text":"Quelle","title":"Merit Order Modell"},{"location":"6_1_Smart_Metering/#merit-order-modell_1","text":"Die Aufreihung des Angebots wird als Merit Order bezeichnet In jeder Viertelstunde wird die der Einsatz der Erzeuger nach der Merit Order festgelegt Es muss immer genau so viel Strom abgenommen, wie eingespeist werden Die Nachfrage kann kurzfristig als nicht-elastisch (preis-unabh\u00e4ngig) angenommen werden Der Schnittpunkt zwischen Angebot und nachfrage bestimmt den Preis All abgerufenen Kraftwerke erhalten den Preis, den das letzte Kraftwerk erzielt Quelle","title":"Merit Order Modell"},{"location":"6_1_Smart_Metering/#preis-schwankung-intraday","text":"Quelle","title":"Preis-Schwankung Intraday"},{"location":"6_1_Smart_Metering/#preis-schwankung-intraday_1","text":"Je nach Last und Erzeugungssituation stellen sich unterschiedliche Preise ein EVU haben ein Interesse den Verbrauch ihrer Kund:innen in Richtung der g\u00fcnstigen Stunden zu verschieben Zeit-dynamische Tarife Unterbrechbare Lasten Das w\u00fcrde die Elastizit\u00e4t/Flexibilit\u00e4t der Nachfrage erh\u00f6hen EVUs m\u00fcssen in teuren Stunden weniger Strom beziehen Geschieht dies nicht im ausreichenden Ma\u00dfe Strompreis steigt Mehr Emissionen Lastabschaltungen","title":"Preis-Schwankung Intraday"},{"location":"6_1_Smart_Metering/#struktur-des-stromnetz","text":"Quelle Quelle","title":"Struktur des Stromnetz"},{"location":"6_1_Smart_Metering/#ubertragungsnetz","text":"Maschen-Topologie Engp\u00e4sse bei starken lokalen Ungleichgewichten Marktergebnis kann nicht umgesetzt werden: Redispatch Weitere Aufgaben der \u00dcbertragungsnetzbetreiber Frequenzhaltung Systemreserve","title":"\u00dcbertragungsnetz"},{"location":"6_1_Smart_Metering/#verteilnetz","text":"Ring- oder Strang-Topologie Engp\u00e4sse bei hohen Gleichzeitigkeiten W\u00e4rmepumpen \"Zahnarzt-Allee\" \ud83d\udd25_\ud83d\ude97\ud83d\ude97\ud83d\ude97\ud83d\ude97\ud83d\ude97 PV-R\u00fcckspeisung \ud83d\udd25_\u26a1\u26a1\u26a1\u26a1\u26a1","title":"Verteilnetz"},{"location":"6_1_Smart_Metering/#nachfrage-relevanz-der-elektrischen-energieversorgung","text":"Quelle","title":"Nachfrage: Relevanz der elektrischen Energieversorgung"},{"location":"6_1_Smart_Metering/#nachfrage-zunehmende-elektrifizierung","text":"Quelle","title":"Nachfrage: Zunehmende Elektrifizierung"},{"location":"6_1_Smart_Metering/#nachfrage-emissionsvermeidung-durch-elektrifizierung","text":"Quelle","title":"Nachfrage: Emissionsvermeidung durch Elektrifizierung"},{"location":"6_1_Smart_Metering/#angebot-anstieg-volatiler-erneuerbarer-energien","text":"Quelle","title":"Angebot: Anstieg volatiler Erneuerbarer Energien"},{"location":"6_1_Smart_Metering/#fazit","text":"Strom als \"wertvollster\" Energietr\u00e4ger, da geringe Umwandlungsverluste zunehmend h\u00f6herer Teil an Energiedienstleistungen wird aus Strom gedeckt Stromangebot wird zeitlich flexibel (Photovoltaik und Wind nicht immer verf\u00fcgbar - Dunkelflaute) Nicht nur Menge des Strombezugs, sondern auch dessen Zeitpunkt ist entscheidend EVU und Netzbetreiber ben\u00f6tigen Daten \u00fcber Erzeugung und Verbrauch zu Planung und Optimierung EVU und Netzbetreiber haben Anreize den Verbrauch der Endverbraucher steuernd zu beeinflussen","title":"\ud83e\udde0 Fazit"},{"location":"6_1_Smart_Metering/#smart-metering_1","text":"","title":"Smart Metering"},{"location":"6_1_Smart_Metering/#herkommliche-zahler","text":"integrierende Messung keine Messzeitreihe Visuelles Ablesen eines Momentanwerts","title":"Herk\u00f6mmliche Z\u00e4hler"},{"location":"6_1_Smart_Metering/#standardlastprofile","text":"auf historischen Daten basierende Annahmen \u00fcber typische Verbrauchsmuster gemittelt (enthalten keine Lastspitzen) dienen der Planung (z.B. Auslegung des Netzes, Beschaffung von Strom an der Stromb\u00f6rse) zunehmend unpr\u00e4zise Quelle","title":"Standardlastprofile"},{"location":"6_1_Smart_Metering/#intelligente-zahler","text":"(Smart Meter) sind Gas-, Wasser- oder Stromz\u00e4hler , die digital Daten auszeichnen, senden und ggf. auch empfangen (Busteilnehmer) Basisfunktionen: Messung Datenspeicherung Kommunikation","title":"Intelligente Z\u00e4hler"},{"location":"6_1_Smart_Metering/#komponenten-eines-smart-meters-at","text":"Quelle","title":"Komponenten eines Smart Meters (AT)"},{"location":"6_1_Smart_Metering/#kommunikation-zwischen-verschiedenen-rollen","text":"","title":"Kommunikation zwischen verschiedenen Rollen"},{"location":"6_1_Smart_Metering/#komponenten-eines-intelligentes-messsystems-d","text":"Strikte Trennung in zwei kompatible Komponenten: Modernen Messeinrichtung erfasst Energiefluss digital Smart Meter Gateway Kommunikations-Schnittstelle , welche die Z\u00e4hlerwerte speichern, Daten verarbeiten und mit einem Netzwerk kommuniziert (Kommunikationsmodul) Quelle","title":"Komponenten eines Intelligentes Messsystems (D)"},{"location":"6_1_Smart_Metering/#kommunikationsmodul","text":"Anbindung \u00fcber diverse Bus-Systeme (Power-Line-Communication, Mobilfunk, M-Bus, TCP/IP, ...) erm\u00f6glicht Fernauslesung : Energieversorgungsunternehmen kann Stromverbrauch aus der Ferne ablesen Privatsph\u00e4re : Bedenken, dass auf Verhalten und Anwesenheit geschlossen werden kann","title":"Kommunikationsmodul"},{"location":"6_1_Smart_Metering/#kommunikationsmodul-einfuhrung-neuer-stromtarife","text":"Zeitvariable Tarife : Strom kostet mehr zu Hochlastzeiten (abends, W\u00e4rmepumpen) Last-variable Tarife : Strom kostet in Abh\u00e4ngigkeit der bezogenen Leistung Zeit-dynamische Tarife : Strompreise k\u00f6nnen sich flexibel ver\u00e4ndern (z.B. alle 15 Minuten) Quelle","title":"Kommunikationsmodul: Einf\u00fchrung neuer Stromtarife"},{"location":"6_1_Smart_Metering/#gesetzliches","text":"EU Richtlinie 2006 : allen Mitgliedstaaten, soweit technisch machbar, finanziell vertretbar und im Vergleich zu den potentiellen Energieeinsparungen angemessen, alle Endkunden in den Bereichen Strom, Erdgas, Fernheizung und/oder -k\u00fchlung und Warmbrauchwasser individuelle Z\u00e4hler tats\u00e4chlichen Energieverbrauch des Endkunden und die tats\u00e4chliche Nutzungszeit anzeigt m\u00f6gliche L\u00f6sung: M-Bus Sensor + Display","title":"Gesetzliches"},{"location":"6_1_Smart_Metering/#kundenschnittstelle-home-area-network","text":"in \u00d6sterreich nicht fix definiert Spannung, Wirkleistung, Blindleistung aller Phasen h\u00e4ufig MBUS, aber auch andere Bussysteme teilweise verschl\u00fcsselt Quelle","title":"Kundenschnittstelle (Home Area Network)"},{"location":"6_1_Smart_Metering/#stand-smart-meter-rollout-europa-2020","text":"Land Durchdringung in % Bemerkung Spanien 100 Irland 100 D\u00e4nemark 100 Finnland 100 Malta 100 Italien 99 Treiber Stromklau? Luxemburg 95 \u00d6sterreich 95 Prakmatisch Frankreich 95 Land Durchdringung in % Bemerkung Griechenland 80 Polen 80 Rum\u00e4nien 80 Deutschland 23 Overengineering Lettland 23 Quelle","title":"Stand Smart Meter Rollout Europa 2020"},{"location":"6_1_Smart_Metering/#eichrecht","text":"abrechnungs-relevante Z\u00e4hler m\u00fcssen eich-rechtlich zugelassen sein Ma\u00df- und Eichgesetz (MEG) Mengenmessger\u00e4te f\u00fcr Gas, Mengenmessger\u00e4te f\u00fcr sauberes Wasser aus Versorgungsleitungen, Mengenmessger\u00e4te f\u00fcr thermische Energie (W\u00e4rmez\u00e4hler, K\u00e4ltez\u00e4hler), Elektrizit\u00e4tsz\u00e4hler Z\u00e4hler muss bei in Verkehr bringen der Europ\u00e4ischen Messger\u00e4te-Richtlinie MID entsprechen Regelm\u00e4\u00dfig \u00fcberpr\u00fcft (geeicht) werden Quelle","title":"Eichrecht"},{"location":"6_1_Smart_Metering/#smart-meter-osterreich","text":"Quelle","title":"\ud83e\udd13 Smart Meter \u00d6sterreich"},{"location":"6_1_Smart_Metering/#besonderheit-deutschland","text":"Technische Richtlinie 03109-1 Anforderungen an die Interoperabilit\u00e4t der Kommunikationseinheit eines intelligenten Messsystems Bundesamt f\u00fcr Sicherheit in der Informationstechni k \u2013 BSI definierte umfassende Anforderungen, welche von der Herstellern umgesetzt werden mussten z.B. \u00dcbertragung \u00fcber asymmetrische Verschl\u00fcsselung und Zertifizierung Standardisierte Basisfunktionen (Tarifanwendungsf\u00e4lle)","title":"\ud83e\udd13 Besonderheit Deutschland"},{"location":"6_1_Smart_Metering/#smart-meter-deutschland","text":"soll \u00d6kosystem zum Vernetzung verschiedenster Akteure spielen Zus\u00e4tzlich zur Kommunikationsmodul (WAN) und Kundenschnittstellen (HAN) k\u00f6nnen noch weitere Z\u00e4hler integriert werden (LMN) Quelle","title":"Smart Meter Deutschland"},{"location":"6_1_Smart_Metering/#tarifanwendungsfalle","text":"Quelle","title":"Tarifanwendungsf\u00e4lle"},{"location":"6_1_Smart_Metering/#kritik-an-deutschem-system","text":"Sp\u00e4te Markteinf\u00fchrung hohe Kosten (>100 \u20ac/a) \u00dcberreglementierung Kein Freitraum f\u00fcr Tarifentwicklung Anforderungen EVU \u00fcber WAN-Schnittstelle: Abrechnung auf 15 Minuten-Basis ausreichend Liegenschaftsbetreiber \u00fcber HAN-Schnittstelle: Mess- und Regelung in Geb\u00e4udeleittechnik erfordert h\u00f6here Aufl\u00f6sung ( Parallelstruktur )","title":"Kritik an Deutschem System"},{"location":"6_1_Smart_Metering/#einbauempfehlung-deutschland","text":"Quelle","title":"Einbauempfehlung Deutschland"},{"location":"topic1-content/","text":"Topic 1 - Content Quicklinks Google Colabs Sakai Aufgaben 0 Organisatorisches","title":"Topic 1 - Content"},{"location":"topic1-content/#topic-1-content","text":"","title":"Topic 1 - Content"},{"location":"topic1-content/#quicklinks","text":"Google Colabs Sakai Aufgaben","title":"Quicklinks"},{"location":"topic1-content/#0-organisatorisches","text":"","title":"0 Organisatorisches"},{"location":"topic1-task/","text":"Topic 1 - Task Quicklinks Google Colabs Sakai Aufgaben Third Level Fourth Level 0 Organisatorisches","title":"Topic 1 - Task"},{"location":"topic1-task/#topic-1-task","text":"","title":"Topic 1 - Task"},{"location":"topic1-task/#quicklinks","text":"Google Colabs Sakai Aufgaben","title":"Quicklinks"},{"location":"topic1-task/#third-level","text":"","title":"Third Level"},{"location":"topic1-task/#fourth-level","text":"","title":"Fourth Level"},{"location":"topic1-task/#0-organisatorisches","text":"","title":"0 Organisatorisches"},{"location":"topic1/","text":"Topic 1 Quicklinks Google Colabs Sakai Aufgaben 0 Organisatorisches","title":"Topic 1"},{"location":"topic1/#topic-1","text":"","title":"Topic 1"},{"location":"topic1/#quicklinks","text":"Google Colabs Sakai Aufgaben","title":"Quicklinks"},{"location":"topic1/#0-organisatorisches","text":"","title":"0 Organisatorisches"}]}